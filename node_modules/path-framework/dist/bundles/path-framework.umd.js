(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@angular/platform-browser'), require('@angular/common/http'), require('@angular/forms'), require('@angular/common'), require('@angular/platform-browser/animations'), require('moment'), require('ngx-bootstrap/datepicker'), require('ngx-bootstrap/tooltip'), require('rxjs'), require('rxjs/operators')) :
    typeof define === 'function' && define.amd ? define('path-framework', ['exports', '@angular/core', '@angular/platform-browser', '@angular/common/http', '@angular/forms', '@angular/common', '@angular/platform-browser/animations', 'moment', 'ngx-bootstrap/datepicker', 'ngx-bootstrap/tooltip', 'rxjs', 'rxjs/operators'], factory) :
    (global = global || self, factory(global['path-framework'] = {}, global.ng.core, global.ng.platformBrowser, global.ng.common.http, global.ng.forms, global.ng.common, global.ng.platformBrowser.animations, global.momentImported, global.datepicker, global.tooltip, global.rxjs, global.rxjs.operators));
}(this, (function (exports, core, platformBrowser, http, forms, common, animations, momentImported, datepicker, tooltip, rxjs, operators) { 'use strict';

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation. All rights reserved.
    Licensed under the Apache License, Version 2.0 (the "License"); you may not use
    this file except in compliance with the License. You may obtain a copy of the
    License at http://www.apache.org/licenses/LICENSE-2.0

    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
    MERCHANTABLITY OR NON-INFRINGEMENT.

    See the Apache Version 2.0 License for specific language governing permissions
    and limitations under the License.
    ***************************************************************************** */
    /* global Reflect, Promise */

    var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };

    function __extends(d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }

    var __assign = function() {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };

    function __rest(s, e) {
        var t = {};
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
            t[p] = s[p];
        if (s != null && typeof Object.getOwnPropertySymbols === "function")
            for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
                if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                    t[p[i]] = s[p[i]];
            }
        return t;
    }

    function __decorate(decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
        else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    }

    function __param(paramIndex, decorator) {
        return function (target, key) { decorator(target, key, paramIndex); }
    }

    function __metadata(metadataKey, metadataValue) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(metadataKey, metadataValue);
    }

    function __awaiter(thisArg, _arguments, P, generator) {
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
            function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
            function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    }

    function __generator(thisArg, body) {
        var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
        function verb(n) { return function (v) { return step([n, v]); }; }
        function step(op) {
            if (f) throw new TypeError("Generator is already executing.");
            while (_) try {
                if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
                if (y = 0, t) op = [op[0] & 2, t.value];
                switch (op[0]) {
                    case 0: case 1: t = op; break;
                    case 4: _.label++; return { value: op[1], done: false };
                    case 5: _.label++; y = op[1]; op = [0]; continue;
                    case 7: op = _.ops.pop(); _.trys.pop(); continue;
                    default:
                        if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                        if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                        if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                        if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                        if (t[2]) _.ops.pop();
                        _.trys.pop(); continue;
                }
                op = body.call(thisArg, _);
            } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
            if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
        }
    }

    function __exportStar(m, exports) {
        for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
    }

    function __values(o) {
        var m = typeof Symbol === "function" && o[Symbol.iterator], i = 0;
        if (m) return m.call(o);
        return {
            next: function () {
                if (o && i >= o.length) o = void 0;
                return { value: o && o[i++], done: !o };
            }
        };
    }

    function __read(o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m) return o;
        var i = m.call(o), r, ar = [], e;
        try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
        }
        catch (error) { e = { error: error }; }
        finally {
            try {
                if (r && !r.done && (m = i["return"])) m.call(i);
            }
            finally { if (e) throw e.error; }
        }
        return ar;
    }

    function __spread() {
        for (var ar = [], i = 0; i < arguments.length; i++)
            ar = ar.concat(__read(arguments[i]));
        return ar;
    }

    function __spreadArrays() {
        for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
        for (var r = Array(s), k = 0, i = 0; i < il; i++)
            for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
                r[k] = a[j];
        return r;
    };

    function __await(v) {
        return this instanceof __await ? (this.v = v, this) : new __await(v);
    }

    function __asyncGenerator(thisArg, _arguments, generator) {
        if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
        var g = generator.apply(thisArg, _arguments || []), i, q = [];
        return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i;
        function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }
        function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }
        function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }
        function fulfill(value) { resume("next", value); }
        function reject(value) { resume("throw", value); }
        function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }
    }

    function __asyncDelegator(o) {
        var i, p;
        return i = {}, verb("next"), verb("throw", function (e) { throw e; }), verb("return"), i[Symbol.iterator] = function () { return this; }, i;
        function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === "return" } : f ? f(v) : v; } : f; }
    }

    function __asyncValues(o) {
        if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
        var m = o[Symbol.asyncIterator], i;
        return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
        function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
        function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }
    }

    function __makeTemplateObject(cooked, raw) {
        if (Object.defineProperty) { Object.defineProperty(cooked, "raw", { value: raw }); } else { cooked.raw = raw; }
        return cooked;
    };

    function __importStar(mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
        result.default = mod;
        return result;
    }

    function __importDefault(mod) {
        return (mod && mod.__esModule) ? mod : { default: mod };
    }

    var FormField = /** @class */ (function () {
        function FormField(form, translationService) {
            this.form = form;
            this.translationService = translationService;
        }
        FormField.prototype.getForm = function () {
            return this.form;
        };
        Object.defineProperty(FormField.prototype, "height", {
            get: function () {
                return this._height;
            },
            set: function (value) {
                this._height = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(FormField.prototype, "visible", {
            get: function () {
                return this._visible;
            },
            set: function (value) {
                this._visible = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(FormField.prototype, "width", {
            get: function () {
                return this._width;
            },
            set: function (value) {
                this._width = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(FormField.prototype, "newRow", {
            get: function () {
                return this._newRow;
            },
            set: function (value) {
                this._newRow = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(FormField.prototype, "required", {
            get: function () {
                return this._required;
            },
            set: function (value) {
                this._required = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(FormField.prototype, "readonly", {
            get: function () {
                return this._readonly;
            },
            set: function (value) {
                this._readonly = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(FormField.prototype, "id", {
            get: function () {
                return this._id;
            },
            set: function (value) {
                this._id = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(FormField.prototype, "name", {
            get: function () {
                return this._name;
            },
            set: function (value) {
                this._name = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(FormField.prototype, "type", {
            get: function () {
                return this._type;
            },
            set: function (value) {
                this._type = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(FormField.prototype, "labelVisible", {
            get: function () {
                return this._labelVisible;
            },
            set: function (value) {
                this._labelVisible = value;
            },
            enumerable: true,
            configurable: true
        });
        FormField.prototype.isReadonly = function () {
            return this.readonly;
        };
        FormField.prototype.fromJson = function (modelFormField) {
            this.visible = true;
            if (modelFormField["visible"] != null) {
                this.visible = modelFormField["visible"];
            }
            this.labelVisible = true;
            if (modelFormField["labelVisible"] != null) {
                this.labelVisible = modelFormField["labelVisible"];
            }
            this.width = 1;
            if (modelFormField["width"] != null) {
                this.width = modelFormField["width"];
            }
            this.newRow = false;
            if (modelFormField["newRow"] != null) {
                this.newRow = modelFormField["newRow"];
            }
            this.required = false;
            if (modelFormField["required"] != null) {
                this.required = modelFormField["required"];
            }
            this.readonly = false;
            if (modelFormField["readonly"] != null) {
                this.readonly = modelFormField["readonly"];
            }
            this.id = modelFormField["id"];
            this.name = this.translationService.getText(modelFormField.name);
            this.type = modelFormField.type;
            this.height = modelFormField["height"];
        };
        return FormField;
    }());

    var ValueField = /** @class */ (function (_super) {
        __extends(ValueField, _super);
        function ValueField() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            _this._isInitialValueSet = false;
            _this._created = false;
            return _this;
        }
        Object.defineProperty(ValueField.prototype, "value", {
            get: function () {
                return this._value;
            },
            set: function (value) {
                this._value = value;
            },
            enumerable: true,
            configurable: true
        });
        ValueField.prototype.setValue = function (value) {
            this._value = value;
        };
        Object.defineProperty(ValueField.prototype, "created", {
            get: function () {
                return this._created;
            },
            set: function (value) {
                this._created = value;
            },
            enumerable: true,
            configurable: true
        });
        ValueField.prototype.isReadonly = function () {
            return this.readonly;
        };
        Object.defineProperty(ValueField.prototype, "isInitialValueSet", {
            get: function () {
                return this._isInitialValueSet;
            },
            set: function (value) {
                this._isInitialValueSet = value;
            },
            enumerable: true,
            configurable: true
        });
        ValueField.prototype.fromJson = function (modelFormField) {
            _super.prototype.fromJson.call(this, modelFormField);
            if (modelFormField["value"] != null) {
                this.setValue(modelFormField["value"]);
            }
        };
        return ValueField;
    }(FormField));

    var FileUploadComponent = /** @class */ (function () {
        function FileUploadComponent(http) {
            this.http = http;
            this.dragActive = false;
        }
        FileUploadComponent.prototype.onDropFile = function (event) {
            this.dragActive = false;
            event.preventDefault();
            this.uploadFile(event.dataTransfer.files);
        };
        FileUploadComponent.prototype.onDragOverFile = function (event) {
            this.dragActive = true;
            event.stopPropagation();
            event.preventDefault();
        };
        FileUploadComponent.prototype.onDragLeave = function () {
            this.dragActive = false;
        };
        FileUploadComponent.prototype.selectFile = function (event) {
            this.uploadFile(event.target.files);
        };
        FileUploadComponent.prototype.uploadFile = function (files) {
            var _this = this;
            if (files.length === 0) {
                console.log("No file selected!");
                return;
            }
            // check if file limit is exceeded
            if (!this.field.checkFileLimit(files.length)) {
                this.resetFileUploadElement();
                return;
            }
            // check file sizes
            if (!this.field.checkFileSize(files)) {
                this.resetFileUploadElement();
                return;
            }
            // upload submitted files
            Array.from(files).forEach(function (file) {
                _this.doUpload(_this.field.getForm().getApp().getBackendUrl() + _this.field.url, file)
                    .subscribe(function (event) {
                    if (event.type === http.HttpEventType.UploadProgress) {
                        var percentDone = Math.round(100 * event.loaded / event.total);
                        var uploadFile = _this.field.findCurrentUpload(file.name);
                        if (uploadFile == null) {
                            uploadFile = _this.addNewPathFile(file);
                        }
                        uploadFile.uploadProgress = percentDone;
                    }
                    else if (event instanceof http.HttpResponse) {
                        var uploadFile = _this.field.findCurrentUpload(file.name);
                        if (uploadFile == null) {
                            uploadFile = _this.addNewPathFile(file);
                        }
                        var key = new PathFileKey(event.body["key"]["key"], event.body["key"]["name"]);
                        uploadFile.key = key;
                        uploadFile.uploadFinished = true;
                        uploadFile.uploadSuccessful = true;
                        _this.field.updateRequiredStatus();
                    }
                }, function (err) {
                    console.log("Upload Error:", err);
                    var uploadFile = _this.field.findCurrentUpload(file.name);
                    if (uploadFile) {
                        uploadFile.sizeString = "Error";
                        uploadFile.uploadFinished = true;
                    }
                    else {
                        console.log("error: file should exist (" + file.name + ")");
                    }
                    _this.resetFileUploadElement();
                }, function () {
                    _this.resetFileUploadElement();
                });
            });
        };
        FileUploadComponent.prototype.addNewPathFile = function (file) {
            var uploadFile = new PathFile();
            uploadFile.name = file.name;
            uploadFile.size = file.size;
            uploadFile.sizeString = this.field.getReadableFileSizeString(file.size);
            uploadFile.active = true;
            this.field.value.push(uploadFile);
            this.field.sortValues();
            return uploadFile;
        };
        FileUploadComponent.prototype.resetFileUploadElement = function () {
            var count = this.field.value.reduce(function (acc, cur) { return !cur.uploadFinished ? ++acc : acc; }, 0);
            if (count === 0) {
                this.fileInputReference.nativeElement.value = "";
            }
        };
        FileUploadComponent.prototype.doUpload = function (url, file) {
            var formData = new FormData();
            formData.append("upload", file);
            var params = new http.HttpParams();
            var options = {
                params: params,
                reportProgress: true,
            };
            var req = new http.HttpRequest("POST", url, formData, options);
            return this.http.request(req); // <any> fixes TS2719
        };
        FileUploadComponent.ctorParameters = function () { return [
            { type: http.HttpClient }
        ]; };
        __decorate([
            core.Input("field"),
            core.Output("field")
        ], FileUploadComponent.prototype, "field", void 0);
        __decorate([
            core.ViewChild("fileInput", { static: true })
        ], FileUploadComponent.prototype, "fileInputReference", void 0);
        FileUploadComponent = __decorate([
            core.Component({
                selector: "path-file-upload",
                template: "<path-form-field-label [label]=\"field.name\" [required]=\"field.required\"></path-form-field-label>\r\n<div [class.col-md-4]=\"field.width == 1\" [class.col-md-10]=\"field.width == 2\" [class.file-upload-drop]=\"dragActive\"\r\n     (drop)=\"onDropFile($event)\" (dragleave)=\"onDragLeave()\" (dragover)=\"onDragOverFile($event)\">\r\n    <table class=\"table\">\r\n        <thead>\r\n        <tr>\r\n            <td class=\"col-md-7\">File Name</td>\r\n            <td class=\"col-md-2\">Size</td>\r\n            <td class=\"col-md-3\"></td>\r\n        </tr>\r\n        </thead>\r\n        <tbody>\r\n        <ng-container *ngFor=\"let file of field.value; let index = index\">\r\n            <tr *ngIf=\"file.active\">\r\n                <td class=\"col-md-7\"><a href=\"#\" (click)=\"field.download(file.key)\">{{file.name}}</a></td>\r\n                <td class=\"col-md-2\">{{file.sizeString}}</td>\r\n                <td class=\"col-md-3\" align=\"right\">\r\n                    <a *ngIf=\"file.uploadFinished\" href=\"#\" (click)=\"field.remove(index, file.key)\">Remove</a>\r\n                    <div *ngIf=\"!file.uploadFinished\" class=\"progress\">\r\n                        <div class=\"progress-bar\" role=\"progressbar\" [style.width.%]=\"file.uploadProgress\"\r\n                             [attr.aria-valuenow]=\"file.uploadProgress\" aria-valuemin=\"0\" aria-valuemax=\"100\">\r\n                            <span class=\"sr-only\">{{file.uploadProgress}}% Complete</span>\r\n                        </div>\r\n                    </div>\r\n                </td>\r\n            </tr>\r\n        </ng-container>\r\n        </tbody>\r\n    </table>\r\n    <div class=\"form-group\">\r\n        <input type=\"file\" class=\"form-control-file\" (change)=\"selectFile($event)\" placeholder=\"Upload file\"\r\n               [multiple]=\"field.multiple\" accept=\"{{field.acceptedFileTypes.join(', ')}}\"\r\n               [disabled]=\"field.isReadonly()\"\r\n               [required]=\"field.fileUploadRequired\" #fileInput>\r\n    </div>\r\n</div>\r\n"
            })
        ], FileUploadComponent);
        return FileUploadComponent;
    }());
    var FileUploadField = /** @class */ (function (_super) {
        __extends(FileUploadField, _super);
        function FileUploadField(form, translationService) {
            var _this = _super.call(this, form, translationService) || this;
            _this._multiple = true;
            _this._acceptedFileTypes = [];
            _this._fileLimit = 0;
            _this._singleFileSizeLimit = 0;
            _this._allFilesSizeLimit = 0;
            _this.value = [];
            _this._acceptedFileTypes.push("*.*");
            _this.updateRequiredStatus();
            return _this;
        }
        FileUploadField.prototype.setValue = function (value) {
            var e_1, _a;
            var files = [];
            try {
                for (var value_1 = __values(value), value_1_1 = value_1.next(); !value_1_1.done; value_1_1 = value_1.next()) {
                    var item = value_1_1.value;
                    var file = Object.assign(new PathFile(), item);
                    file.key = Object.assign(new PathFileKey(null, null), item.key);
                    files.push(file);
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (value_1_1 && !value_1_1.done && (_a = value_1.return)) _a.call(value_1);
                }
                finally { if (e_1) throw e_1.error; }
            }
            this.sortValues();
            _super.prototype.setValue.call(this, files);
            this.updateRequiredStatus();
        };
        FileUploadField.prototype.sortValues = function () {
            this.value.sort(function (a, b) { return a.name.localeCompare(b.name); });
        };
        Object.defineProperty(FileUploadField.prototype, "url", {
            get: function () {
                return this._url;
            },
            set: function (value) {
                this._url = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(FileUploadField.prototype, "multiple", {
            get: function () {
                return this._multiple;
            },
            set: function (value) {
                this._multiple = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(FileUploadField.prototype, "acceptedFileTypes", {
            get: function () {
                return this._acceptedFileTypes;
            },
            set: function (value) {
                this._acceptedFileTypes = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(FileUploadField.prototype, "fileUploadRequired", {
            get: function () {
                return this._fileUploadRequired;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(FileUploadField.prototype, "fileLimit", {
            get: function () {
                return this._fileLimit;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(FileUploadField.prototype, "singleFileSizeLimit", {
            get: function () {
                return this._singleFileSizeLimit;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(FileUploadField.prototype, "allFilesSizeLimit", {
            get: function () {
                return this._allFilesSizeLimit;
            },
            enumerable: true,
            configurable: true
        });
        FileUploadField.prototype.remove = function (index, key) {
            if (key) {
                var file = this.find(key);
                if (file) {
                    file.active = false;
                }
                this.updateRequiredStatus();
            }
            else {
                this.value.splice(index, 1);
            }
        };
        FileUploadField.prototype.find = function (key) {
            var e_2, _a;
            try {
                for (var _b = __values(this.value), _c = _b.next(); !_c.done; _c = _b.next()) {
                    var file = _c.value;
                    if (file.key.equals(key)) {
                        return file;
                    }
                }
            }
            catch (e_2_1) { e_2 = { error: e_2_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                }
                finally { if (e_2) throw e_2.error; }
            }
            return null;
        };
        FileUploadField.prototype.findCurrentUpload = function (name) {
            var e_3, _a;
            try {
                for (var _b = __values(this.value), _c = _b.next(); !_c.done; _c = _b.next()) {
                    var file = _c.value;
                    if (file.name === name && !file.uploadFinished) {
                        return file;
                    }
                }
            }
            catch (e_3_1) { e_3 = { error: e_3_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                }
                finally { if (e_3) throw e_3.error; }
            }
            return null;
        };
        FileUploadField.prototype.updateRequiredStatus = function () {
            var uploadInProgressCount = 0;
            var uploadSuccessfulCount = 0;
            this.value.forEach(function (file) {
                if (file.active && !file.uploadFinished) {
                    uploadInProgressCount++;
                }
                if (file.active && file.uploadSuccessful) {
                    uploadSuccessfulCount++;
                }
            });
            var newStatus = false;
            if (uploadInProgressCount > 0) {
                // always required if upload in progress
                newStatus = true;
            }
            else if (this.required && uploadSuccessfulCount <= 0) {
                newStatus = true;
            }
            this._fileUploadRequired = newStatus;
        };
        FileUploadField.prototype.checkFileLimit = function (newFilesLength) {
            var activeFileCount = 0;
            this.value.forEach(function (file) {
                if (file.active) {
                    activeFileCount++;
                }
            });
            if (this.fileLimit > 0 && ((activeFileCount + newFilesLength) > this.fileLimit)) {
                var message = this.translationService.getText("FileLimitMessage", String(this.fileLimit));
                this.getForm().getApp().yesNo(message, function () { }, function () { });
                return false;
            }
            return true;
        };
        FileUploadField.prototype.checkFileSize = function (files) {
            var e_4, _a;
            if (this._singleFileSizeLimit || this._allFilesSizeLimit) {
                // check single file limit
                var sizeSum_1 = 0;
                var fileArray = Array.from(files);
                try {
                    for (var fileArray_1 = __values(fileArray), fileArray_1_1 = fileArray_1.next(); !fileArray_1_1.done; fileArray_1_1 = fileArray_1.next()) {
                        var file = fileArray_1_1.value;
                        sizeSum_1 += file.size;
                        if (this._singleFileSizeLimit > 0 && file.size > this._singleFileSizeLimit) {
                            var message = this.translationService.getText("FileSingleSizeMessage", this.getReadableFileSizeString(this._singleFileSizeLimit));
                            this.getForm().getApp().yesNo(message, function () { }, function () { });
                            return false;
                        }
                    }
                }
                catch (e_4_1) { e_4 = { error: e_4_1 }; }
                finally {
                    try {
                        if (fileArray_1_1 && !fileArray_1_1.done && (_a = fileArray_1.return)) _a.call(fileArray_1);
                    }
                    finally { if (e_4) throw e_4.error; }
                }
                // check sum limit
                if (this._allFilesSizeLimit > 0) {
                    this.value.forEach(function (file) {
                        if (file.active) {
                            sizeSum_1 += file.size;
                        }
                    });
                    if (this._allFilesSizeLimit > 0 && sizeSum_1 > this._allFilesSizeLimit) {
                        var message = this.translationService.getText("FileAllSizeMessage", this.getReadableFileSizeString(this._allFilesSizeLimit));
                        this.getForm().getApp().yesNo(message, function () { }, function () { });
                        return false;
                    }
                }
            }
            return true;
        };
        FileUploadField.prototype.getReadableFileSizeString = function (byteSize) {
            var i = -1;
            var byteUnits = [" kB", " MB", " GB", " TB", " PB", " EB", " ZB", " YB"];
            do {
                byteSize = byteSize / 1024;
                i++;
            } while (byteSize > 1024);
            return Math.max(byteSize, 0.1).toFixed(1) + byteUnits[i];
        };
        FileUploadField.prototype.download = function (key) {
            window.location.assign(this.getForm().getApp().getBackendUrl() + this.url + "/" + key.key);
        };
        FileUploadField.prototype.fromJson = function (modelFormField) {
            _super.prototype.fromJson.call(this, modelFormField);
            this.type = "fileUpload";
            if (modelFormField["url"]) {
                this.url = modelFormField["url"];
            }
            if (modelFormField["multiple"] != null) {
                this.multiple = modelFormField["multiple"];
            }
            if (modelFormField["acceptedFileTypes"]) {
                this.acceptedFileTypes = modelFormField["acceptedFileTypes"];
            }
            if (modelFormField["fileLimit"]) {
                this._fileLimit = modelFormField["fileLimit"];
            }
            if (modelFormField["singleFileSizeLimit"]) {
                this._singleFileSizeLimit = modelFormField["singleFileSizeLimit"];
            }
            if (modelFormField["allFilesSizeLimit"]) {
                this._allFilesSizeLimit = modelFormField["allFilesSizeLimit"];
            }
            this.updateRequiredStatus();
        };
        return FileUploadField;
    }(ValueField));
    var PathFile = /** @class */ (function () {
        function PathFile() {
            this.uploadFinished = false;
            this.uploadSuccessful = false;
            this.uploadProgress = 0;
            this.size = 0;
        }
        return PathFile;
    }());
    // TODO unify with list key
    // tslint:disable:max-classes-per-file
    var PathFileKey = /** @class */ (function () {
        function PathFileKey(key, name) {
            this.key = key;
            this.name = name;
        }
        PathFileKey.prototype.equals = function (otherKey) {
            if (otherKey != null &&
                otherKey.name &&
                otherKey.key &&
                this.name &&
                this.key &&
                otherKey.name === this.name &&
                otherKey.key === this.key) {
                return true;
            }
            return false;
        };
        return PathFileKey;
    }());

    var FieldListFieldComponent = /** @class */ (function () {
        function FieldListFieldComponent() {
        }
        __decorate([
            core.Input("field"),
            core.Output("field")
        ], FieldListFieldComponent.prototype, "field", void 0);
        FieldListFieldComponent = __decorate([
            core.Component({
                selector: "path-field-list",
                template: "<span *ngFor=\"let label of field.subfields;\">\r\n    <path-label-field [field]=\"label\"></path-label-field>\r\n</span>"
            })
        ], FieldListFieldComponent);
        return FieldListFieldComponent;
    }());
    var FieldListField = /** @class */ (function (_super) {
        __extends(FieldListField, _super);
        function FieldListField() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            _this._subfields = [];
            return _this;
        }
        Object.defineProperty(FieldListField.prototype, "subfields", {
            get: function () {
                return this._subfields;
            },
            set: function (value) {
                this._subfields = value;
            },
            enumerable: true,
            configurable: true
        });
        return FieldListField;
    }(ValueField));

    var FocusUtility = /** @class */ (function () {
        function FocusUtility() {
        }
        FocusUtility.focusFirstField = function (currentForm) {
            window.setTimeout(function () {
                var e_1, _a, e_2, _b;
                var focusDone = false;
                var forms = document.forms;
                if (currentForm != null) {
                    forms = [forms[forms.length - 1]]; // only last form on form stack
                }
                try {
                    for (var forms_1 = __values(forms), forms_1_1 = forms_1.next(); !forms_1_1.done; forms_1_1 = forms_1.next()) {
                        var form = forms_1_1.value;
                        try {
                            for (var _c = (e_2 = void 0, __values(form.elements)), _d = _c.next(); !_d.done; _d = _c.next()) {
                                var element = _d.value;
                                if (element instanceof HTMLInputElement &&
                                    element.type === "text" || element.type === "textarea") {
                                    var input = element;
                                    if (input.outerHTML.indexOf("readonly-with-required") < 0) { // no focus on readonly fields
                                        input.focus();
                                        focusDone = true;
                                    }
                                    break;
                                }
                            }
                        }
                        catch (e_2_1) { e_2 = { error: e_2_1 }; }
                        finally {
                            try {
                                if (_d && !_d.done && (_b = _c.return)) _b.call(_c);
                            }
                            finally { if (e_2) throw e_2.error; }
                        }
                        if (focusDone) {
                            break;
                        }
                    }
                }
                catch (e_1_1) { e_1 = { error: e_1_1 }; }
                finally {
                    try {
                        if (forms_1_1 && !forms_1_1.done && (_a = forms_1.return)) _a.call(forms_1);
                    }
                    finally { if (e_1) throw e_1.error; }
                }
            }, 1);
        };
        return FocusUtility;
    }());

    var FormComponent = /** @class */ (function () {
        function FormComponent() {
        }
        FormComponent.prototype.onSubmit = function () {
            this.form.close(true, false);
        };
        FormComponent.prototype.ngAfterViewInit = function () {
            FocusUtility.focusFirstField(this.form);
        };
        __decorate([
            core.Input("form"),
            core.Output("form")
        ], FormComponent.prototype, "form", void 0);
        FormComponent = __decorate([
            core.Component({
                selector: "path-form",
                template: "<div [ngClass]=\"form.borderStyle == 2 ? 'modal-content' : ''\">\r\n\t<form (ngSubmit)=\"onSubmit()\" #pathForm=\"ngForm\" autocomplete=\"off\" ngNativeValidate>\r\n\t\t<div *ngIf=\"form.headerVisible\" class=\"modal-header\">\r\n\t\t\t<button type=\"button\" class=\"close\" data-dismiss=\"modal\" (click)=\"form.close(false,false)\">&times;</button>\r\n\t\t\t<h5 class=\"modal-title\">{{form.title}}</h5>\r\n\t\t</div>\r\n\t\t<div class=\"modal-body\">\r\n\t\t\t<div *ngFor='let row of form.rows;' class=\"row\" [hidden]=\"!row.isVisible()\">\r\n\t\t\t\t<div *ngFor='let field of row.fields;' [hidden]=\"!field.visible\">\r\n\t\t\t\t\t<div *ngIf=\"field.type == 'text'\">\r\n\t\t\t\t\t\t<path-textfield [field]=\"field\"></path-textfield>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<div *ngIf=\"field.type == 'translation'\">\r\n\t\t\t\t\t\t<path-translationfield [field]=\"field\"></path-translationfield>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<div *ngIf=\"field.type == 'number'\">\r\n\t\t\t\t\t\t<path-numberfield [field]=\"field\"></path-numberfield>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<div *ngIf=\"field.type == 'label'\">\r\n\t\t\t\t\t\t<path-label-field [field]=\"field\"></path-label-field>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<div *ngIf=\"field.type == 'fieldList'\">\r\n\t\t\t\t\t\t<path-field-list [field]=\"field\"></path-field-list>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<div *ngIf=\"field.type == 'date'\">\r\n\t\t\t\t\t\t<path-datefield [field]=\"field\"></path-datefield>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<div *ngIf=\"field.type == 'autocomplete'\">\r\n\t\t\t\t\t\t<path-autocomplete [field]=\"field\"></path-autocomplete>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<div *ngIf=\"field.type == 'ProgressBarField'\">\r\n\t\t\t\t\t\t<path-progress-bar [field]=\"field\"></path-progress-bar>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<div *ngIf=\"field.type == 'RadioGroupField'\">\r\n\t\t\t\t\t\t<path-radio-group [field]=\"field\"></path-radio-group>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<div *ngIf=\"field.type == 'CheckboxGroupField'\">\r\n\t\t\t\t\t\t<path-checkbox-group [field]=\"field\"></path-checkbox-group>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<div *ngIf=\"field.type == 'fileUpload'\">\r\n\t\t\t\t\t\t<path-file-upload [field]=\"field\"></path-file-upload>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t\t<!-- show form buttons on modal-body in mobile version, otherwise they are taking up too much space when the keyboard is shown -->\r\n\t\t\t<div [hidden]=\"!form.footerVisible\" class=\"hide-on-desktop\">\r\n\t\t\t\t<div class=\"row\">\r\n                    <div class=\"col-md-12\">\r\n\t\t\t\t\t<div class=\"col-md-2 buttons-smartphone-left\">\r\n\t\t\t\t\t<span *ngFor='let field of form.fields' class=\"pull-left\" [hidden]=\"!field.visible\">\r\n\t\t\t\t\t\t<span *ngIf=\"field.type == 'deleteButton'\">\r\n\t\t\t\t\t\t\t<input [disabled]=\"field.isReadonly()\" type=\"button\" class=\"btn btn-default btn-footer\" (click)=\"field.onClick()\" value=\"{{field.name}}\"/>\r\n\t\t\t\t\t\t</span>\r\n\t\t\t\t\t\t<span *ngIf=\"field.type == 'previousButton'\">\r\n\t\t\t\t\t\t\t<input [disabled]=\"field.isReadonly()\" type=\"button\" class=\"btn btn-default btn-footer\" (click)=\"field.onClick()\" value=\"{{field.name}}\"/>\r\n\t\t\t\t\t\t</span>\r\n\t\t\t\t\t</span>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<div class=\"col-md-10 buttons-smartphone-right\">\r\n\t\t\t\t\t<span *ngFor='let field of form.fields' [hidden]=\"!field.visible\">\r\n\t\t\t\t\t\t<span *ngIf=\"field.type == 'okButton'\">\r\n\t\t\t\t\t\t\t<input [disabled]=\"field.isReadonly()\" type=\"submit\" class=\"btn btn-default btn-footer\" (click)=\"field.onClick()\" value=\"{{field.name}}\"/>\r\n\t\t\t\t\t\t</span>\r\n\t\t\t\t\t\t<span *ngIf=\"field.type == 'cancelButton'\">\r\n\t\t\t\t\t\t\t<input [disabled]=\"field.isReadonly()\" type=\"button\" class=\"btn btn-default btn-footer\" (click)=\"field.onClick()\" value=\"{{field.name}}\"/>\r\n\t\t\t\t\t\t</span>\r\n\t\t\t\t\t</span>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n                </div>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t\t<!-- default version for desktop devices -->\r\n\t\t<div class=\"hide-on-mobile\">\r\n\t\t\t<div [hidden]=\"!form.footerVisible\" class=\"modal-footer\">\r\n\t\t\t<div class=\"row\">\r\n\t\t\t\t<div class=\"col-md-2\">\r\n\t\t\t\t\t\t<span *ngFor='let field of form.fields' class=\"pull-left\" [hidden]=\"!field.visible\">\r\n\t\t\t\t\t\t\t<span *ngIf=\"field.type == 'deleteButton'\">\r\n\t\t\t\t\t\t\t\t<input [disabled]=\"field.isReadonly()\" type=\"button\" class=\"btn btn-default btn-footer\" (click)=\"field.onClick()\" value=\"{{field.name}}\"/>\r\n\t\t\t\t\t\t\t</span>\r\n\t\t\t\t\t\t\t<span *ngIf=\"field.type == 'previousButton'\">\r\n\t\t\t\t\t\t\t\t<input [disabled]=\"field.isReadonly()\" type=\"button\" class=\"btn btn-default btn-footer\" (click)=\"field.onClick()\" value=\"{{field.name}}\"/>\r\n\t\t\t\t\t\t\t</span>\r\n\t\t\t\t\t\t</span>\r\n\t\t\t\t</div>\r\n\t\t\t\t<div class=\"col-md-10\">\r\n\t\t\t\t\t\t<span *ngFor='let field of form.fields' [hidden]=\"!field.visible\">\r\n\t\t\t\t\t\t\t<span *ngIf=\"field.type == 'okButton'\">\r\n\t\t\t\t\t\t\t\t<input [disabled]=\"field.isReadonly()\" type=\"submit\" class=\"btn btn-default btn-footer\" (click)=\"field.onClick()\" value=\"{{field.name}}\"/>\r\n\t\t\t\t\t\t\t</span>\r\n\t\t\t\t\t\t\t<span *ngIf=\"field.type == 'cancelButton'\">\r\n\t\t\t\t\t\t\t\t<input [disabled]=\"field.isReadonly()\" type=\"button\" class=\"btn btn-default btn-footer\" (click)=\"field.onClick()\" value=\"{{field.name}}\"/>\r\n\t\t\t\t\t\t\t</span>\r\n\t\t\t\t\t\t</span>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t</form>\r\n</div>"
            })
        ], FormComponent);
        return FormComponent;
    }());
    var Form = /** @class */ (function () {
        function Form(pathService, app) {
            this.pathService = pathService;
            this.app = app;
            this._fields = [];
            this._rows = [];
            this._headerVisible = true;
            this._footerVisible = true;
            this._borderStyle = BorderStyle.Shadow;
        }
        Form.prototype.getApp = function () {
            return this.app;
        };
        Form.prototype.getKey = function () {
            return this.key;
        };
        Object.defineProperty(Form.prototype, "key", {
            get: function () {
                return this._key;
            },
            set: function (value) {
                this._key = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Form.prototype, "rows", {
            get: function () {
                return this._rows;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Form.prototype, "title", {
            get: function () {
                return this._title;
            },
            set: function (value) {
                this._title = value;
            },
            enumerable: true,
            configurable: true
        });
        Form.prototype.getFields = function () {
            return this.fields;
        };
        Object.defineProperty(Form.prototype, "fields", {
            get: function () {
                return this._fields;
            },
            set: function (value) {
                this._fields = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Form.prototype, "handler", {
            get: function () {
                return this._handler;
            },
            set: function (value) {
                this._handler = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Form.prototype, "url", {
            get: function () {
                return this._url;
            },
            set: function (value) {
                this._url = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Form.prototype, "bean", {
            get: function () {
                return this._bean;
            },
            set: function (value) {
                this._bean = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Form.prototype, "formFunction", {
            get: function () {
                return this._formFunction;
            },
            set: function (value) {
                this._formFunction = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Form.prototype, "headerVisible", {
            get: function () {
                return this._headerVisible;
            },
            set: function (value) {
                this._headerVisible = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Form.prototype, "footerVisible", {
            get: function () {
                return this._footerVisible;
            },
            set: function (value) {
                this._footerVisible = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Form.prototype, "borderStyle", {
            get: function () {
                return this._borderStyle;
            },
            set: function (value) {
                this._borderStyle = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Form.prototype, "urlDefaults", {
            get: function () {
                return this._urlDefaults;
            },
            enumerable: true,
            configurable: true
        });
        Form.prototype.fromJson = function (modelForm) {
            this.url = modelForm["url"];
            if (modelForm["urlDefaults"] != null) {
                this._urlDefaults = modelForm["urlDefaults"];
            }
            this.headerVisible = true;
            if (modelForm["headerVisible"] != null) {
                this.headerVisible = modelForm["headerVisible"];
            }
            this.footerVisible = true;
            if (modelForm["footerVisible"] != null) {
                this.footerVisible = modelForm["footerVisible"];
            }
            this.borderStyle = BorderStyle.Shadow;
            if (modelForm["borderStyle"] != null) {
                var borderStyleString = modelForm["borderStyle"];
                this.borderStyle = BorderStyle[borderStyleString];
            }
        };
        Form.prototype.updateRows = function () {
            var e_1, _a, e_2, _b;
            var rows = [];
            var currentFormRow;
            try {
                for (var _c = __values(this.fields), _d = _c.next(); !_d.done; _d = _c.next()) {
                    var field = _d.value;
                    if (field instanceof FieldListField) {
                        try {
                            for (var _e = (e_2 = void 0, __values(field.subfields)), _f = _e.next(); !_f.done; _f = _e.next()) {
                                var subField = _f.value;
                                currentFormRow = this.calculateFieldRow(subField, currentFormRow, rows);
                                currentFormRow.fields.push(subField);
                            }
                        }
                        catch (e_2_1) { e_2 = { error: e_2_1 }; }
                        finally {
                            try {
                                if (_f && !_f.done && (_b = _e.return)) _b.call(_e);
                            }
                            finally { if (e_2) throw e_2.error; }
                        }
                    }
                    else {
                        currentFormRow = this.calculateFieldRow(field, currentFormRow, rows);
                        currentFormRow.fields.push(field);
                    }
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_d && !_d.done && (_a = _c.return)) _a.call(_c);
                }
                finally { if (e_1) throw e_1.error; }
            }
            this._rows = rows;
        };
        Form.prototype.calculateFieldRow = function (field, currentFormRow, rows) {
            // auto-start new row with form width 2
            if (currentFormRow == null ||
                field.newRow ||
                currentFormRow.fields.length >= 2 ||
                field.width >= 2 ||
                currentFormRow.getWidth() >= 2) {
                field.newRow = true;
                currentFormRow = new FormRow();
                rows.push(currentFormRow);
            }
            return currentFormRow;
        };
        Form.prototype.close = function (save, remove) {
            var e_3, _a, e_4, _b;
            if (save || remove) {
                // call close handler
                if (this.handler != null) {
                    this.handler.doSave(this._bean);
                }
                var data = {};
                try {
                    for (var _c = __values(this._fields), _d = _c.next(); !_d.done; _d = _c.next()) {
                        var field = _d.value;
                        if (field instanceof ValueField && field.id != null) {
                            data[field.id] = field.value;
                        }
                        if (field instanceof FieldListField) {
                            try {
                                for (var _e = (e_4 = void 0, __values(field.subfields)), _f = _e.next(); !_f.done; _f = _e.next()) {
                                    var subfield = _f.value;
                                    data[subfield.id] = subfield.value;
                                }
                            }
                            catch (e_4_1) { e_4 = { error: e_4_1 }; }
                            finally {
                                try {
                                    if (_f && !_f.done && (_b = _e.return)) _b.call(_e);
                                }
                                finally { if (e_4) throw e_4.error; }
                            }
                        }
                    }
                }
                catch (e_3_1) { e_3 = { error: e_3_1 }; }
                finally {
                    try {
                        if (_d && !_d.done && (_a = _c.return)) _a.call(_c);
                    }
                    finally { if (e_3) throw e_3.error; }
                }
                if (remove) {
                    this.pathService.serverDelete(this.app.getBackendUrl(), this.url, this.formFunction.delete);
                }
                else if (this.key == null) {
                    // create
                    this.pathService.serverPost(this.app.getBackendUrl(), this.url, data, this.formFunction.save, null);
                }
                else {
                    // update (with key)
                    this.pathService.serverPut(this.app.getBackendUrl(), this.url, data, this.formFunction.save);
                }
            }
            else {
                this.formFunction.cancel();
            }
        };
        Form.prototype.onKey = function (event) {
            if (event.keyCode === 27) { // esc
                this.close(false, false);
            }
        };
        return Form;
    }());
    var FormRow = /** @class */ (function () {
        function FormRow() {
            this._fields = [];
        }
        Object.defineProperty(FormRow.prototype, "fields", {
            get: function () {
                return this._fields;
            },
            set: function (value) {
                this._fields = value;
            },
            enumerable: true,
            configurable: true
        });
        FormRow.prototype.getWidth = function () {
            var e_5, _a;
            var sum = 0;
            try {
                for (var _b = __values(this.fields), _c = _b.next(); !_c.done; _c = _b.next()) {
                    var field = _c.value;
                    sum += field.width;
                }
            }
            catch (e_5_1) { e_5 = { error: e_5_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                }
                finally { if (e_5) throw e_5.error; }
            }
            return sum;
        };
        FormRow.prototype.isVisible = function () {
            var e_6, _a;
            try {
                for (var _b = __values(this.fields), _c = _b.next(); !_c.done; _c = _b.next()) {
                    var field = _c.value;
                    if (field.visible) {
                        return true;
                    }
                }
            }
            catch (e_6_1) { e_6 = { error: e_6_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                }
                finally { if (e_6) throw e_6.error; }
            }
            return false;
        };
        return FormRow;
    }());
    var BorderStyle;
    (function (BorderStyle) {
        // TODO use string enum after TS upgrade, then use enum in template (with member)
        BorderStyle[BorderStyle["None"] = 1] = "None";
        BorderStyle[BorderStyle["Shadow"] = 2] = "Shadow";
    })(BorderStyle || (BorderStyle = {}));

    var KeyUtility = /** @class */ (function () {
        function KeyUtility() {
        }
        KeyUtility.translateUrl = function (url, formKey, crudFormUrl, parentPageElement) {
            var translatedUrl = url;
            if (translatedUrl != null) {
                if (formKey != null && !(translatedUrl.indexOf(formKey.getName()) > 0) && crudFormUrl) {
                    translatedUrl = translatedUrl + "/" + formKey.getKey();
                }
                if (formKey != null) {
                    translatedUrl = translatedUrl.replace(":" + formKey.getName(), formKey.getKey());
                }
                var pageElement = parentPageElement;
                while (pageElement != null) {
                    if (pageElement.getKey() != null) {
                        translatedUrl = translatedUrl.replace(":" + pageElement.getKey().getName(), pageElement.getKey().getKey());
                    }
                    pageElement = pageElement.getParent();
                }
            }
            return translatedUrl;
        };
        KeyUtility.findKey = function (pageElement, name) {
            var searchKeyName = name;
            if (searchKeyName) {
                searchKeyName = searchKeyName.replace(":", "");
                while (pageElement != null) {
                    if (pageElement.getKey() != null && pageElement.getKey().getName() === searchKeyName) {
                        return pageElement.getKey();
                    }
                    pageElement = pageElement.getParent();
                }
            }
            return null;
        };
        KeyUtility.replaceVariable = function (url, variable, value) {
            // replace variables at line end
            var regExp = new RegExp(":" + variable + "$", "g");
            url = url.replace(regExp, value);
            // replace variables in middle of line
            regExp = new RegExp(":" + variable + "\/", "g");
            url = url.replace(regExp, value + "/");
            return url;
        };
        KeyUtility.variableExists = function (url, variable) {
            var regExp = new RegExp(":" + variable + "$", "g");
            var regExp2 = new RegExp(":" + variable + "\/", "g");
            return url.search(regExp) !== -1 || url.search(regExp2) !== -1;
        };
        return KeyUtility;
    }());

    var PageElement = /** @class */ (function () {
        function PageElement(app) {
            this._visible = true;
            this._newRow = false;
            this._listElement = false;
            this._app = app;
        }
        PageElement.buildShortName = function (str) {
            if (str == null || str.length === 0) {
                return "";
            }
            if (str.length > 63) {
                return str.substr(0, 60) + "...";
            }
            return str;
        };
        PageElement.prototype.getShortName = function () {
            return PageElement.buildShortName(this.name);
        };
        Object.defineProperty(PageElement.prototype, "app", {
            get: function () {
                return this._app;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PageElement.prototype, "name", {
            get: function () {
                return this._name;
            },
            set: function (value) {
                this._name = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PageElement.prototype, "type", {
            get: function () {
                return this._type;
            },
            set: function (value) {
                this._type = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PageElement.prototype, "id", {
            get: function () {
                return this._id;
            },
            set: function (value) {
                this._id = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PageElement.prototype, "width", {
            get: function () {
                return this._width;
            },
            set: function (value) {
                this._width = value;
            },
            enumerable: true,
            configurable: true
        });
        PageElement.prototype.getKey = function () {
            return this._key;
        };
        Object.defineProperty(PageElement.prototype, "key", {
            get: function () {
                return this._key;
            },
            set: function (value) {
                this._key = value;
            },
            enumerable: true,
            configurable: true
        });
        PageElement.prototype.getParent = function () {
            return this.parentPageElement;
        };
        Object.defineProperty(PageElement.prototype, "visible", {
            get: function () {
                return this._visible;
            },
            set: function (value) {
                this._visible = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PageElement.prototype, "newRow", {
            get: function () {
                return this._newRow;
            },
            set: function (value) {
                this._newRow = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PageElement.prototype, "parentPageElement", {
            get: function () {
                return this._parentPageElement;
            },
            set: function (value) {
                this._parentPageElement = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PageElement.prototype, "listElement", {
            get: function () {
                return this._listElement;
            },
            set: function (value) {
                this._listElement = value;
            },
            enumerable: true,
            configurable: true
        });
        PageElement.prototype.fromJson = function (modelElement) {
            this.visible = true;
            if (modelElement["id"] != null) {
                this.id = modelElement["id"];
            }
            if (modelElement["key"] != null) {
                var name_1 = modelElement["key"]["name"];
                if (name_1 && !modelElement["key"]["key"]) {
                    this.key = KeyUtility.findKey(this.parentPageElement, name_1);
                }
                else {
                    this.key = new Key(modelElement["key"]["key"], name_1);
                }
            }
            if (modelElement["visible"] != null) {
                this.visible = modelElement["visible"];
            }
            if (modelElement["newRow"] != null) {
                this.newRow = modelElement["newRow"];
            }
            if (modelElement["width"] != null) {
                this.width = modelElement["width"];
            }
            else {
                this.width = 1;
            }
        };
        return PageElement;
    }());
    var Key = /** @class */ (function () {
        function Key(key, name) {
            this._key = key;
            this._name = name;
        }
        Key.prototype.getName = function () {
            return this._name;
        };
        Object.defineProperty(Key.prototype, "key", {
            set: function (value) {
                this._key = value;
            },
            enumerable: true,
            configurable: true
        });
        Key.prototype.getKey = function () {
            return this._key;
        };
        Object.defineProperty(Key.prototype, "name", {
            set: function (value) {
                this._name = value;
            },
            enumerable: true,
            configurable: true
        });
        Key.prototype.equals = function (otherKey) {
            if (otherKey != null &&
                otherKey.getName() &&
                otherKey.getKey() &&
                this.getName() &&
                this.getKey() &&
                otherKey.getName() === this.getName() &&
                otherKey.getKey() === this.getKey()) {
                return true;
            }
            return false;
        };
        return Key;
    }());

    var ButtonGroupComponent = /** @class */ (function () {
        function ButtonGroupComponent() {
        }
        __decorate([
            core.Input("buttonGroup"),
            core.Output("buttonGroup")
        ], ButtonGroupComponent.prototype, "buttonGroup", void 0);
        ButtonGroupComponent = __decorate([
            core.Component({
                selector: "path-button-group",
                template: "<span>\r\n    <div *ngIf='buttonGroup.mobilePageBreak' class=\"tile-group tile-group-divider tile hide-on-desktop\"></div>\r\n    <div *ngIf='buttonGroup.visible' class=\"tile-group\">\r\n            <span *ngFor='let pageElement of buttonGroup.buttons'>\r\n            <!-- Button -->\r\n            <span *ngIf='pageElement.type == \"button\" || pageElement.type == \"newButton\"'>\r\n                <path-button [button]=\"pageElement\"></path-button>\r\n            </span>\r\n            <!-- Back Button -->\r\n            <span *ngIf='pageElement.type == \"backbutton\"'>\r\n                <path-back-button [button]=\"pageElement\"></path-back-button>\r\n            </span>\r\n            <!-- Delete Button -->\r\n            <span *ngIf='pageElement.type == \"deleteButton\"'>\r\n                <path-page-delete-button [button]=\"pageElement\"></path-page-delete-button>\r\n            </span>\r\n            <!-- Link Button (deprecated: DownloadButton -->\r\n            <span *ngIf='pageElement.type == \"linkButton\" || pageElement.type == \"downloadButton\"'>\r\n                <path-link-button [button]=\"pageElement\"></path-link-button>\r\n            </span>\r\n        </span>\r\n    </div>\r\n    <div *ngIf='buttonGroup.mobilePageBreak' class=\"tile-group tile-group-divider tile hide-on-desktop\"></div>\r\n</span>"
            })
        ], ButtonGroupComponent);
        return ButtonGroupComponent;
    }());
    var ButtonGroup = /** @class */ (function (_super) {
        __extends(ButtonGroup, _super);
        function ButtonGroup(app) {
            var _this = _super.call(this, app) || this;
            _this._buttons = [];
            _this._mobilePageBreak = false;
            return _this;
        }
        Object.defineProperty(ButtonGroup.prototype, "buttons", {
            get: function () {
                return this._buttons;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ButtonGroup.prototype, "mobilePageBreak", {
            get: function () {
                return this._mobilePageBreak;
            },
            enumerable: true,
            configurable: true
        });
        ButtonGroup.prototype.addButton = function (button) {
            var e_1, _a;
            this._buttons.push(button);
            var length = 0;
            try {
                for (var _b = __values(this.buttons), _c = _b.next(); !_c.done; _c = _b.next()) {
                    var currentButton = _c.value;
                    length += (currentButton.width >= 2 ? 2 : 1);
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                }
                finally { if (e_1) throw e_1.error; }
            }
            this._mobilePageBreak = length > 1 && this.buttons.length >= 2;
        };
        ButtonGroup.prototype.updateButtonBorders = function () {
            var e_2, _a;
            if (this._buttons.length === 1) {
                // single button has no special border
                this._buttons[0].cssGroupBorder = "";
            }
            else {
                try {
                    for (var _b = __values(this._buttons), _c = _b.next(); !_c.done; _c = _b.next()) {
                        var button = _c.value;
                        button.cssGroupBorder = "tile-grouped-middle";
                    }
                }
                catch (e_2_1) { e_2 = { error: e_2_1 }; }
                finally {
                    try {
                        if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                    }
                    finally { if (e_2) throw e_2.error; }
                }
                if (this._buttons.length >= 1) {
                    // set first and last button border
                    this._buttons[0].cssGroupBorder = "tile-grouped-left";
                    this._buttons[this._buttons.length - 1].cssGroupBorder = "tile-grouped-right";
                }
            }
        };
        ButtonGroup.prototype.fromJson = function (modelElement) {
            _super.prototype.fromJson.call(this, modelElement);
            this.type = "buttonGroup";
        };
        return ButtonGroup;
    }(PageElement));

    // Note: Chart would be an example for a custom path element contributed by a path user
    var ChartComponent = /** @class */ (function () {
        function ChartComponent() {
        }
        ChartComponent.prototype.ngAfterViewInit = function () {
            var _this = this;
            this.chart.load(function (data) {
                _this.chart.data = data;
            });
        };
        __decorate([
            core.Input("chart"),
            core.Output("chart")
        ], ChartComponent.prototype, "chart", void 0);
        ChartComponent = __decorate([
            core.Component({
                selector: "path-radar-chart",
                template: "<div *ngIf=\"chart.data != null\">\r\n\t<div class=\"panel panel-default\">\r\n\t\t<div class=\"panel-heading\">\r\n\t\t\t<h3 class=\"panel-title\">{{chart.data?.name}}</h3>\r\n\t\t</div>\r\n\t\t<div class=\"panel-body\">\r\n\t\t\t<p>{{chart.data?.customer}}</p>\r\n\t\t\t<p *ngIf=\"chart.data?.referenceProjectCount >= 0\">{{chart.translationService.getText(\"ReferencedProjects\")}}: {{chart.data?.referenceProjectCount}}</p>\r\n\t\t</div>\r\n\r\n\t\t<table *ngIf=\"chart.data?.interviewees?.list.length > 0\" class=\"table\">\r\n\t\t\t<tr>\r\n\t\t\t\t<th>{{chart.translationService.getText(\"Salutation\")}}<th>\r\n\t\t\t\t<th>{{chart.translationService.getText(\"Interviewees\")}}<th>\r\n\t\t\t\t<th>{{chart.translationService.getText(\"EmploymentTitle\")}}<th>\r\n\t\t\t</tr>\r\n\t\t\t<tr *ngFor=\"let interviewee of chart.data?.interviewees?.list\">\r\n\t\t\t\t<td>{{interviewee.salutation}}<td>\r\n\t\t\t\t<td>{{interviewee.name}}<td>\r\n\t\t\t\t<td>{{interviewee.employmentTitle}}<td>\r\n\t\t\t</tr>\r\n\t\t</table>\r\n\t</div>\r\n\r\n\t<div class=\"panel panel-default\" *ngFor=\"let category of chart.data?.categoryResults?.list\" width=\"100%\">\r\n\t\t<div class=\"panel-heading\">\r\n\t\t\t<h3 class=\"panel-title\">{{category.name}}</h3>\r\n\t\t</div>\r\n\t\t<div class=\"panel-body\">\r\n\t\t\t<p align=\"center\">\r\n\t\t\t\t<img *ngIf=\"category.spider != null\" width=\"600\" src=\"data:image/png;base64,{{category.spider}}\"/>\r\n\t\t\t\t<img *ngIf=\"category.stackedBar != null\" width=\"600\" src=\"data:image/png;base64,{{category.stackedBar}}\"/>\r\n\t\t\t</p>\r\n\t\t</div>\r\n\t\t<table class=\"table\">\r\n\t\t\t<tr>\r\n\t\t\t\t<th class=\"col-md-9\">{{chart.translationService.getText(\"Question\")}}<th>\r\n\t\t\t\t<th class=\"col-md-1 text-right\">{{chart.translationService.getText(\"Actual\")}}<th>\r\n\t\t\t\t<th class=\"col-md-1 text-right\">{{chart.translationService.getText(\"Target\")}}<th>\r\n\t\t\t\t<th class=\"col-md-1 text-right\">Gap<th>\r\n\t\t\t</tr>\r\n\t\t\t<tr *ngFor=\"let question of category.questions.list\">\r\n\t\t\t\t<td>{{question.name}}<td>\r\n\t\t\t\t<td class=\"text-right\">{{question.actualValue}}<td>\r\n\t\t\t\t<td class=\"text-right\">{{question.targetValue}}<td>\r\n\t\t\t\t<td class=\"text-right\">{{question.gap}}<td>\r\n\t\t\t</tr>\r\n\t\t</table>\r\n\r\n\t</div>\r\n\r\n\t<div *ngIf=\"chart.data?.notCalculatedKPIs?.list.length > 0\" class=\"panel panel-default\" width=\"100%\">\r\n\t\t<div class=\"panel-heading\">\r\n\t\t\t<h3 class=\"panel-title\">Not calculated KPIs</h3>\r\n\t\t</div>\r\n\t\t<table class=\"table\">\r\n\t\t\t<tr *ngFor=\"let kpi of chart.data?.notCalculatedKPIs?.list\">\r\n\t\t\t\t<td>{{kpi.name}}<td>\r\n\t\t\t</tr>\r\n\t\t</table>\r\n\r\n\t</div>\r\n\r\n\t<div class=\"panel panel-default\" *ngFor=\"let kpi of chart.data?.calculatedKPIs?.list\" width=\"100%\">\r\n\t\t<div class=\"panel-heading\">\r\n\t\t\t<h3 class=\"panel-title\">{{kpi.name}}</h3>\r\n\t\t</div>\r\n\t\t<div class=\"panel-body\">\r\n\t\t\t<p align=\"center\">\r\n\t\t\t\t<img width=\"300\" src=\"data:image/png;base64,{{kpi.dial}}\"/>\r\n\t\t\t</p>\r\n\t\t</div>\r\n\t\t<table class=\"table\">\r\n\t\t\t<tr>\r\n\t\t\t\t<th class=\"col-md-8\" >KPI<th>\r\n\t\t\t\t<th class=\"col-md-1\" class=\"text-right\">\r\n\t\t\t\t\t<span *ngIf=\"kpi.optimalValue == 'Maximum'\">{{chart.translationService.getText(\"WorstValue\")}}</span>\r\n\t\t\t\t\t<span *ngIf=\"kpi.optimalValue == 'Minimum'\">{{chart.translationService.getText(\"BestValue\")}}</span>\r\n\t\t\t\t\t<span *ngIf=\"kpi.optimalValue == 'Neutral'\">Min</span>\r\n\t\t\t\t<th>\r\n\t\t\t\t<th class=\"col-md-1\" class=\"text-right\">{{chart.translationService.getText(\"OwnValue\")}}<th>\r\n\t\t\t\t<th class=\"col-md-1\" class=\"text-right\">\r\n\t\t\t\t<span *ngIf=\"kpi.optimalValue == 'Maximum'\">{{chart.translationService.getText(\"BestValue\")}}</span>\r\n\t\t\t\t<span *ngIf=\"kpi.optimalValue == 'Minimum'\">{{chart.translationService.getText(\"WorstValue\")}}</span>\r\n\t\t\t\t\t<span *ngIf=\"kpi.optimalValue == 'Neutral'\">Max</span>\r\n\t\t\t\t<th>\r\n\t\t\t\t<th class=\"col-md-1\" class=\"text-right\">Ranking<th>\r\n\t\t\t</tr>\r\n\t\t\t<tr>\r\n\t\t\t\t<td>{{kpi.name}}<td>\r\n\t\t\t\t<td class=\"text-right\">{{kpi.min}}<td>\r\n\t\t\t\t<td class=\"text-right\">{{kpi.value}}<td>\r\n\t\t\t\t<td class=\"text-right\">{{kpi.max}}<td>\r\n\t\t\t\t<td class=\"text-right\">{{kpi.ranking}}<td>\r\n\t\t\t</tr>\r\n\t\t</table>\r\n\r\n\t</div>\r\n\r\n</div>"
            })
        ], ChartComponent);
        return ChartComponent;
    }());
    var ChartElement = /** @class */ (function (_super) {
        __extends(ChartElement, _super);
        function ChartElement(app, pathService, translationService) {
            var _this = _super.call(this, app) || this;
            _this.pathService = pathService;
            _this.translationService = translationService;
            return _this;
        }
        ChartElement.prototype.load = function (loader) {
            this.pathService.serverGet(this.app.getBackendUrl(), this.url, loader, function (err) {
                console.log("error" + err);
            });
        };
        Object.defineProperty(ChartElement.prototype, "url", {
            get: function () {
                return this._url;
            },
            set: function (value) {
                this._url = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ChartElement.prototype, "data", {
            get: function () {
                return this._data;
            },
            set: function (value) {
                this._data = value;
            },
            enumerable: true,
            configurable: true
        });
        return ChartElement;
    }(PageElement));

    var AutoCompleteFieldEntry = /** @class */ (function () {
        function AutoCompleteFieldEntry() {
        }
        Object.defineProperty(AutoCompleteFieldEntry.prototype, "key", {
            get: function () {
                return this._key;
            },
            set: function (value) {
                this._key = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(AutoCompleteFieldEntry.prototype, "text", {
            get: function () {
                return this._text;
            },
            set: function (value) {
                this._text = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(AutoCompleteFieldEntry.prototype, "active", {
            get: function () {
                return this._active;
            },
            set: function (value) {
                this._active = value;
            },
            enumerable: true,
            configurable: true
        });
        return AutoCompleteFieldEntry;
    }());

    var FormFunction = /** @class */ (function () {
        function FormFunction() {
        }
        Object.defineProperty(FormFunction.prototype, "cancel", {
            get: function () {
                return this._cancel;
            },
            set: function (value) {
                this._cancel = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(FormFunction.prototype, "save", {
            get: function () {
                return this._save;
            },
            set: function (value) {
                this._save = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(FormFunction.prototype, "delete", {
            get: function () {
                return this._delete;
            },
            set: function (value) {
                this._delete = value;
            },
            enumerable: true,
            configurable: true
        });
        return FormFunction;
    }());

    var AutoCompleteComponent = /** @class */ (function () {
        function AutoCompleteComponent(myElement) {
            this._elementRef = myElement;
        }
        AutoCompleteComponent.prototype.handleClick = function (event) {
            if (this.field.isReadonly()) {
                return;
            }
            var clickedComponent = event.target;
            var inside = false;
            do {
                if (clickedComponent === this._elementRef.nativeElement) {
                    inside = true;
                }
                clickedComponent = clickedComponent.parentNode;
            } while (clickedComponent);
            if (!inside) {
                this.field.clearFilteredList();
            }
            if (!this.field.valueSet) {
                this.field.query = null;
                this.field.setValue(null);
            }
        };
        AutoCompleteComponent.ctorParameters = function () { return [
            { type: core.ElementRef }
        ]; };
        __decorate([
            core.Input("field"),
            core.Output("field")
        ], AutoCompleteComponent.prototype, "field", void 0);
        AutoCompleteComponent = __decorate([
            core.Component({
                selector: "path-autocomplete",
                // tslint:disable-next-line
                host: {
                    "(document:click)": "handleClick($event)",
                },
                template: "<path-form-field-label [label]=\"field.name\" [required]=\"field.required\"></path-form-field-label>\r\n<div [class.col-md-4]=\"field.width == 1\" [class.col-md-10]=\"field.width == 2\">\r\n    <div class=\"input-group\">\r\n        <input #model=\"ngModel\" [readonly]=\"field.isReadonly()\"\r\n               [class.required-field]=\"(!model.valid &&!model.pristine && field.required)\" [required]=\"field.required\"\r\n               #inputElement type=\"text\" [ngModel]=field.query?.text (keyup)=field.filter(inputElement.value,$event)\r\n               (blur)=\"field.focusLost()\" class=\"form-control\" placeholder=\"\">\r\n        <!-- Auto Complete -->\r\n        <div *ngIf=\"field.filteredList.length > 0 && !field.isReadonly()\">\r\n            <div class=\"path-autocomplete list-group\">\r\n                <a *ngFor=\"let item of field.filteredList\" class=\"list-group-item\" href=\"#\"\r\n                   (click)=\"field.select(item)\"><h5>{{item.text}}</h5></a>\r\n            </div>\r\n        </div>\r\n        <!-- Action -->\r\n        <span *ngIf=\"field.detailForm != null\" class=\"input-group-btn\">\r\n                <button (click)=\"field.showDetailForm()\" class=\"btn btn-default\" type=\"button\">{{field.getDetailButtonName()}}</button>\r\n            </span>\r\n    </div>\r\n</div>\r\n"
            })
        ], AutoCompleteComponent);
        return AutoCompleteComponent;
    }());
    var AutoCompleteField = /** @class */ (function (_super) {
        __extends(AutoCompleteField, _super);
        function AutoCompleteField(form, translationService, pathService) {
            var _this = _super.call(this, form, translationService) || this;
            _this.form = form;
            _this.translationService = translationService;
            _this.pathService = pathService;
            _this._filteredList = [];
            _this._data = [];
            _this._dataLoaded = false;
            _this._valueSet = false;
            return _this;
        }
        AutoCompleteField.prototype.isReadonly = function () {
            return _super.prototype.isReadonly.call(this) && this.isInitialValueSet;
        };
        AutoCompleteField.prototype.filter = function (query, event) {
            // do not filter readonly fields
            if (this.isReadonly()) {
                return;
            }
            // do not filter on simple tab focus change
            if (event.keyCode === 9) {
                return;
            }
            this._valueSet = false;
            if (query !== null && query.length > 0 && query.replace(/\s/g, "").length === 0) {
                /* space: all */
                this._filteredList = this._data.filter(function (entry) {
                    return entry.active;
                }.bind(this));
            }
            else if (query !== null && query !== "") {
                /* search term: filter */
                query = query.trim();
                this._filteredList = this._data.filter(function (entry) {
                    var e_1, _a;
                    if (!entry.active) {
                        return false;
                    }
                    var entryName = entry.text;
                    if (entryName.toLowerCase().indexOf(query.toLowerCase()) > -1) {
                        return true;
                    }
                    else if (this._wordSearchEnabled) {
                        var tokens = entryName.toLowerCase().split(" ");
                        try {
                            for (var tokens_1 = __values(tokens), tokens_1_1 = tokens_1.next(); !tokens_1_1.done; tokens_1_1 = tokens_1.next()) {
                                var token = tokens_1_1.value;
                                if (token.startsWith(query.toLowerCase())) {
                                    return true;
                                }
                            }
                        }
                        catch (e_1_1) { e_1 = { error: e_1_1 }; }
                        finally {
                            try {
                                if (tokens_1_1 && !tokens_1_1.done && (_a = tokens_1.return)) _a.call(tokens_1);
                            }
                            finally { if (e_1) throw e_1.error; }
                        }
                    }
                    return false;
                }.bind(this));
            }
            else {
                /* empty: nothing */
                this.clearFilteredList();
            }
            this._filteredList.sort();
        };
        AutoCompleteField.prototype.select = function (item) {
            this.setValue(item.key);
        };
        AutoCompleteField.prototype.focusLost = function () {
            var _this = this;
            window.setTimeout(function () {
                if (!_this.valueSet) {
                    // force angular to update query.text value
                    if (_this.value == null) {
                        _this.resetDisplay(null);
                    }
                    else {
                        _this.resetDisplay(_this.value["key"]);
                    }
                }
            }, 1);
        };
        AutoCompleteField.prototype.setValue = function (value) {
            var e_2, _a;
            var oldValue = this.value;
            // accept key values and complex objects
            if (value != null && value["key"] != null) {
                value = value["key"];
                this._keyType = value["name"];
            }
            this._valueSet = value != null;
            this.clearFilteredList();
            _super.prototype.setValue.call(this, value);
            this.query = null;
            this.resetDisplay(value);
            // reload dependent autocomplete fields
            if (oldValue !== this.value) {
                try {
                    for (var _b = __values(this.getForm().getFields()), _c = _b.next(); !_c.done; _c = _b.next()) {
                        var field = _c.value;
                        if (field instanceof AutoCompleteField) {
                            if (field.id !== this.id) {
                                var autoCompleteField = field;
                                if (KeyUtility.variableExists(autoCompleteField.url, this.id)) {
                                    autoCompleteField.load();
                                }
                            }
                        }
                    }
                }
                catch (e_2_1) { e_2 = { error: e_2_1 }; }
                finally {
                    try {
                        if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                    }
                    finally { if (e_2) throw e_2.error; }
                }
            }
        };
        AutoCompleteField.prototype.load = function () {
            var e_3, _a;
            var _this = this;
            this.dataLoaded = false;
            var url = this.url;
            try {
                for (var _b = __values(this.getForm().getFields()), _c = _b.next(); !_c.done; _c = _b.next()) {
                    var field = _c.value;
                    if (field instanceof ValueField) {
                        var valueField = field;
                        url = KeyUtility.replaceVariable(url, valueField.id, valueField.value);
                        console.log(url);
                    }
                }
            }
            catch (e_3_1) { e_3 = { error: e_3_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                }
                finally { if (e_3) throw e_3.error; }
            }
            this.pathService.serverGet(this.getForm().getApp().getBackendUrl(), url, function (data) {
                var e_4, _a;
                var dynamicData = [];
                try {
                    for (var data_1 = __values(data), data_1_1 = data_1.next(); !data_1_1.done; data_1_1 = data_1.next()) {
                        var item = data_1_1.value;
                        var entry = new AutoCompleteFieldEntry();
                        entry.key = item["key"]["key"];
                        entry.text = item["name"];
                        if (item["active"] != null) {
                            entry.active = item["active"];
                        }
                        else {
                            entry.active = true;
                        }
                        dynamicData.push(entry);
                    }
                }
                catch (e_4_1) { e_4 = { error: e_4_1 }; }
                finally {
                    try {
                        if (data_1_1 && !data_1_1.done && (_a = data_1.return)) _a.call(data_1);
                    }
                    finally { if (e_4) throw e_4.error; }
                }
                _this.data = dynamicData;
                _this.dataLoaded = true;
                _this.setValue(_this.value); // force display refresh
            }, null);
        };
        AutoCompleteField.prototype.getDetailButtonName = function () {
            if (this.value == null) {
                return this.translationService.getText("New") + "...";
            }
            else {
                return this.translationService.getText("Detail") + "...";
            }
        };
        AutoCompleteField.prototype.showDetailForm = function () {
            var _this = this;
            var form = null;
            var formFunction = new FormFunction();
            formFunction.save = function (data) {
                _this.getForm().getApp().closeCurrentForm();
                if (data["key"] != null) {
                    _this.setValue(data["key"]);
                }
                _this.load();
            };
            formFunction.cancel = function () {
                _this.getForm().getApp().closeCurrentForm();
            };
            formFunction.delete = function (data) {
                _this.getForm().getApp().closeCurrentForm();
                _this.setValue(null);
                _this.load();
            };
            if (this.value == null) {
                form = this.getForm().getApp().createForm(this.detailForm, null, null, formFunction, null);
            }
            else {
                form = this.getForm().getApp().createForm(this.detailForm, new Key(this.value, this._keyType), null, formFunction, null);
            }
            this.form.getApp()["_formStack"].push(form); // TODO
        };
        AutoCompleteField.prototype.clearFilteredList = function () {
            this._filteredList = [];
        };
        AutoCompleteField.prototype.resetDisplay = function (value) {
            var _this = this;
            // must wait with display update until data is loaded
            var displaySetter = function () {
                var e_5, _a;
                var keyValue = value;
                if (!_this.dataLoaded) {
                    console.log("waiting...");
                    window.setTimeout(function () {
                        displaySetter();
                    }, 250);
                }
                else {
                    if (keyValue == null) {
                        window.setTimeout(function () {
                            // check value again, may have changed since reset was triggered
                            if (_this.value == null) {
                                _this.query = new AutoCompleteFieldEntry();
                            }
                        }, 1);
                    }
                    else {
                        var _loop_1 = function (item) {
                            // tslint:disable:triple-equals
                            if (item.key == keyValue) {
                                window.setTimeout(function () {
                                    _this.query = item;
                                }, 1);
                                return "break";
                            }
                        };
                        try {
                            for (var _b = __values(_this._data), _c = _b.next(); !_c.done; _c = _b.next()) {
                                var item = _c.value;
                                var state_1 = _loop_1(item);
                                if (state_1 === "break")
                                    break;
                            }
                        }
                        catch (e_5_1) { e_5 = { error: e_5_1 }; }
                        finally {
                            try {
                                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                            }
                            finally { if (e_5) throw e_5.error; }
                        }
                    }
                }
            };
            displaySetter();
        };
        Object.defineProperty(AutoCompleteField.prototype, "query", {
            get: function () {
                return this._query;
            },
            set: function (value) {
                this._query = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(AutoCompleteField.prototype, "data", {
            set: function (value) {
                this._data = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(AutoCompleteField.prototype, "filteredList", {
            get: function () {
                return this._filteredList;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(AutoCompleteField.prototype, "wordSearchEnabled", {
            set: function (value) {
                this._wordSearchEnabled = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(AutoCompleteField.prototype, "valueSet", {
            get: function () {
                return this._valueSet;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(AutoCompleteField.prototype, "dataLoaded", {
            get: function () {
                return this._dataLoaded;
            },
            set: function (value) {
                this._dataLoaded = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(AutoCompleteField.prototype, "detailForm", {
            get: function () {
                return this._detailForm;
            },
            set: function (value) {
                this._detailForm = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(AutoCompleteField.prototype, "url", {
            get: function () {
                return this._url;
            },
            set: function (value) {
                this._url = value;
            },
            enumerable: true,
            configurable: true
        });
        return AutoCompleteField;
    }(ValueField));

    var TextFieldComponent = /** @class */ (function () {
        function TextFieldComponent() {
        }
        __decorate([
            core.Input("field"),
            core.Output("field")
        ], TextFieldComponent.prototype, "field", void 0);
        TextFieldComponent = __decorate([
            core.Component({
                selector: "path-textfield",
                template: "<path-form-field-label [label]=\"field.name\" [required]=\"field.required\"></path-form-field-label>\r\n<div [class.col-md-4]=\"field.width == 1\" [class.col-md-10]=\"field.width == 2\">\r\n    <div class=\"input-group\">\r\n        <input *ngIf=\"!field.isPassword && (field.height == null || field.height <= 1)\" #model=\"ngModel\" [readonly]=\"field.isReadonly()\" [class.required-field]=\"(!model.valid &&!model.pristine && field.required)\" [required]=\"field.required\" [(ngModel)]=field.value [attr.maxlength]=\"field.maxLength\" type=\"text\" class=\"form-control\" placeholder=\"\">\r\n        <textarea *ngIf=\"!field.isPassword && (field.height != null && field.height > 1)\" #model=\"ngModel\" [readonly]=\"field.isReadonly()\" [class.required-field]=\"(!model.valid &&!model.pristine && field.required)\" [required]=\"field.required\" [(ngModel)]=field.value rows=\"{{field.height}}\" [attr.maxlength]=\"field.maxLength\" type=\"text\" class=\"form-control\" placeholder=\"\"></textarea>\r\n        <input *ngIf=\"field.isPassword\" #model=\"ngModel\" [readonly]=\"field.isReadonly()\" [class.required-field]=\"(!model.valid &&!model.pristine && field.required)\" [required]=\"field.required\" [(ngModel)]=field.value [attr.maxlength]=\"field.maxLength\" type=\"password\" class=\"form-control\" placeholder=\"\">\r\n    </div>\r\n</div>\r\n"
            })
        ], TextFieldComponent);
        return TextFieldComponent;
    }());
    var TextField = /** @class */ (function (_super) {
        __extends(TextField, _super);
        function TextField() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            _this._isPassword = false;
            _this._maxLength = 250;
            return _this;
        }
        Object.defineProperty(TextField.prototype, "isPassword", {
            get: function () {
                return this._isPassword;
            },
            set: function (value) {
                this._isPassword = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TextField.prototype, "maxLength", {
            get: function () {
                return this._maxLength;
            },
            set: function (value) {
                this._maxLength = value;
            },
            enumerable: true,
            configurable: true
        });
        TextField.prototype.fromJson = function (modelFormField) {
            _super.prototype.fromJson.call(this, modelFormField);
            if (modelFormField["isPassword"] != null) {
                this.isPassword = (modelFormField["isPassword"]);
            }
            if (modelFormField["maxLength"] != null) {
                this.maxLength = (modelFormField["maxLength"]);
            }
        };
        return TextField;
    }(ValueField));

    var moment = momentImported;
    var DateFieldComponent = /** @class */ (function () {
        function DateFieldComponent() {
        }
        __decorate([
            core.Input("field"),
            core.Output("field")
        ], DateFieldComponent.prototype, "field", void 0);
        DateFieldComponent = __decorate([
            core.Component({
                selector: "path-datefield",
                template: "<path-form-field-label [label]=\"field.name\" [required]=\"field.required\"></path-form-field-label>\r\n<div [class.col-md-4]=\"field.width == 1\" [class.col-md-10]=\"field.width == 2\">\r\n    <div class=\"input-group\">\r\n\t    <span class=\"input-group-btn\">\r\n\t\t    <button (click)=\"datepicker.toggle()\" class=\"btn btn-default\" type=\"button\"><i class=\"fa fa-calendar fa-fw\"></i></button>\r\n\t    </span>\r\n\t    <input #datepicker=\"bsDatepicker\" #model=\"ngModel\" bsDatepicker [bsConfig]=\"{ dateInputFormat: field.dateInputFormat, containerClass: 'theme-default' }\" placement=\"bottom left\" [bsValue]=\"field.datePickerInitialValue\" [(ngModel)]=\"field.datePickerValue\" (bsValueChange)=\"field.updateValueFromGui($event)\" [isDisabled]=\"field.isReadonly()\" [readonly]=\"field.isReadonly()\" [class.required-field]=\"(!model.valid &&!model.pristine && field.required)\" [required]=\"field.required\" style=\"display: block; width: 100%\" type=\"text\" class=\"form-control\" placeholder=\"\">\r\n    </div>\r\n</div>\r\n"
            })
        ], DateFieldComponent);
        return DateFieldComponent;
    }());
    var DateField = /** @class */ (function (_super) {
        __extends(DateField, _super);
        function DateField(form, translationService) {
            var _this = _super.call(this, form, translationService) || this;
            _this.form = form;
            _this.translationService = translationService;
            _this._initialValueSet = false;
            _this._dateInputFormat = translationService.getUserDateFormat();
            return _this;
        }
        Object.defineProperty(DateField.prototype, "datePickerValue", {
            get: function () {
                return this._datePickerValue;
            },
            set: function (value) {
                this._datePickerValue = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DateField.prototype, "initialValueSet", {
            get: function () {
                return this._initialValueSet;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DateField.prototype, "datePickerInitialValue", {
            get: function () {
                return this._datePickerInitialValue;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DateField.prototype, "dateInputFormat", {
            get: function () {
                return this._dateInputFormat;
            },
            enumerable: true,
            configurable: true
        });
        DateField.prototype.setValue = function (value) {
            if (typeof value === "string") {
                value = moment(value).toDate();
            }
            if (value != null && Object.prototype.toString.call(value) === "[object Date]") {
                // it is a date
                if (isNaN(value.getTime())) {
                    value = null;
                }
                else {
                    // cut off local timezone
                    value = new Date(value.toDateString() + " 00:00:00 GMT");
                }
            }
            else {
                value = null;
            }
            // update ui
            this._datePickerValue = value;
            _super.prototype.setValue.call(this, value);
            if (!this._initialValueSet) {
                this._datePickerInitialValue = value;
                this._initialValueSet = true;
            }
        };
        DateField.prototype.updateValueFromGui = function (value) {
            if (value != null && isNaN(value.getDate())) {
                value = null;
            }
            if (value != null) {
                this.setValue(value);
                this._datePickerValue = this.value;
            }
        };
        return DateField;
    }(ValueField));

    var Radio = /** @class */ (function (_super) {
        __extends(Radio, _super);
        function Radio() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Object.defineProperty(Radio.prototype, "key", {
            get: function () {
                return this._key;
            },
            set: function (value) {
                this._key = value;
            },
            enumerable: true,
            configurable: true
        });
        return Radio;
    }(FormField));

    var RadioGroupComponent = /** @class */ (function () {
        function RadioGroupComponent() {
        }
        __decorate([
            core.Input("field"),
            core.Output("field")
        ], RadioGroupComponent.prototype, "field", void 0);
        RadioGroupComponent = __decorate([
            core.Component({
                selector: "path-radio-group",
                template: "<path-form-field-label [label]=\"field.name\" [required]=\"field.required\"></path-form-field-label>\r\n<div [class.col-md-4]=\"field.width == 1\" [class.col-md-10]=\"field.width == 2\">\r\n\t<div [ngClass]=\"{'radio': field.horizontal}\">\r\n        <span *ngFor='let radioElement of field.radios' [ngClass]=\"{'radio': !field.horizontal}\">\r\n            <label>\r\n                <input #radio name=\"{{field.id}}\" [(ngModel)]=\"field.value\" (click)=\"field.updateValueFromGui(radioElement.key)\" [value]=\"radioElement.key.toString()\" [disabled]=\"field.isReadonly()\" type=\"radio\">\r\n                <span> {{radioElement.name}}&nbsp;&nbsp;</span>\r\n            </label>\r\n        </span>\r\n\t</div>\r\n</div>\r\n"
            })
        ], RadioGroupComponent);
        return RadioGroupComponent;
    }());
    var RadioGroupField = /** @class */ (function (_super) {
        __extends(RadioGroupField, _super);
        function RadioGroupField() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            _this._radios = [];
            return _this;
        }
        Object.defineProperty(RadioGroupField.prototype, "radios", {
            get: function () {
                return this._radios;
            },
            set: function (value) {
                this._radios = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(RadioGroupField.prototype, "horizontal", {
            get: function () {
                return this._horizontal;
            },
            set: function (value) {
                this._horizontal = value;
            },
            enumerable: true,
            configurable: true
        });
        RadioGroupField.prototype.setValue = function (value) {
            if (value != null) {
                value = value.toString();
            }
            _super.prototype.setValue.call(this, value);
        };
        RadioGroupField.prototype.updateValueFromGui = function (value) {
            this.setValue(value.toString());
        };
        RadioGroupField.prototype.isReadonly = function () {
            return _super.prototype.isReadonly.call(this) && this.isInitialValueSet;
        };
        RadioGroupField.prototype.fromJson = function (modelFormField) {
            var e_1, _a;
            _super.prototype.fromJson.call(this, modelFormField);
            this._horizontal = true;
            if (modelFormField["alignment"] != null) {
                if (modelFormField["alignment"] === "vertical") {
                    this._horizontal = false;
                }
            }
            if (modelFormField["radios"] != null) {
                try {
                    for (var _b = __values(modelFormField["radios"]), _c = _b.next(); !_c.done; _c = _b.next()) {
                        var radioModel = _c.value;
                        var radio = new Radio(this.getForm(), this.translationService);
                        radio.name = radioModel.name;
                        radio.key = radioModel.key;
                        if (radio.key === modelFormField["defaultKey"]) {
                            this.setValue(radio.key);
                        }
                        this.radios.push(radio);
                    }
                }
                catch (e_1_1) { e_1 = { error: e_1_1 }; }
                finally {
                    try {
                        if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                    }
                    finally { if (e_1) throw e_1.error; }
                }
            }
        };
        return RadioGroupField;
    }(ValueField));

    var CheckboxGroupComponent = /** @class */ (function () {
        function CheckboxGroupComponent() {
        }
        __decorate([
            core.Input("field"),
            core.Output("field")
        ], CheckboxGroupComponent.prototype, "field", void 0);
        CheckboxGroupComponent = __decorate([
            core.Component({
                selector: "path-checkbox-group",
                template: "<path-form-field-label [label]=\"field.name\" [required]=\"field.required\"></path-form-field-label>\r\n<div class=\"checkbox\" [class.col-md-4]=\"field.width == 1\" [class.col-md-10]=\"field.width == 2\">\r\n    <span *ngFor=\"let entry of field.entries\">\r\n        <label class=\"checkbox-inline\">\r\n            <input type=\"checkbox\" [(ngModel)]=\"entry.selected\" (ngModelChange)=\"field.doClick()\">\r\n            <span class=\"checkbox-label\"> {{entry.name}}&nbsp;&nbsp;</span>\r\n        </label>\r\n    </span>\r\n</div>\r\n"
            })
        ], CheckboxGroupComponent);
        return CheckboxGroupComponent;
    }());
    var CheckboxGroupField = /** @class */ (function (_super) {
        __extends(CheckboxGroupField, _super);
        function CheckboxGroupField() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            _this._entries = [];
            return _this;
        }
        Object.defineProperty(CheckboxGroupField.prototype, "entries", {
            get: function () {
                return this._entries;
            },
            set: function (value) {
                this._entries = value;
            },
            enumerable: true,
            configurable: true
        });
        CheckboxGroupField.prototype.doClick = function () {
            var e_1, _a;
            var values = [];
            try {
                for (var _b = __values(this.entries), _c = _b.next(); !_c.done; _c = _b.next()) {
                    var entry = _c.value;
                    if (entry.selected) {
                        values.push(entry.key);
                    }
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                }
                finally { if (e_1) throw e_1.error; }
            }
            this.setValue(values);
        };
        CheckboxGroupField.prototype.setValue = function (values) {
            var e_2, _a, e_3, _b, e_4, _c;
            _super.prototype.setValue.call(this, values);
            try {
                for (var _d = __values(this.entries), _e = _d.next(); !_e.done; _e = _d.next()) {
                    var entry = _e.value;
                    entry.selected = false;
                }
            }
            catch (e_2_1) { e_2 = { error: e_2_1 }; }
            finally {
                try {
                    if (_e && !_e.done && (_a = _d.return)) _a.call(_d);
                }
                finally { if (e_2) throw e_2.error; }
            }
            try {
                for (var values_1 = __values(values), values_1_1 = values_1.next(); !values_1_1.done; values_1_1 = values_1.next()) {
                    var value = values_1_1.value;
                    try {
                        for (var _f = (e_4 = void 0, __values(this.entries)), _g = _f.next(); !_g.done; _g = _f.next()) {
                            var entry = _g.value;
                            if (entry.key === value) {
                                entry.selected = true;
                            }
                        }
                    }
                    catch (e_4_1) { e_4 = { error: e_4_1 }; }
                    finally {
                        try {
                            if (_g && !_g.done && (_c = _f.return)) _c.call(_f);
                        }
                        finally { if (e_4) throw e_4.error; }
                    }
                }
            }
            catch (e_3_1) { e_3 = { error: e_3_1 }; }
            finally {
                try {
                    if (values_1_1 && !values_1_1.done && (_b = values_1.return)) _b.call(values_1);
                }
                finally { if (e_3) throw e_3.error; }
            }
        };
        CheckboxGroupField.prototype.fromJson = function (modelFormField) {
            var e_5, _a;
            _super.prototype.fromJson.call(this, modelFormField);
            try {
                for (var _b = __values(modelFormField["data"]), _c = _b.next(); !_c.done; _c = _b.next()) {
                    var entryModel = _c.value;
                    var entry = new CheckboxGroupEntry();
                    entry.name = entryModel.name;
                    entry.key = entryModel.key;
                    entry.selected = false;
                    this.entries.push(entry);
                }
            }
            catch (e_5_1) { e_5 = { error: e_5_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                }
                finally { if (e_5) throw e_5.error; }
            }
        };
        return CheckboxGroupField;
    }(ValueField));
    var CheckboxGroupEntry = /** @class */ (function () {
        function CheckboxGroupEntry() {
        }
        Object.defineProperty(CheckboxGroupEntry.prototype, "key", {
            get: function () {
                return this._key;
            },
            set: function (value) {
                this._key = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(CheckboxGroupEntry.prototype, "name", {
            get: function () {
                return this._name;
            },
            set: function (value) {
                this._name = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(CheckboxGroupEntry.prototype, "selected", {
            get: function () {
                return this._selected;
            },
            set: function (value) {
                this._selected = value;
            },
            enumerable: true,
            configurable: true
        });
        return CheckboxGroupEntry;
    }());

    var FormFieldLabelComponent = /** @class */ (function () {
        function FormFieldLabelComponent() {
        }
        __decorate([
            core.Input("label")
        ], FormFieldLabelComponent.prototype, "label", void 0);
        __decorate([
            core.Input("required")
        ], FormFieldLabelComponent.prototype, "required", void 0);
        FormFieldLabelComponent = __decorate([
            core.Component({
                selector: "path-form-field-label",
                template: "<div class=\"col-md-2\">\r\n    <h5 class=\"modal-title\" [class.required]=\"required\">{{label}}</h5>\r\n</div>\r\n"
            })
        ], FormFieldLabelComponent);
        return FormFieldLabelComponent;
    }());

    var ProgressBarComponent = /** @class */ (function () {
        function ProgressBarComponent() {
        }
        __decorate([
            core.Input("field"),
            core.Output("field")
        ], ProgressBarComponent.prototype, "field", void 0);
        ProgressBarComponent = __decorate([
            core.Component({
                selector: "path-progress-bar",
                template: "<path-form-field-label [label]=\"field.name\" [required]=\"field.required\"></path-form-field-label>\r\n<div [class.col-md-4]=\"field.width == 1\" [class.col-md-10]=\"field.width == 2\">\r\n    <div class=\"progress progress-striped\">\r\n        <div class=\"progress-bar\" role=\"progressbar\" [style.width.%]=\"field.value\" [attr.aria-valuenow]=\"field.value\" aria-valuemin=\"0\" aria-valuemax=\"100\">\r\n            <span class=\"sr-only\">{{field.value}}% Complete</span>\r\n        </div>\r\n    </div>\r\n</div>\r\n"
            })
        ], ProgressBarComponent);
        return ProgressBarComponent;
    }());
    var ProgressBarField = /** @class */ (function (_super) {
        __extends(ProgressBarField, _super);
        function ProgressBarField() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        ProgressBarField.prototype.fromJson = function (modelFormField) {
            _super.prototype.fromJson.call(this, modelFormField);
            this.setValue(modelFormField["value"]);
        };
        return ProgressBarField;
    }(ValueField));

    var LabelFieldComponent = /** @class */ (function () {
        function LabelFieldComponent() {
        }
        __decorate([
            core.Input("field"),
            core.Output("field")
        ], LabelFieldComponent.prototype, "field", void 0);
        LabelFieldComponent = __decorate([
            core.Component({
                selector: "path-label-field",
                template: "<path-form-field-label [hidden]=\"!field.labelVisible\" [label]=\"field.name\" [required]=\"field.required\"></path-form-field-label>\r\n<div [class.col-md-4]=\"field.labelVisible\" [class.col-md-6]=\"!field.labelVisible\">\r\n    <h5 class=\"modal-title\"><div [innerHTML]=\"field.value\"></div></h5>\r\n</div>"
            })
        ], LabelFieldComponent);
        return LabelFieldComponent;
    }());
    var LabelField = /** @class */ (function (_super) {
        __extends(LabelField, _super);
        function LabelField() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        return LabelField;
    }(ValueField));

    var NumberFieldComponent = /** @class */ (function () {
        function NumberFieldComponent() {
        }
        __decorate([
            core.Input("field"),
            core.Output("field")
        ], NumberFieldComponent.prototype, "field", void 0);
        NumberFieldComponent = __decorate([
            core.Component({
                selector: "path-numberfield",
                template: "<path-form-field-label [label]=\"field.name\" [required]=\"field.required\"></path-form-field-label>\r\n<div [class.col-md-4]=\"field.width == 1\" [class.col-md-10]=\"field.width == 2\">\r\n    <div class=\"input-group\">\r\n        <input min=\"{{field.min}}\" max=\"{{field.max}}\" step=\"{{field.getStep()}}\" *ngIf=\"field.height == null || field.height <= 1\" #model=\"ngModel\" [readonly]=\"field.isReadonly()\" [class.required-field]=\"(!model.valid &&!model.pristine && field.required)\" [required]=\"field.required\" [(ngModel)]=field.value type=\"number\" class=\"form-control\" placeholder=\"\">\r\n    </div>\r\n</div>\r\n"
            })
        ], NumberFieldComponent);
        return NumberFieldComponent;
    }());
    var NumberField = /** @class */ (function (_super) {
        __extends(NumberField, _super);
        function NumberField() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Object.defineProperty(NumberField.prototype, "min", {
            get: function () {
                return this._min;
            },
            set: function (value) {
                this._min = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NumberField.prototype, "max", {
            get: function () {
                return this._max;
            },
            set: function (value) {
                this._max = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NumberField.prototype, "digits", {
            get: function () {
                return this._digits;
            },
            set: function (value) {
                this._digits = value;
            },
            enumerable: true,
            configurable: true
        });
        NumberField.prototype.getStep = function () {
            if (this._digits == null) {
                return "";
            }
            else if (this._digits === 0) {
                return "0";
            }
            // e.g. 3 => 0.001
            var step = "0.";
            for (var k = 0; k < this._digits - 1; k++) {
                step = step + "0";
            }
            return step + "1";
        };
        NumberField.prototype.fromJson = function (modelFormField) {
            _super.prototype.fromJson.call(this, modelFormField);
            if (modelFormField["min"] != null) {
                this.min = modelFormField["min"];
            }
            if (modelFormField["max"] != null) {
                this.max = modelFormField["max"];
            }
            if (modelFormField["digits"] != null) {
                this.digits = modelFormField["digits"];
            }
        };
        return NumberField;
    }(ValueField));

    var OkButton = /** @class */ (function (_super) {
        __extends(OkButton, _super);
        function OkButton() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Object.defineProperty(OkButton.prototype, "handler", {
            get: function () {
                return this._handler;
            },
            set: function (value) {
                this._handler = value;
            },
            enumerable: true,
            configurable: true
        });
        OkButton.prototype.onClick = function () {
            if (this._handler != null) {
                this._handler.doClick(null); // TODO
            }
            // closing/saving is done in submit function on form component
        };
        return OkButton;
    }(FormField));

    var CancelButton = /** @class */ (function (_super) {
        __extends(CancelButton, _super);
        function CancelButton() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Object.defineProperty(CancelButton.prototype, "handler", {
            get: function () {
                return this._handler;
            },
            set: function (value) {
                this._handler = value;
            },
            enumerable: true,
            configurable: true
        });
        CancelButton.prototype.onClick = function () {
            if (this._handler != null) {
                this._handler.doClick(null); // TODO
            }
            this.form.close(false, false);
        };
        return CancelButton;
    }(FormField));

    var TranslationFieldComponent = /** @class */ (function () {
        function TranslationFieldComponent() {
        }
        __decorate([
            core.Input("field"),
            core.Output("field")
        ], TranslationFieldComponent.prototype, "field", void 0);
        TranslationFieldComponent = __decorate([
            core.Component({
                selector: "path-translationfield",
                template: "<path-form-field-label [label]=\"field.name\" [required]=\"field.required\"></path-form-field-label>\r\n<div [class.col-md-4]=\"field.width == 1\" [class.col-md-10]=\"field.width == 2\">\r\n    <div class=\"input-group\">\r\n        <input *ngIf=\"field.height == null || field.height <= 1\" #model=\"ngModel\" readonly-with-required (keydown)=\"field.editTranslations()\" (click)=\"field.editTranslations()\" [class.required-field]=\"!model.valid && !model.pristine && field.required\" [required]=\"field.required\" [(ngModel)]=\"field.defaultTranslation\" type=\"text\" class=\"form-control\" placeholder=\"\">\r\n        <textarea *ngIf=\"field.height != null && field.height > 1\" #model=\"ngModel\" readonly-with-required (keydown)=\"field.editTranslations()\" (click)=\"field.editTranslations()\" [class.required-field]=\"(!model.valid &&!model.pristine && field.required)\" [required]=\"field.required\" [(ngModel)]=field.defaultTranslation rows=\"{{field.height}}\" type=\"text\" class=\"form-control\" placeholder=\"\"></textarea>\r\n        <span class=\"input-group-btn\">\r\n                <button [disabled]=\"field.isReadonly()\" (click)=\"field.editTranslations()\" class=\"btn btn-default\" type=\"button\">{{field.translationLabel}}...</button>\r\n        </span>\r\n    </div>\r\n</div>\r\n"
            })
        ], TranslationFieldComponent);
        return TranslationFieldComponent;
    }());
    var TranslationField = /** @class */ (function (_super) {
        __extends(TranslationField, _super);
        function TranslationField(form, pathService, translationService) {
            var e_1, _a;
            var _this = _super.call(this, form, translationService) || this;
            _this.pathService = pathService;
            _this.translationService = translationService;
            _this._defaultTranslation = null;
            _this.userLanguage = translationService.getUserLanguage();
            _this.languages = translationService.getSupportedLanguageCodes();
            var initialList = [];
            try {
                for (var _b = __values(_this.languages), _c = _b.next(); !_c.done; _c = _b.next()) {
                    var language = _c.value;
                    initialList.push([{ "key": language }, ""]);
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                }
                finally { if (e_1) throw e_1.error; }
            }
            _this.setValue(initialList);
            _this._translationLabel = translationService.getText("Translation");
            return _this;
        }
        Object.defineProperty(TranslationField.prototype, "defaultTranslation", {
            get: function () {
                return this._defaultTranslation;
            },
            set: function (value) {
                this._defaultTranslation = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TranslationField.prototype, "translationLabel", {
            get: function () {
                return this._translationLabel;
            },
            enumerable: true,
            configurable: true
        });
        TranslationField.prototype.setValue = function (value) {
            _super.prototype.setValue.call(this, value);
            this._defaultTranslation = this.getDefaultTranslation();
        };
        TranslationField.prototype.getDefaultTranslation = function () {
            var e_2, _a;
            if (this.value != null) {
                try {
                    for (var _b = __values(this.value), _c = _b.next(); !_c.done; _c = _b.next()) {
                        var item = _c.value;
                        if (item[0] != null && item[0]["key"] === this.userLanguage) {
                            return item[1];
                        }
                    }
                }
                catch (e_2_1) { e_2 = { error: e_2_1 }; }
                finally {
                    try {
                        if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                    }
                    finally { if (e_2) throw e_2.error; }
                }
            }
            return null;
        };
        TranslationField.prototype.editTranslations = function () {
            var e_3, _a;
            var _this = this;
            var form = new Form(this.pathService, this.form.getApp());
            var translationFields = [];
            form.title = this.name + " " + this.translationService.getText("Translations");
            form.formFunction = new FormFunction();
            form.formFunction.save = function (data) {
                var e_4, _a;
                var resultList = [];
                try {
                    for (var translationFields_1 = __values(translationFields), translationFields_1_1 = translationFields_1.next(); !translationFields_1_1.done; translationFields_1_1 = translationFields_1.next()) {
                        var field = translationFields_1_1.value;
                        resultList.push([{ "key": field.id }, field.value]);
                    }
                }
                catch (e_4_1) { e_4 = { error: e_4_1 }; }
                finally {
                    try {
                        if (translationFields_1_1 && !translationFields_1_1.done && (_a = translationFields_1.return)) _a.call(translationFields_1);
                    }
                    finally { if (e_4) throw e_4.error; }
                }
                _this.setValue(resultList);
                _this.getForm().getApp().closeCurrentForm();
            };
            form.formFunction.cancel = function () {
                _this.getForm().getApp().closeCurrentForm();
            };
            var translations = this.value;
            try {
                for (var translations_1 = __values(translations), translations_1_1 = translations_1.next(); !translations_1_1.done; translations_1_1 = translations_1.next()) {
                    var key = translations_1_1.value;
                    var textField = new TextField(form, this.translationService);
                    textField.type = "text";
                    textField.id = key[0]["key"];
                    textField.name = this.translationService.getText(key[0]["key"]);
                    textField.visible = true;
                    textField.newRow = true;
                    textField.width = 2;
                    textField.height = this.height;
                    textField.labelVisible = true;
                    textField.required = true;
                    textField.setValue(key[1]);
                    form.fields.push(textField);
                    translationFields.push(textField);
                }
            }
            catch (e_3_1) { e_3 = { error: e_3_1 }; }
            finally {
                try {
                    if (translations_1_1 && !translations_1_1.done && (_a = translations_1.return)) _a.call(translations_1);
                }
                finally { if (e_3) throw e_3.error; }
            }
            var cancelButton = new CancelButton(form, this.translationService);
            cancelButton.type = "cancelButton";
            cancelButton.name = this.translationService.getText("Cancel");
            cancelButton.visible = true;
            form.fields.push(cancelButton);
            var okButton = new OkButton(form, this.translationService);
            okButton.type = "okButton";
            okButton.name = this.translationService.getText("Ok");
            okButton.visible = true;
            form.fields.push(okButton);
            form.updateRows();
            this.form.getApp()["_formStack"].push(form); // TODO
            FocusUtility.focusFirstField(form);
        };
        return TranslationField;
    }(ValueField));
    var TranslationEntry = /** @class */ (function () {
        function TranslationEntry() {
        }
        Object.defineProperty(TranslationEntry.prototype, "text", {
            get: function () {
                return this._text;
            },
            set: function (value) {
                this._text = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TranslationEntry.prototype, "code", {
            get: function () {
                return this._code;
            },
            set: function (value) {
                this._code = value;
            },
            enumerable: true,
            configurable: true
        });
        return TranslationEntry;
    }());

    // Initially by https://github.com/cedvdb/ng2draggable
    // MIT License: https://github.com/cedvdb/ng2draggable/blob/master/LICENSE
    var DraggableDirective = /** @class */ (function () {
        function DraggableDirective(element) {
            this.element = element;
            this.topStart = 0;
            this.leftStart = 0;
            this._allowDrag = true;
        }
        DraggableDirective.prototype.ngOnInit = function () {
            // draggable only for desktop version (styles for desktop are added when innerWidth>1100)
            if (window.innerWidth < 768) {
                this._allowDrag = false;
            }
            // css changes
            if (this._allowDrag) {
                this.element.nativeElement.style.position = "relative";
                this.element.nativeElement.className += " cursor-draggable";
            }
        };
        Object.defineProperty(DraggableDirective.prototype, "allowDrag", {
            set: function (value) {
                this._allowDrag = value;
                if (this._allowDrag) {
                    this.element.nativeElement.className += " cursor-draggable";
                }
                else {
                    this.element.nativeElement.className = this.element.nativeElement.className.replace(" cursor-draggable", "");
                }
            },
            enumerable: true,
            configurable: true
        });
        DraggableDirective.prototype.onMouseDown = function (event) {
            var eventTargetTag = event.target["tagName"].toLowerCase();
            if (eventTargetTag === "input" || eventTargetTag === "button" || eventTargetTag === "textarea") {
                return;
            }
            if (event.button === 2) {
                return; // prevents right click drag, remove his if you don't want it
            }
            this.md = true;
            this.topStart = event.clientY - this.element.nativeElement.style.top.replace("px", "");
            this.leftStart = event.clientX - this.element.nativeElement.style.left.replace("px", "");
        };
        DraggableDirective.prototype.onMouseUp = function (event) {
            this.md = false;
        };
        DraggableDirective.prototype.onMouseMove = function (event) {
            if (this.md && this._allowDrag) {
                this.element.nativeElement.style.top = (event.clientY - this.topStart) + "px";
                this.element.nativeElement.style.left = (event.clientX - this.leftStart) + "px";
            }
        };
        DraggableDirective.prototype.onTouchStart = function (event) {
            this.md = true;
            this.topStart = event.changedTouches[0].clientY - this.element.nativeElement.style.top.replace("px", "");
            this.leftStart = event.changedTouches[0].clientX - this.element.nativeElement.style.left.replace("px", "");
            event.stopPropagation();
        };
        DraggableDirective.prototype.onTouchEnd = function () {
            this.md = false;
        };
        DraggableDirective.prototype.onTouchMove = function (event) {
            if (this.md && this._allowDrag) {
                this.element.nativeElement.style.top = (event.changedTouches[0].clientY - this.topStart) + "px";
                this.element.nativeElement.style.left = (event.changedTouches[0].clientX - this.leftStart) + "px";
            }
            event.stopPropagation();
        };
        DraggableDirective.ctorParameters = function () { return [
            { type: core.ElementRef }
        ]; };
        __decorate([
            core.Input("path-draggable")
        ], DraggableDirective.prototype, "allowDrag", null);
        __decorate([
            core.HostListener("mousedown", ["$event"])
        ], DraggableDirective.prototype, "onMouseDown", null);
        __decorate([
            core.HostListener("document:mouseup")
        ], DraggableDirective.prototype, "onMouseUp", null);
        __decorate([
            core.HostListener("document:mousemove", ["$event"])
        ], DraggableDirective.prototype, "onMouseMove", null);
        __decorate([
            core.HostListener("touchstart", ["$event"])
        ], DraggableDirective.prototype, "onTouchStart", null);
        __decorate([
            core.HostListener("document:touchend")
        ], DraggableDirective.prototype, "onTouchEnd", null);
        __decorate([
            core.HostListener("document:touchmove", ["$event"])
        ], DraggableDirective.prototype, "onTouchMove", null);
        DraggableDirective = __decorate([
            core.Directive({
                selector: "[path-draggable]"
            })
        ], DraggableDirective);
        return DraggableDirective;
    }());

    var StringUtility = /** @class */ (function () {
        function StringUtility() {
        }
        StringUtility.isEmpty = function (str) {
            return (!str || 0 === str.length);
        };
        return StringUtility;
    }());

    var ButtonDetail = /** @class */ (function () {
        function ButtonDetail() {
        }
        Object.defineProperty(ButtonDetail.prototype, "text", {
            get: function () {
                return this._text;
            },
            set: function (value) {
                this._text = value;
            },
            enumerable: true,
            configurable: true
        });
        return ButtonDetail;
    }());

    var ColorUtility = /** @class */ (function () {
        function ColorUtility() {
        }
        ColorUtility.isPathDefaultColor = function (color) {
            return this.colors.indexOf(color) > 0;
        };
        ColorUtility.colors = [
            "blue",
            "green",
            "search",
            "red",
            "yellow",
            "orange",
            "pink",
            "purple",
            "lime",
            "magenta",
            "teal",
            "turquoise",
            "green-sea",
            "emerald",
            "nephritis",
            "peter-river",
            "belize-hole",
            "amethyst",
            "wisteria",
            "wet-asphalt",
            "midnight-blue",
            "sun-flower",
            "carrot",
            "pumpkin",
            "alizarin",
            "pomegranate",
            "clouds",
            "silver",
            "concrete",
            "asbestos",
            "info",
            "danger",
            "warning",
            "success"
        ];
        return ColorUtility;
    }());

    var ButtonComponent = /** @class */ (function () {
        function ButtonComponent() {
        }
        __decorate([
            core.Input("button"),
            core.Output("button")
        ], ButtonComponent.prototype, "button", void 0);
        ButtonComponent = __decorate([
            core.Component({
                selector: "path-button",
                template: "<a (click)=\"button.onClick()\" class=\"fa-links\">\r\n\t<div tooltip=\"{{button.tooltip}}\" *ngIf=\"button.visible\" class=\"thumbnail tile {{button.cssButtonTarget ? 'tile-button' : ''}} {{(button.width <= 1 ? 'tile-medium' : (button.width == 2 ? 'tile-wide' : (button.width == 3 ? 'tile-wide-3' : (button.width >= 4 ? 'tile-wide-4' : ''))))}} {{button.cssGroupBorder}} {{button.cssClass}}\" [ngStyle]=\"button.cssStyle\">\r\n\t\t<div class=\"h3 truncate\">{{button.name}}</div>\r\n\t\t<span class=\"truncate\" *ngFor='let detail of button.details; let last = last;'>\r\n                    <span class=\"h4 m-t-5\" [innerHTML]=\"detail.text\"></span><small [hidden]=\"last\">&nbsp;&bull;&nbsp;</small></span>\r\n\t\t<div class=\"h4 m-t-5\"></div>\r\n\t\t<i class=\"fa fa-2x {{button.icon}}\"></i>\r\n\t</div>\r\n</a>\r\n"
            })
        ], ButtonComponent);
        return ButtonComponent;
    }());
    var Button = /** @class */ (function (_super) {
        __extends(Button, _super);
        function Button(app, pathService, translationService) {
            var _this = _super.call(this, app) || this;
            _this.pathService = pathService;
            _this.translationService = translationService;
            _this._details = [];
            return _this;
        }
        Button.prototype.onClick = function () {
            var _this = this;
            if (this._handler != null) {
                this._handler.doClick(this);
                return;
            }
            if (!StringUtility.isEmpty(this._url)) {
                this.pathService.serverGet(this.app.getBackendUrl(), this._url, function () {
                    _this.app.refreshCurrentPage();
                }, null);
            }
            if (!StringUtility.isEmpty(this._page)) {
                this.app.setCurrentPage(this._page, this);
                return;
            }
            if (!StringUtility.isEmpty(this._form)) {
                this.app.setCurrentForm(this._form, this.key, this._formHandler, this);
                return;
            }
        };
        Button.prototype.setIcon = function (icon) {
            this.icon = icon;
        };
        Button.prototype.setForm = function (form) {
            this.form = form;
        };
        Button.prototype.setFormHandler = function (formHandler) {
            this.formHandler = formHandler;
        };
        Button.prototype.setPage = function (page) {
            this.page = page;
        };
        Button.prototype.setKey = function (key) {
            this.key = key;
        };
        Button.prototype.getApp = function () {
            return this.app;
        };
        Button.prototype.getName = function () {
            return this.name;
        };
        Object.defineProperty(Button.prototype, "icon", {
            get: function () {
                return this._icon;
            },
            set: function (value) {
                this._icon = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Button.prototype, "cssStyle", {
            get: function () {
                return this._cssStyle;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Button.prototype, "cssClass", {
            get: function () {
                return this._cssClass;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Button.prototype, "cssButtonTarget", {
            get: function () {
                return this._cssButtonTarget;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Button.prototype, "cssGroupBorder", {
            get: function () {
                return this._cssGroupBorder;
            },
            set: function (value) {
                this._cssGroupBorder = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Button.prototype, "handler", {
            get: function () {
                return this._handler;
            },
            set: function (value) {
                this._handler = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Button.prototype, "details", {
            get: function () {
                return this._details;
            },
            set: function (value) {
                this._details = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Button.prototype, "page", {
            get: function () {
                return this._page;
            },
            set: function (value) {
                this._page = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Button.prototype, "form", {
            get: function () {
                return this._form;
            },
            set: function (value) {
                this._form = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Button.prototype, "formHandler", {
            get: function () {
                return this._formHandler;
            },
            set: function (value) {
                this._formHandler = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Button.prototype, "url", {
            get: function () {
                return this._url;
            },
            set: function (value) {
                this._url = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Button.prototype, "tooltip", {
            get: function () {
                return this._tooltip;
            },
            set: function (value) {
                this._tooltip = value;
            },
            enumerable: true,
            configurable: true
        });
        Button.prototype.fromJson = function (modelElement) {
            var e_1, _a;
            _super.prototype.fromJson.call(this, modelElement);
            // general attributes
            this.type = "button";
            this.setIcon(modelElement["icon"]);
            if (modelElement["color"] != null) {
                var color = modelElement["color"];
                if (typeof color === "object") {
                    this._cssStyle = color;
                }
                else if (typeof color === "string") {
                    if (ColorUtility.isPathDefaultColor(color)) {
                        this._cssClass = "tile-" + color;
                    }
                    else {
                        this._cssClass = color;
                    }
                }
            }
            if (modelElement["form"] != null) {
                this.setForm(modelElement["form"]["form"]);
                this.setFormHandler(modelElement["form"]["handler"]);
            }
            this.setPage(modelElement["page"]);
            if (this.key == null && this.parentPageElement != null && modelElement.type === "button") {
                this.key = this.parentPageElement.key;
            }
            this.name = this.translationService.getText(modelElement["name"]);
            this.url = KeyUtility.translateUrl(modelElement["url"], null, false, this);
            if (modelElement["tooltip"] != null) {
                this.tooltip = this.translationService.getText(modelElement["tooltip"]);
            }
            // button details
            if (modelElement["details"] != null) {
                this.details = [];
                try {
                    for (var _b = __values(modelElement["details"]), _c = _b.next(); !_c.done; _c = _b.next()) {
                        var detail = _c.value;
                        var bd = new ButtonDetail();
                        bd.text = detail;
                        this.details.push(bd);
                    }
                }
                catch (e_1_1) { e_1 = { error: e_1_1 }; }
                finally {
                    try {
                        if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                    }
                    finally { if (e_1) throw e_1.error; }
                }
            }
            // button target
            this._cssButtonTarget = true;
            if (this.type === "button") {
                if (StringUtility.isEmpty(this.form) && StringUtility.isEmpty(this.page) && StringUtility.isEmpty(this.url)) {
                    this._cssButtonTarget = false;
                }
            }
        };
        return Button;
    }(PageElement));

    var BackButtonComponent = /** @class */ (function () {
        function BackButtonComponent() {
        }
        __decorate([
            core.Input("button"),
            core.Output("button")
        ], BackButtonComponent.prototype, "button", void 0);
        BackButtonComponent = __decorate([
            core.Component({
                selector: "path-back-button",
                template: "<a (click)=\"button.onClick()\" class=\"fa-links\">\r\n\t<div class=\"thumbnail tile tile-button {{(button.width <= 1 ? 'tile-medium' : (button.width == 2 ? 'tile-wide' : (button.width == 3 ? 'tile-wide-3' : (button.width >= 4 ? 'tile-wide-4' : ''))))}} backbutton {{button.cssGroupBorder}} {{button.cssClass}}\" [ngStyle]=\"button.cssStyle\">\r\n\t\t<div class=\"h3\">{{button.name}}</div>\r\n\t\t<i class=\"fa fa-2x fa-backward\"></i>\r\n\t</div>\r\n</a>"
            })
        ], BackButtonComponent);
        return BackButtonComponent;
    }());
    var BackButton = /** @class */ (function (_super) {
        __extends(BackButton, _super);
        function BackButton(app, pathService, translationService) {
            return _super.call(this, app, pathService, translationService) || this;
        }
        BackButton.prototype.onClick = function () {
            this.app.navigateBack();
        };
        BackButton.prototype.fromJson = function (modelElement) {
            if (StringUtility.isEmpty(modelElement["color"])) {
                modelElement["color"] = "silver";
            }
            _super.prototype.fromJson.call(this, modelElement);
            this.type = "backbutton";
            this.name = this.translationService.getText("Back");
        };
        return BackButton;
    }(Button));

    var LinkButtonComponent = /** @class */ (function () {
        function LinkButtonComponent() {
        }
        __decorate([
            core.Input("button"),
            core.Output("button")
        ], LinkButtonComponent.prototype, "button", void 0);
        LinkButtonComponent = __decorate([
            core.Component({
                selector: "path-link-button",
                template: "<a (click)=\"button.onClick()\" class=\"fa-links\">\r\n\t<div class=\"thumbnail tile tile-button {{(button.width <= 1 ? 'tile-medium' : (button.width == 2 ? 'tile-wide' : (button.width == 3 ? 'tile-wide-3' : (button.width >= 4 ? 'tile-wide-4' : ''))))}} col-md-3 {{button.cssGroupBorder}} {{button.cssClass}}\" [ngStyle]=\"button.cssStyle\">\r\n\t\t<div class=\"h3\">{{button.name}}</div>\r\n\t\t<i class=\"fa fa-2x {{button.icon}}\"></i>\r\n\t</div>\r\n</a>\r\n\r\n\r\n"
            })
        ], LinkButtonComponent);
        return LinkButtonComponent;
    }());
    var LinkButton = /** @class */ (function (_super) {
        __extends(LinkButton, _super);
        function LinkButton(app, pathService, translationService) {
            return _super.call(this, app, pathService, translationService) || this;
        }
        LinkButton.prototype.onClick = function () {
            var url = null;
            if (this.url.startsWith("/")) {
                // local relative url
                url = this.getApp().getBackendUrl() + this.url + "?token=" + sessionStorage.getItem("pathAppId");
            }
            else {
                // remote absolute url
                url = this.url;
            }
            window.location.assign(url);
        };
        LinkButton.prototype.fromJson = function (modelElement) {
            _super.prototype.fromJson.call(this, modelElement);
            this.type = "linkButton";
            this.url = KeyUtility.translateUrl(modelElement["url"], null, false, this.parentPageElement);
        };
        return LinkButton;
    }(Button));

    var PageDeleteButtonComponent = /** @class */ (function () {
        function PageDeleteButtonComponent() {
        }
        __decorate([
            core.Input("button"),
            core.Output("button")
        ], PageDeleteButtonComponent.prototype, "button", void 0);
        PageDeleteButtonComponent = __decorate([
            core.Component({
                selector: "path-page-delete-button",
                template: "<a (click)=\"button.onClick()\" class=\"fa-links\">\r\n\t<div class=\"thumbnail tile tile-button {{(button.width <= 1 ? 'tile-medium' : (button.width == 2 ? 'tile-wide' : (button.width == 3 ? 'tile-wide-3' : (button.width >= 4 ? 'tile-wide-4' : ''))))}} tile-red col-md-3 {{button.cssGroupBorder}} {{button.cssClass}}\" [ngStyle]=\"button.cssStyle\">\r\n\t\t<div class=\"h3\">{{button.name}}</div>\r\n\t\t<i class=\"fa fa-2x fa-remove\"></i>\r\n\t</div>\r\n</a>\r\n"
            })
        ], PageDeleteButtonComponent);
        return PageDeleteButtonComponent;
    }());
    var PageDeleteButton = /** @class */ (function (_super) {
        __extends(PageDeleteButton, _super);
        function PageDeleteButton(app, pathService, translationService) {
            var _this = _super.call(this, app, pathService, translationService) || this;
            _this.name = translationService.getText("Delete");
            return _this;
        }
        PageDeleteButton.prototype.onClick = function () {
            var _this = this;
            this.getApp().yesNo(this.translationService.getText("DeleteWarningQuestion"), function () {
                _this.pathService.serverDelete(_this.getApp().getBackendUrl(), _this.url, function () {
                    _this.getApp().navigateBack();
                    _this.getApp().refreshCurrentPage();
                });
            }, function () {
            });
        };
        PageDeleteButton.prototype.fromJson = function (modelElement) {
            _super.prototype.fromJson.call(this, modelElement);
            this.type = "deleteButton";
            this.url = KeyUtility.translateUrl(modelElement["url"], null, false, this.parentPageElement);
        };
        return PageDeleteButton;
    }(Button));

    var PageLabelComponent = /** @class */ (function () {
        function PageLabelComponent() {
        }
        __decorate([
            core.Input("pageLabel"),
            core.Output("pageLabel")
        ], PageLabelComponent.prototype, "pageLabel", void 0);
        PageLabelComponent = __decorate([
            core.Component({
                selector: "path-page-label",
                template: "<div class=\"col-md-12\" [innerHTML]=\"pageLabel.value\"></div>"
            })
        ], PageLabelComponent);
        return PageLabelComponent;
    }());
    var PageLabel = /** @class */ (function (_super) {
        __extends(PageLabel, _super);
        function PageLabel(app, pathService, translationService) {
            return _super.call(this, app) || this;
        }
        Object.defineProperty(PageLabel.prototype, "value", {
            get: function () {
                return this._value;
            },
            enumerable: true,
            configurable: true
        });
        PageLabel.prototype.onClick = function () {
            this.app.navigateBack();
        };
        PageLabel.prototype.fromJson = function (modelElement) {
            _super.prototype.fromJson.call(this, modelElement);
            this.type = "pageLabel";
            if (modelElement["value"] != null) {
                this._value = modelElement["value"];
            }
        };
        return PageLabel;
    }(PageElement));

    var ListComponent = /** @class */ (function () {
        function ListComponent() {
        }
        ListComponent.prototype.ngAfterViewInit = function () {
            FocusUtility.focusFirstField(null);
        };
        __decorate([
            core.Input("list"),
            core.Output("list")
        ], ListComponent.prototype, "list", void 0);
        ListComponent = __decorate([
            core.Component({
                selector: "path-list",
                template: "<!-- search on mobile devices -->\r\n<div *ngIf='list.search' class=\"search-mobile hide-on-desktop\">\r\n    <div class=\"row\">\r\n        <label for=\"search-mobile\">Search</label>\r\n        <input id=\"search-mobile\" name=\"search\" [(ngModel)]=\"list.searchText\" placeholder=\"{{list.searchInputLabel}}\" (ngModelChange)='list.filterChanged($event)' class=\"form-control\" type=\"text\">\r\n    </div>\r\n</div>\r\n<span>\r\n    <span>\r\n        <div class=\"tile-group\">\r\n            <!-- default search (tablet, desktop) -->\r\n            <div *ngIf='list.search' class=\"thumbnail {{(list.searchButton.width <= 1 ? 'tile-medium' : (list.searchButton.width == 2 ? 'tile-wide' : (list.searchButton.width == 3 ? 'tile-wide-3' : (list.searchButton.width >= 4 ? 'tile-wide-4' : ''))))}} tile tile-button hide-on-mobile {{list.searchButton.cssClass}}\" [ngStyle]=\"list.searchButton.cssStyle\">\r\n                <div class=\"input-group input-group-sm\">\r\n                    <div class=\"h3\">{{list.searchLabel}}</div>\r\n                    <i class=\"fa fa-2x fa-search\"></i>\r\n                    <div class=\"h5\"></div>\r\n                    <form>\r\n                        <input name=\"search\" [(ngModel)]=\"list.searchText\" placeholder=\"{{list.searchInputLabel}}\" (ngModelChange)='list.filterChanged($event)' class=\"form-control\" type=\"text\">\r\n                    </form>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </span>\r\n    <!-- list -->\r\n    <span *ngFor='let buttonGroup of list.buttonGroups; let i = index'>\r\n        <path-button-group [buttonGroup]=\"buttonGroup\"></path-button-group>\r\n    </span>\r\n</span>"
            })
        ], ListComponent);
        return ListComponent;
    }());
    var List = /** @class */ (function (_super) {
        __extends(List, _super);
        function List(app, pathService, translationService) {
            var _this = _super.call(this, app) || this;
            _this.pathService = pathService;
            _this.translationService = translationService;
            _this._buttonGroups = [];
            _this._searchTextChanged = new rxjs.Subject();
            _this._searchLabel = translationService.getText("Search");
            _this._searchInputLabel = translationService.getText("SearchInputLabel");
            _this._searchButton = new Button(app, pathService, translationService);
            return _this;
        }
        List.prototype.getContent = function () {
            var e_1, _a;
            var buttons = [];
            try {
                for (var _b = __values(this.buttonGroups), _c = _b.next(); !_c.done; _c = _b.next()) {
                    var buttonGroup = _c.value;
                    buttons.push.apply(buttons, __spread(buttonGroup.buttons));
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                }
                finally { if (e_1) throw e_1.error; }
            }
            return buttons;
        };
        List.prototype.refresh = function (searchText, afterRefreshHandler) {
            var e_2, _a;
            var _this = this;
            // callback function for data
            console.log("refresh list (searchText: " + searchText + ")");
            var dataHandler = function (data) {
                var e_3, _a, e_4, _b, e_5, _c;
                _this.buttonGroups = [];
                try {
                    for (var data_1 = __values(data), data_1_1 = data_1.next(); !data_1_1.done; data_1_1 = data_1.next()) {
                        var item = data_1_1.value;
                        // create button group and buttons
                        // set default types if server does not set type (button or buttonGroup)
                        var itemIsButtonGroup = item.hasOwnProperty("buttons");
                        if (itemIsButtonGroup) {
                            item["type"] = "buttonGroup";
                            try {
                                for (var _d = (e_4 = void 0, __values(item.buttons)), _e = _d.next(); !_e.done; _e = _d.next()) {
                                    var button = _e.value;
                                    if (button["type"] == null) {
                                        button["type"] = "button";
                                    }
                                }
                            }
                            catch (e_4_1) { e_4 = { error: e_4_1 }; }
                            finally {
                                try {
                                    if (_e && !_e.done && (_b = _d.return)) _b.call(_d);
                                }
                                finally { if (e_4) throw e_4.error; }
                            }
                        }
                        else {
                            if (item["type"] == null) {
                                item["type"] = "button";
                            }
                        }
                        var pageElements = _this.app.createPageElement(item, _this.parentPageElement, null);
                        if (pageElements.length !== 1) {
                            console.log("error creating button group from: ");
                            console.log(item);
                        }
                        else {
                            var buttonGroup = pageElements[0];
                            var buttonCounter = 0;
                            try {
                                for (var _f = (e_5 = void 0, __values(buttonGroup.buttons)), _g = _f.next(); !_g.done; _g = _f.next()) {
                                    var button = _g.value;
                                    button.listElement = true;
                                    // model is either simple button or button of a group
                                    var buttonModel = item;
                                    if (itemIsButtonGroup) {
                                        buttonModel = item.buttons[buttonCounter];
                                    }
                                    // build button from json
                                    // use list defaults if button does not specify model
                                    if (buttonModel["icon"] == null) {
                                        buttonModel["icon"] = _this.icon;
                                    }
                                    if (buttonModel["color"] == null) {
                                        buttonModel["color"] = _this.color;
                                    }
                                    if (buttonModel["page"] == null && (buttonModel["form"] == null || buttonModel["form"]["form"] == null)) {
                                        // service does not return page or form, use static model
                                        if (_this.page != null) {
                                            buttonModel["page"] = _this.page;
                                        }
                                        if (_this.form != null) {
                                            buttonModel["form"] = {};
                                            buttonModel.form["form"] = _this.form;
                                            buttonModel.form["handler"] = _this.formHandler;
                                        }
                                    }
                                    // special default width (2 instead of 1) for buttons in list
                                    if (buttonModel["width"] == null) {
                                        buttonModel["width"] = _this.width;
                                    }
                                    button.fromJson(buttonModel);
                                    // special values for list buttons
                                    button.handler = _this._buttonHandler;
                                    button.name = buttonModel.name; // no translation
                                    button.tooltip = buttonModel.tooltip; // no translation
                                    buttonCounter++;
                                }
                            }
                            catch (e_5_1) { e_5 = { error: e_5_1 }; }
                            finally {
                                try {
                                    if (_g && !_g.done && (_c = _f.return)) _c.call(_f);
                                }
                                finally { if (e_5) throw e_5.error; }
                            }
                            _this.buttonGroups.push(buttonGroup);
                        }
                    }
                }
                catch (e_3_1) { e_3 = { error: e_3_1 }; }
                finally {
                    try {
                        if (data_1_1 && !data_1_1.done && (_a = data_1.return)) _a.call(data_1);
                    }
                    finally { if (e_3) throw e_3.error; }
                }
                if (_this.handler != null) {
                    _this.handler.doLoad(_this); // TODO useful?
                }
                // refresh search
                _this.filterVisibleButtonGroups();
                if (_this.limit) {
                    _this.setSearchResultsCountMessage();
                }
                if (afterRefreshHandler != null) {
                    window.setTimeout(function () {
                        afterRefreshHandler();
                    }, 1);
                }
            };
            var listHandlerDoLoad = function (list) { return function (data) { return dataHandler(data); }; };
            // backend data
            if (this._url != null) {
                var urlParameters = "";
                if (this.searchRequest || this.limit) {
                    urlParameters = "?search=" + (searchText == null ? "" : encodeURI(searchText)) + "&limit=" + this.limit;
                }
                this.pathService.serverGet(this.app.getBackendUrl(), this.url + urlParameters, listHandlerDoLoad(this), null);
            }
            // mock data
            if (this._mockData != null) {
                var count = 0;
                try {
                    // fake a key for mock data
                    for (var _b = __values(this.mockData), _c = _b.next(); !_c.done; _c = _b.next()) {
                        var mock = _c.value;
                        count++;
                        if (mock["key"] == null) {
                            mock["key"] = count;
                        }
                    }
                }
                catch (e_2_1) { e_2 = { error: e_2_1 }; }
                finally {
                    try {
                        if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                    }
                    finally { if (e_2) throw e_2.error; }
                }
                dataHandler(this.mockData);
            }
        };
        List.prototype.filterChanged = function (text) {
            this._searchTextChanged.next(text);
        };
        List.prototype.filter = function () {
            this._searchLabel = this.translationService.getText("Search");
            if (this._searchText && this._searchText === "*") {
                this.refresh(null, null);
            }
            else if (this.searchRequest) {
                // call server to filter data
                if (!this._searchText && this.searchRequired) {
                    this._buttonGroups = [];
                }
                else if (this._searchText === "*" || (!this._searchText && !this.searchRequired)) {
                    this.refresh(null, null);
                }
                else if (this._searchText && this._searchText.length >= 2) {
                    this.refresh(this._searchText, null);
                }
                else {
                    this._searchLabel = this.translationService.getText("SearchTextTooShort");
                    this._buttonGroups = [];
                }
            }
            else {
                // filter loaded data only
                this.filterVisibleButtonGroups();
            }
        };
        List.prototype.filterVisibleButtonGroups = function () {
            var e_6, _a, e_7, _b, e_8, _c;
            var searchText = this._searchText ? this._searchText.toLowerCase() : "";
            try {
                for (var _d = __values(this._buttonGroups), _e = _d.next(); !_e.done; _e = _d.next()) {
                    var buttonGroup = _e.value;
                    if (searchText.length <= 0) {
                        buttonGroup.visible = true;
                    }
                    else {
                        buttonGroup.visible = false;
                        try {
                            for (var _f = (e_7 = void 0, __values(buttonGroup.buttons)), _g = _f.next(); !_g.done; _g = _f.next()) {
                                var button = _g.value;
                                if (!buttonGroup.visible) {
                                    buttonGroup.visible = button.name.toLowerCase().indexOf(searchText) !== -1;
                                    if (!buttonGroup.visible) {
                                        try {
                                            for (var _h = (e_8 = void 0, __values(button.details)), _j = _h.next(); !_j.done; _j = _h.next()) {
                                                var detail = _j.value;
                                                if (detail.text.toLowerCase().indexOf(searchText) !== -1) {
                                                    buttonGroup.visible = true;
                                                    break;
                                                }
                                            }
                                        }
                                        catch (e_8_1) { e_8 = { error: e_8_1 }; }
                                        finally {
                                            try {
                                                if (_j && !_j.done && (_c = _h.return)) _c.call(_h);
                                            }
                                            finally { if (e_8) throw e_8.error; }
                                        }
                                    }
                                }
                            }
                        }
                        catch (e_7_1) { e_7 = { error: e_7_1 }; }
                        finally {
                            try {
                                if (_g && !_g.done && (_b = _f.return)) _b.call(_f);
                            }
                            finally { if (e_7) throw e_7.error; }
                        }
                    }
                }
            }
            catch (e_6_1) { e_6 = { error: e_6_1 }; }
            finally {
                try {
                    if (_e && !_e.done && (_a = _d.return)) _a.call(_d);
                }
                finally { if (e_6) throw e_6.error; }
            }
            if (this.visibleItemSize() !== this.buttonGroups.length) {
                this.setSearchResultsCountMessage();
            }
        };
        List.prototype.setSearchResultsCountMessage = function () {
            this._searchLabel = this.visibleItemSize() + " " +
                (this.visibleItemSize() === 1 ? this.translationService.getText("Result") : this.translationService.getText("Results"));
        };
        List.prototype.visibleItemSize = function () {
            var e_9, _a, e_10, _b;
            var result = 0;
            try {
                for (var _c = __values(this.buttonGroups), _d = _c.next(); !_d.done; _d = _c.next()) {
                    var buttonGroup = _d.value;
                    if (buttonGroup.visible) {
                        try {
                            for (var _e = (e_10 = void 0, __values(buttonGroup.buttons)), _f = _e.next(); !_f.done; _f = _e.next()) {
                                var button = _f.value;
                                if (button.visible) {
                                    result++;
                                    break;
                                }
                            }
                        }
                        catch (e_10_1) { e_10 = { error: e_10_1 }; }
                        finally {
                            try {
                                if (_f && !_f.done && (_b = _e.return)) _b.call(_e);
                            }
                            finally { if (e_10) throw e_10.error; }
                        }
                    }
                }
            }
            catch (e_9_1) { e_9 = { error: e_9_1 }; }
            finally {
                try {
                    if (_d && !_d.done && (_a = _c.return)) _a.call(_c);
                }
                finally { if (e_9) throw e_9.error; }
            }
            return result;
        };
        Object.defineProperty(List.prototype, "buttonGroups", {
            get: function () {
                return this._buttonGroups;
            },
            set: function (value) {
                this._buttonGroups = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(List.prototype, "search", {
            get: function () {
                return this._search;
            },
            set: function (value) {
                this._search = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(List.prototype, "handler", {
            get: function () {
                return this._handler;
            },
            set: function (value) {
                this._handler = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(List.prototype, "buttonHandler", {
            get: function () {
                return this._buttonHandler;
            },
            set: function (value) {
                this._buttonHandler = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(List.prototype, "icon", {
            get: function () {
                return this._icon;
            },
            set: function (value) {
                this._icon = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(List.prototype, "color", {
            get: function () {
                return this._color;
            },
            set: function (value) {
                this._color = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(List.prototype, "form", {
            get: function () {
                return this._form;
            },
            set: function (value) {
                this._form = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(List.prototype, "formHandler", {
            get: function () {
                return this._formHandler;
            },
            set: function (value) {
                this._formHandler = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(List.prototype, "page", {
            get: function () {
                return this._page;
            },
            set: function (value) {
                this._page = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(List.prototype, "mockData", {
            get: function () {
                return this._mockData;
            },
            set: function (value) {
                this._mockData = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(List.prototype, "url", {
            get: function () {
                return this._url;
            },
            set: function (value) {
                this._url = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(List.prototype, "limit", {
            get: function () {
                return this._limit;
            },
            set: function (value) {
                this._limit = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(List.prototype, "searchRequired", {
            get: function () {
                return this._searchRequired;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(List.prototype, "searchRequest", {
            get: function () {
                return this._searchRequest;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(List.prototype, "searchText", {
            get: function () {
                return this._searchText;
            },
            set: function (value) {
                this._searchText = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(List.prototype, "searchLabel", {
            get: function () {
                return this._searchLabel;
            },
            set: function (value) {
                this._searchLabel = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(List.prototype, "searchInputLabel", {
            get: function () {
                return this._searchInputLabel;
            },
            set: function (value) {
                this._searchInputLabel = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(List.prototype, "searchButton", {
            get: function () {
                return this._searchButton;
            },
            enumerable: true,
            configurable: true
        });
        List.prototype.fromJson = function (modelElement) {
            var _this = this;
            _super.prototype.fromJson.call(this, modelElement);
            if (modelElement["search"] != null) {
                this.search = modelElement["search"];
            }
            if (modelElement["searchRequired"] != null) {
                this._searchRequired = modelElement["searchRequired"];
            }
            if (modelElement["searchRequest"] != null) {
                this._searchRequest = modelElement["searchRequest"];
            }
            if (modelElement["limit"] != null) {
                this.limit = modelElement["limit"];
            }
            // verify valid search combinations
            if (!this.search && this.searchRequired) {
                console.log("Configuration Error: search=false requires searchRequired=false");
                this._searchRequired = false;
            }
            if (this.searchRequired && !this.searchRequest) {
                console.log("Configuration Error: searchRequired=true requires searchRequest=true");
                this._searchRequest = true;
            }
            // other model attributes
            if (modelElement["color"] != null) {
                this.color = modelElement["color"];
            }
            if (modelElement["form"] != null) {
                this.form = modelElement["form"]["form"];
                this.formHandler = modelElement["form"]["handler"];
            }
            if (modelElement["page"] != null) {
                this.page = modelElement["page"];
            }
            if (modelElement["icon"] != null) {
                this.icon = modelElement["icon"];
            }
            if (modelElement["data"] != null) {
                this.mockData = modelElement["data"];
            }
            if (modelElement["name"] != null) {
                this.name = this.translationService.getText(modelElement["name"]);
            }
            if (modelElement["url"] != null) {
                var urlString = modelElement["url"];
                this.url = KeyUtility.translateUrl(urlString, null, false, this);
            }
            // override from PageElement
            if (modelElement["width"] != null) {
                this.width = modelElement["width"];
            }
            else {
                this.width = 2; // special default for list
            }
            // search button
            var searchButtonModel = {};
            searchButtonModel["color"] = modelElement["searchColor"] != null ? modelElement["searchColor"] : "tile-search";
            searchButtonModel["width"] = modelElement["searchWidth"] != null ? modelElement["searchWidth"] : this.width;
            this._searchButton.fromJson(searchButtonModel);
            // delay for search field
            var debounceTimeValue = this.searchRequest ? 300 : 30;
            this._searchTextChanged.pipe(operators.debounceTime(debounceTimeValue)) // wait after the last event before emitting last event
                .subscribe(function (_searchText) {
                _this._searchText = _searchText;
                _this.filter();
            });
        };
        return List;
    }(PageElement));

    var CustomDirective = /** @class */ (function () {
        function CustomDirective(viewContainerRef) {
            this.viewContainerRef = viewContainerRef;
        }
        CustomDirective.ctorParameters = function () { return [
            { type: core.ViewContainerRef }
        ]; };
        CustomDirective = __decorate([
            core.Directive({
                selector: "[path-custom-directive]",
            })
        ], CustomDirective);
        return CustomDirective;
    }());

    var CustomContainerComponent = /** @class */ (function () {
        function CustomContainerComponent(componentFactoryResolver) {
            this.componentFactoryResolver = componentFactoryResolver;
        }
        CustomContainerComponent.prototype.ngOnInit = function () {
            this.loadComponent();
        };
        CustomContainerComponent.prototype.ngOnDestroy = function () {
        };
        CustomContainerComponent.prototype.loadComponent = function () {
            var componentFactory = this.componentFactoryResolver.resolveComponentFactory(this.pageElement.typeClass);
            var viewContainerRef = this.customDirective.viewContainerRef;
            viewContainerRef.clear();
            var componentRef = viewContainerRef.createComponent(componentFactory);
            componentRef.instance.pageElement = this.pageElement;
        };
        CustomContainerComponent.ctorParameters = function () { return [
            { type: core.ComponentFactoryResolver }
        ]; };
        __decorate([
            core.Input()
        ], CustomContainerComponent.prototype, "pageElement", void 0);
        __decorate([
            core.ViewChild(CustomDirective, { static: true })
        ], CustomContainerComponent.prototype, "customDirective", void 0);
        CustomContainerComponent = __decorate([
            core.Component({
                selector: "path-custom-container-component",
                template: "\n        <ng-template path-custom-directive></ng-template>"
            })
        ], CustomContainerComponent);
        return CustomContainerComponent;
    }());
    var CustomPageElement = /** @class */ (function () {
        function CustomPageElement() {
        }
        Object.defineProperty(CustomPageElement.prototype, "pageElement", {
            get: function () {
                return this._pageElement;
            },
            set: function (value) {
                this._pageElement = value;
            },
            enumerable: true,
            configurable: true
        });
        return CustomPageElement;
    }());

    var ElementListComponent = /** @class */ (function () {
        function ElementListComponent() {
        }
        __decorate([
            core.Input("elementList"),
            core.Output("elementList")
        ], ElementListComponent.prototype, "elementList", void 0);
        ElementListComponent = __decorate([
            core.Component({
                selector: "path-element-list",
                template: "<span></span>"
            })
        ], ElementListComponent);
        return ElementListComponent;
    }());
    var ElementList = /** @class */ (function (_super) {
        __extends(ElementList, _super);
        function ElementList(app, pathService, translationService) {
            return _super.call(this, app) || this;
        }
        ElementList.prototype.fromJson = function (modelElement) {
            _super.prototype.fromJson.call(this, modelElement);
            this.type = "elementList";
        };
        return ElementList;
    }(PageElement));

    var BreadcrumbComponent = /** @class */ (function () {
        function BreadcrumbComponent() {
        }
        __decorate([
            core.Input("app")
        ], BreadcrumbComponent.prototype, "app", void 0);
        BreadcrumbComponent = __decorate([
            core.Component({
                selector: "path-breadcrumb",
                template: "<div class=\"col-md-12\">\r\n    <h3>\r\n        <ol class=\"breadcrumb\">\r\n            <li *ngFor='let page of app[\"_pageStack\"]; let currentIndex = index; let last = last'\r\n                class=\"{{last ? 'active': ''}}\">\r\n                <a class=\"invisibleSP\" href=\"#\" *ngIf='!last' (click)=\"app.navigateToPage(currentIndex)\">{{page.getShortName()}}</a>\r\n                {{last ? page.getShortName() : ''}}\r\n                &nbsp;\r\n            </li>\r\n        </ol>\r\n    </h3>\r\n</div>\r\n"
            })
        ], BreadcrumbComponent);
        return BreadcrumbComponent;
    }());
    // breadcrumb is a special element since it uses app directly
    var Breadcrumb = /** @class */ (function (_super) {
        __extends(Breadcrumb, _super);
        function Breadcrumb(app) {
            return _super.call(this, app) || this;
        }
        return Breadcrumb;
    }(PageElement));

    var AppModule = /** @class */ (function () {
        function AppModule() {
        }
        AppModule_1 = AppModule;
        AppModule.forRoot = function () {
            return { ngModule: AppModule_1, providers: [] };
        };
        var AppModule_1;
        AppModule = AppModule_1 = __decorate([
            core.NgModule({
                imports: [
                    platformBrowser.BrowserModule,
                    http.HttpClientModule,
                    forms.FormsModule,
                    common.CommonModule,
                    animations.BrowserAnimationsModule,
                    datepicker.BsDatepickerModule.forRoot(),
                    tooltip.TooltipModule.forRoot()
                ],
                declarations: [
                    DraggableDirective,
                    LabelFieldComponent,
                    FieldListFieldComponent,
                    FormComponent,
                    ChartComponent,
                    AutoCompleteComponent,
                    ProgressBarComponent,
                    TextFieldComponent,
                    TranslationFieldComponent,
                    NumberFieldComponent,
                    DateFieldComponent,
                    RadioGroupComponent,
                    CheckboxGroupComponent,
                    FormFieldLabelComponent,
                    BackButtonComponent,
                    LinkButtonComponent,
                    PageDeleteButtonComponent,
                    ButtonComponent,
                    PageLabelComponent,
                    ListComponent,
                    CustomDirective,
                    CustomContainerComponent,
                    ElementListComponent,
                    ButtonGroupComponent,
                    BreadcrumbComponent,
                    FileUploadComponent
                ],
                exports: [
                    DraggableDirective,
                    platformBrowser.BrowserModule,
                    http.HttpClientModule,
                    forms.FormsModule,
                    common.CommonModule,
                    datepicker.BsDatepickerModule,
                    tooltip.TooltipModule,
                    LabelFieldComponent,
                    FieldListFieldComponent,
                    FormComponent,
                    ChartComponent,
                    AutoCompleteComponent,
                    ProgressBarComponent,
                    TextFieldComponent,
                    TranslationFieldComponent,
                    NumberFieldComponent,
                    DateFieldComponent,
                    RadioGroupComponent,
                    CheckboxGroupComponent,
                    FormFieldLabelComponent,
                    BackButtonComponent,
                    LinkButtonComponent,
                    PageDeleteButtonComponent,
                    ButtonComponent,
                    PageLabelComponent,
                    ListComponent,
                    CustomDirective,
                    CustomContainerComponent,
                    ElementListComponent,
                    ButtonGroupComponent,
                    BreadcrumbComponent,
                    FileUploadComponent
                ],
            })
        ], AppModule);
        return AppModule;
    }());

    exports.AppModule = AppModule;
    exports.ɵa = DraggableDirective;
    exports.ɵb = LabelFieldComponent;
    exports.ɵc = FieldListFieldComponent;
    exports.ɵd = FormComponent;
    exports.ɵe = ChartComponent;
    exports.ɵf = AutoCompleteComponent;
    exports.ɵg = ProgressBarComponent;
    exports.ɵh = TextFieldComponent;
    exports.ɵi = TranslationFieldComponent;
    exports.ɵj = NumberFieldComponent;
    exports.ɵk = DateFieldComponent;
    exports.ɵl = RadioGroupComponent;
    exports.ɵm = CheckboxGroupComponent;
    exports.ɵn = FormFieldLabelComponent;
    exports.ɵo = BackButtonComponent;
    exports.ɵp = LinkButtonComponent;
    exports.ɵq = PageDeleteButtonComponent;
    exports.ɵr = ButtonComponent;
    exports.ɵs = PageLabelComponent;
    exports.ɵt = ListComponent;
    exports.ɵu = CustomDirective;
    exports.ɵv = CustomContainerComponent;
    exports.ɵw = ElementListComponent;
    exports.ɵx = ButtonGroupComponent;
    exports.ɵy = BreadcrumbComponent;
    exports.ɵz = FileUploadComponent;

    Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=path-framework.umd.js.map
