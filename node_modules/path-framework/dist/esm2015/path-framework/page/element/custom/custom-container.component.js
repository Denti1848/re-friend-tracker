import * as tslib_1 from "tslib";
import { Component, ComponentFactoryResolver, Input, OnDestroy, OnInit, ViewChild } from "@angular/core";
import { CustomDirective } from "./custom.directive";
let CustomContainerComponent = class CustomContainerComponent {
    constructor(componentFactoryResolver) {
        this.componentFactoryResolver = componentFactoryResolver;
    }
    ngOnInit() {
        this.loadComponent();
    }
    ngOnDestroy() {
    }
    loadComponent() {
        const componentFactory = this.componentFactoryResolver.resolveComponentFactory(this.pageElement.typeClass);
        const viewContainerRef = this.customDirective.viewContainerRef;
        viewContainerRef.clear();
        const componentRef = viewContainerRef.createComponent(componentFactory);
        componentRef.instance.pageElement = this.pageElement;
    }
};
CustomContainerComponent.ctorParameters = () => [
    { type: ComponentFactoryResolver }
];
tslib_1.__decorate([
    Input()
], CustomContainerComponent.prototype, "pageElement", void 0);
tslib_1.__decorate([
    ViewChild(CustomDirective, { static: true })
], CustomContainerComponent.prototype, "customDirective", void 0);
CustomContainerComponent = tslib_1.__decorate([
    Component({
        selector: "path-custom-container-component",
        template: `
        <ng-template path-custom-directive></ng-template>`
    })
], CustomContainerComponent);
export { CustomContainerComponent };
export class CustomPageElement {
    get pageElement() {
        return this._pageElement;
    }
    set pageElement(value) {
        this._pageElement = value;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY3VzdG9tLWNvbnRhaW5lci5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9wYXRoLWZyYW1ld29yay8iLCJzb3VyY2VzIjpbInBhdGgtZnJhbWV3b3JrL3BhZ2UvZWxlbWVudC9jdXN0b20vY3VzdG9tLWNvbnRhaW5lci5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBQyxTQUFTLEVBQUUsd0JBQXdCLEVBQUUsS0FBSyxFQUFFLFNBQVMsRUFBRSxNQUFNLEVBQUUsU0FBUyxFQUFDLE1BQU0sZUFBZSxDQUFDO0FBQ3ZHLE9BQU8sRUFBQyxlQUFlLEVBQUMsTUFBTSxvQkFBb0IsQ0FBQztBQVVuRCxJQUFhLHdCQUF3QixHQUFyQyxNQUFhLHdCQUF3QjtJQUlqQyxZQUFvQix3QkFBa0Q7UUFBbEQsNkJBQXdCLEdBQXhCLHdCQUF3QixDQUEwQjtJQUN0RSxDQUFDO0lBRUQsUUFBUTtRQUNKLElBQUksQ0FBQyxhQUFhLEVBQUUsQ0FBQztJQUN6QixDQUFDO0lBRUQsV0FBVztJQUNYLENBQUM7SUFFRCxhQUFhO1FBQ1QsTUFBTSxnQkFBZ0IsR0FBRyxJQUFJLENBQUMsd0JBQXdCLENBQUMsdUJBQXVCLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxTQUFTLENBQUMsQ0FBQztRQUUzRyxNQUFNLGdCQUFnQixHQUFHLElBQUksQ0FBQyxlQUFlLENBQUMsZ0JBQWdCLENBQUM7UUFDL0QsZ0JBQWdCLENBQUMsS0FBSyxFQUFFLENBQUM7UUFFekIsTUFBTSxZQUFZLEdBQUcsZ0JBQWdCLENBQUMsZUFBZSxDQUFDLGdCQUFnQixDQUFDLENBQUM7UUFDeEUsWUFBWSxDQUFDLFFBQVEsQ0FBQyxXQUFXLEdBQUcsSUFBSSxDQUFDLFdBQVcsQ0FBQztJQUN6RCxDQUFDO0NBQ0osQ0FBQTs7WUFuQmlELHdCQUF3Qjs7QUFIN0Q7SUFBUixLQUFLLEVBQUU7NkRBQXlDO0FBQ0w7SUFBM0MsU0FBUyxDQUFDLGVBQWUsRUFBRSxFQUFDLE1BQU0sRUFBRSxJQUFJLEVBQUMsQ0FBQztpRUFBa0M7QUFGcEUsd0JBQXdCO0lBTnBDLFNBQVMsQ0FBQztRQUNQLFFBQVEsRUFBRSxpQ0FBaUM7UUFDM0MsUUFBUSxFQUFFOzBEQUM0QztLQUN6RCxDQUFDO0dBRVcsd0JBQXdCLENBdUJwQztTQXZCWSx3QkFBd0I7QUF5QnJDLE1BQU0sT0FBTyxpQkFBaUI7SUFHMUIsSUFBSSxXQUFXO1FBQ1gsT0FBTyxJQUFJLENBQUMsWUFBWSxDQUFDO0lBQzdCLENBQUM7SUFFRCxJQUFJLFdBQVcsQ0FBQyxLQUFrQjtRQUM5QixJQUFJLENBQUMsWUFBWSxHQUFHLEtBQUssQ0FBQztJQUM5QixDQUFDO0NBQ0oiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0NvbXBvbmVudCwgQ29tcG9uZW50RmFjdG9yeVJlc29sdmVyLCBJbnB1dCwgT25EZXN0cm95LCBPbkluaXQsIFZpZXdDaGlsZH0gZnJvbSBcIkBhbmd1bGFyL2NvcmVcIjtcclxuaW1wb3J0IHtDdXN0b21EaXJlY3RpdmV9IGZyb20gXCIuL2N1c3RvbS5kaXJlY3RpdmVcIjtcclxuaW1wb3J0IHtDdXN0b21Db250YWluZXJQYWdlRWxlbWVudH0gZnJvbSBcIi4vY3VzdG9tLWNvbnRhaW5lci1wYWdlLWVsZW1lbnRcIjtcclxuaW1wb3J0IHtQYWdlRWxlbWVudH0gZnJvbSBcIi4uL3BhZ2UtZWxlbWVudFwiO1xyXG5cclxuQENvbXBvbmVudCh7XHJcbiAgICBzZWxlY3RvcjogXCJwYXRoLWN1c3RvbS1jb250YWluZXItY29tcG9uZW50XCIsXHJcbiAgICB0ZW1wbGF0ZTogYFxyXG4gICAgICAgIDxuZy10ZW1wbGF0ZSBwYXRoLWN1c3RvbS1kaXJlY3RpdmU+PC9uZy10ZW1wbGF0ZT5gXHJcbn0pXHJcblxyXG5leHBvcnQgY2xhc3MgQ3VzdG9tQ29udGFpbmVyQ29tcG9uZW50IGltcGxlbWVudHMgT25Jbml0LCBPbkRlc3Ryb3kge1xyXG4gICAgQElucHV0KCkgcGFnZUVsZW1lbnQ6IEN1c3RvbUNvbnRhaW5lclBhZ2VFbGVtZW50O1xyXG4gICAgQFZpZXdDaGlsZChDdXN0b21EaXJlY3RpdmUsIHtzdGF0aWM6IHRydWV9KSBjdXN0b21EaXJlY3RpdmU6IEN1c3RvbURpcmVjdGl2ZTtcclxuXHJcbiAgICBjb25zdHJ1Y3Rvcihwcml2YXRlIGNvbXBvbmVudEZhY3RvcnlSZXNvbHZlcjogQ29tcG9uZW50RmFjdG9yeVJlc29sdmVyKSB7XHJcbiAgICB9XHJcblxyXG4gICAgbmdPbkluaXQoKSB7XHJcbiAgICAgICAgdGhpcy5sb2FkQ29tcG9uZW50KCk7XHJcbiAgICB9XHJcblxyXG4gICAgbmdPbkRlc3Ryb3koKSB7XHJcbiAgICB9XHJcblxyXG4gICAgbG9hZENvbXBvbmVudCgpIHtcclxuICAgICAgICBjb25zdCBjb21wb25lbnRGYWN0b3J5ID0gdGhpcy5jb21wb25lbnRGYWN0b3J5UmVzb2x2ZXIucmVzb2x2ZUNvbXBvbmVudEZhY3RvcnkodGhpcy5wYWdlRWxlbWVudC50eXBlQ2xhc3MpO1xyXG5cclxuICAgICAgICBjb25zdCB2aWV3Q29udGFpbmVyUmVmID0gdGhpcy5jdXN0b21EaXJlY3RpdmUudmlld0NvbnRhaW5lclJlZjtcclxuICAgICAgICB2aWV3Q29udGFpbmVyUmVmLmNsZWFyKCk7XHJcblxyXG4gICAgICAgIGNvbnN0IGNvbXBvbmVudFJlZiA9IHZpZXdDb250YWluZXJSZWYuY3JlYXRlQ29tcG9uZW50KGNvbXBvbmVudEZhY3RvcnkpO1xyXG4gICAgICAgIGNvbXBvbmVudFJlZi5pbnN0YW5jZS5wYWdlRWxlbWVudCA9IHRoaXMucGFnZUVsZW1lbnQ7XHJcbiAgICB9XHJcbn1cclxuXHJcbmV4cG9ydCBjbGFzcyBDdXN0b21QYWdlRWxlbWVudCB7XHJcbiAgICBwcml2YXRlIF9wYWdlRWxlbWVudDogUGFnZUVsZW1lbnQ7XHJcblxyXG4gICAgZ2V0IHBhZ2VFbGVtZW50KCk6IFBhZ2VFbGVtZW50IHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fcGFnZUVsZW1lbnQ7XHJcbiAgICB9XHJcblxyXG4gICAgc2V0IHBhZ2VFbGVtZW50KHZhbHVlOiBQYWdlRWxlbWVudCkge1xyXG4gICAgICAgIHRoaXMuX3BhZ2VFbGVtZW50ID0gdmFsdWU7XHJcbiAgICB9XHJcbn1cclxuIl19