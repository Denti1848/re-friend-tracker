import * as tslib_1 from "tslib";
import { PageElement, Key } from "../page-element";
import { PathService } from "../../../service/path.service";
import { Inject } from "@angular/core";
import { FormFunction } from "../../../form/form-function";
import { TranslationService } from "../../../service/translation.service";
import { FocusUtility } from "../../../form/focus-utility";
let InlineForm = class InlineForm extends PageElement {
    constructor(app, pathService, translationService) {
        super(app);
        this.pathService = pathService;
        this.translationService = translationService;
    }
    get url() {
        return this._url;
    }
    set url(value) {
        this._url = value;
    }
    get formId() {
        return this._formId;
    }
    set formId(value) {
        this._formId = value;
    }
    get form() {
        return this._form;
    }
    set form(value) {
        this._form = value;
    }
    get page() {
        return this._page;
    }
    set page(value) {
        this._page = value;
    }
    fromJson(modelFormField) {
        super.fromJson(modelFormField);
        if (modelFormField["form"] != null) {
            this.formId = modelFormField["form"];
        }
        if (modelFormField["page"] != null) {
            this.page = modelFormField["page"];
        }
        if (modelFormField["key"] == null) {
            // only set key if not set by model
            this.key = this.parentPageElement != null ? this.parentPageElement.key : null;
        }
    }
    loadNextForm(forward) {
        if (this._url != null) {
            this.pathService.serverGet(this.app.getBackendUrl(), this.url, (data) => {
                if (data != null && data["length"] != null && data.length > 0) {
                    let foundNewKey = false;
                    if (this._currentKey == null) {
                        const firstItem = data[0];
                        this._currentKey = new Key(firstItem["key"]["key"], firstItem["key"]["name"]);
                        foundNewKey = true;
                    }
                    else {
                        let counter = 0;
                        for (const item of data) {
                            counter++;
                            if (item["key"]["key"] === this._currentKey.getKey() && item["key"]["name"] === this._currentKey.getName()) {
                                if (forward && data.length > counter) {
                                    this._currentKey = new Key(data[counter]["key"]["key"], data[counter]["key"]["name"]);
                                    foundNewKey = true;
                                }
                                else if (!forward && counter > 1) {
                                    this._currentKey = new Key(data[counter - 2]["key"]["key"], data[counter - 2]["key"]["name"]);
                                    foundNewKey = true;
                                }
                                break;
                            }
                        }
                    }
                    if (this._currentKey != null && foundNewKey) {
                        console.log("load next inline form with key " + this._currentKey.getKey() + "/" + this._currentKey.getName());
                        const formFunction = new FormFunction();
                        formFunction.save = (formdata) => {
                            this.loadNextForm(true);
                        };
                        formFunction.cancel = () => {
                            this.loadNextForm(true);
                        };
                        formFunction.delete = (formdata) => {
                            this.loadNextForm(false);
                        };
                        this._form = this.app.createForm(this._formId, this._currentKey, null, formFunction, this);
                        this.name = this._form.title;
                        FocusUtility.focusFirstField(this.form);
                    }
                    else {
                        this._form = null;
                        if (this.page == null) {
                            this.app.navigateBack();
                        }
                        else {
                            this.app.setCurrentPage(this.page, this);
                        }
                    }
                }
                else {
                    window.alert(this.translationService.getText("NoDataError"));
                    this.app.navigateBack();
                }
            }, null);
        }
    }
};
InlineForm = tslib_1.__decorate([
    tslib_1.__param(1, Inject(PathService)),
    tslib_1.__param(2, Inject(TranslationService))
], InlineForm);
export { InlineForm };
//# sourceMappingURL=data:application/json;base64,