import * as tslib_1 from "tslib";
import { Button } from "./button.component";
import { Component, Input, Output } from "@angular/core";
import { KeyUtility } from "../../../utility/key-utility";
let LinkButtonComponent = class LinkButtonComponent {
};
tslib_1.__decorate([
    Input("button"),
    Output("button")
], LinkButtonComponent.prototype, "button", void 0);
LinkButtonComponent = tslib_1.__decorate([
    Component({
        selector: "path-link-button",
        template: "<a (click)=\"button.onClick()\" class=\"fa-links\">\r\n\t<div class=\"thumbnail tile tile-button {{(button.width <= 1 ? 'tile-medium' : (button.width == 2 ? 'tile-wide' : (button.width == 3 ? 'tile-wide-3' : (button.width >= 4 ? 'tile-wide-4' : ''))))}} col-md-3 {{button.cssGroupBorder}} {{button.cssClass}}\" [ngStyle]=\"button.cssStyle\">\r\n\t\t<div class=\"h3\">{{button.name}}</div>\r\n\t\t<i class=\"fa fa-2x {{button.icon}}\"></i>\r\n\t</div>\r\n</a>\r\n\r\n\r\n"
    })
], LinkButtonComponent);
export { LinkButtonComponent };
export class LinkButton extends Button {
    constructor(app, pathService, translationService) {
        super(app, pathService, translationService);
    }
    onClick() {
        let url = null;
        if (this.url.startsWith("/")) {
            // local relative url
            url = this.getApp().getBackendUrl() + this.url + "?token=" + sessionStorage.getItem("pathAppId");
        }
        else {
            // remote absolute url
            url = this.url;
        }
        window.location.assign(url);
    }
    fromJson(modelElement) {
        super.fromJson(modelElement);
        this.type = "linkButton";
        this.url = KeyUtility.translateUrl(modelElement["url"], null, false, this.parentPageElement);
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGluay1idXR0b24uY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vcGF0aC1mcmFtZXdvcmsvIiwic291cmNlcyI6WyJwYXRoLWZyYW1ld29yay9wYWdlL2VsZW1lbnQvYnV0dG9uL2xpbmstYnV0dG9uLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFDLE1BQU0sRUFBQyxNQUFNLG9CQUFvQixDQUFDO0FBRzFDLE9BQU8sRUFBQyxTQUFTLEVBQUUsS0FBSyxFQUFFLE1BQU0sRUFBQyxNQUFNLGVBQWUsQ0FBQztBQUV2RCxPQUFPLEVBQUMsVUFBVSxFQUFDLE1BQU0sOEJBQThCLENBQUM7QUFNeEQsSUFBYSxtQkFBbUIsR0FBaEMsTUFBYSxtQkFBbUI7Q0FJL0IsQ0FBQTtBQURHO0lBRkMsS0FBSyxDQUFDLFFBQVEsQ0FBQztJQUNmLE1BQU0sQ0FBQyxRQUFRLENBQUM7bURBQ0U7QUFIVixtQkFBbUI7SUFKL0IsU0FBUyxDQUFDO1FBQ1AsUUFBUSxFQUFFLGtCQUFrQjtRQUM1QixrZUFBeUM7S0FDNUMsQ0FBQztHQUNXLG1CQUFtQixDQUkvQjtTQUpZLG1CQUFtQjtBQU1oQyxNQUFNLE9BQU8sVUFBVyxTQUFRLE1BQU07SUFFbEMsWUFBWSxHQUFhLEVBQUUsV0FBd0IsRUFBRSxrQkFBc0M7UUFDdkYsS0FBSyxDQUFDLEdBQUcsRUFBRSxXQUFXLEVBQUUsa0JBQWtCLENBQUMsQ0FBQztJQUNoRCxDQUFDO0lBRU0sT0FBTztRQUNWLElBQUksR0FBRyxHQUFXLElBQUksQ0FBQztRQUN2QixJQUFJLElBQUksQ0FBQyxHQUFHLENBQUMsVUFBVSxDQUFDLEdBQUcsQ0FBQyxFQUFFO1lBQzFCLHFCQUFxQjtZQUNyQixHQUFHLEdBQUcsSUFBSSxDQUFDLE1BQU0sRUFBRSxDQUFDLGFBQWEsRUFBRSxHQUFHLElBQUksQ0FBQyxHQUFHLEdBQUcsU0FBUyxHQUFHLGNBQWMsQ0FBQyxPQUFPLENBQUMsV0FBVyxDQUFDLENBQUM7U0FDcEc7YUFBTTtZQUNILHNCQUFzQjtZQUN0QixHQUFHLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQztTQUNsQjtRQUNELE1BQU0sQ0FBQyxRQUFRLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBQ2hDLENBQUM7SUFFTSxRQUFRLENBQUMsWUFBWTtRQUN4QixLQUFLLENBQUMsUUFBUSxDQUFDLFlBQVksQ0FBQyxDQUFDO1FBQzdCLElBQUksQ0FBQyxJQUFJLEdBQUcsWUFBWSxDQUFDO1FBQ3pCLElBQUksQ0FBQyxHQUFHLEdBQUcsVUFBVSxDQUFDLFlBQVksQ0FBQyxZQUFZLENBQUMsS0FBSyxDQUFDLEVBQUUsSUFBSSxFQUFFLEtBQUssRUFBRSxJQUFJLENBQUMsaUJBQWlCLENBQUMsQ0FBQztJQUNqRyxDQUFDO0NBQ0oiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0J1dHRvbn0gZnJvbSBcIi4vYnV0dG9uLmNvbXBvbmVudFwiO1xyXG5pbXBvcnQge1BhdGhTZXJ2aWNlfSBmcm9tIFwiLi4vLi4vLi4vc2VydmljZS9wYXRoLnNlcnZpY2VcIjtcclxuaW1wb3J0IHtJUGF0aEFwcH0gZnJvbSBcIi4uLy4uLy4uL3BhdGhpbnRlcmZhY2VcIjtcclxuaW1wb3J0IHtDb21wb25lbnQsIElucHV0LCBPdXRwdXR9IGZyb20gXCJAYW5ndWxhci9jb3JlXCI7XHJcbmltcG9ydCB7VHJhbnNsYXRpb25TZXJ2aWNlfSBmcm9tIFwiLi4vLi4vLi4vc2VydmljZS90cmFuc2xhdGlvbi5zZXJ2aWNlXCI7XHJcbmltcG9ydCB7S2V5VXRpbGl0eX0gZnJvbSBcIi4uLy4uLy4uL3V0aWxpdHkva2V5LXV0aWxpdHlcIjtcclxuXHJcbkBDb21wb25lbnQoe1xyXG4gICAgc2VsZWN0b3I6IFwicGF0aC1saW5rLWJ1dHRvblwiLFxyXG4gICAgdGVtcGxhdGVVcmw6IFwibGluay1idXR0b24uY29tcG9uZW50Lmh0bWxcIlxyXG59KVxyXG5leHBvcnQgY2xhc3MgTGlua0J1dHRvbkNvbXBvbmVudCB7XHJcbiAgICBASW5wdXQoXCJidXR0b25cIilcclxuICAgIEBPdXRwdXQoXCJidXR0b25cIilcclxuICAgIGJ1dHRvbjogTGlua0J1dHRvbjtcclxufVxyXG5cclxuZXhwb3J0IGNsYXNzIExpbmtCdXR0b24gZXh0ZW5kcyBCdXR0b24ge1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKGFwcDogSVBhdGhBcHAsIHBhdGhTZXJ2aWNlOiBQYXRoU2VydmljZSwgdHJhbnNsYXRpb25TZXJ2aWNlOiBUcmFuc2xhdGlvblNlcnZpY2UpIHtcclxuICAgICAgICBzdXBlcihhcHAsIHBhdGhTZXJ2aWNlLCB0cmFuc2xhdGlvblNlcnZpY2UpO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBvbkNsaWNrKCkge1xyXG4gICAgICAgIGxldCB1cmw6IHN0cmluZyA9IG51bGw7XHJcbiAgICAgICAgaWYgKHRoaXMudXJsLnN0YXJ0c1dpdGgoXCIvXCIpKSB7XHJcbiAgICAgICAgICAgIC8vIGxvY2FsIHJlbGF0aXZlIHVybFxyXG4gICAgICAgICAgICB1cmwgPSB0aGlzLmdldEFwcCgpLmdldEJhY2tlbmRVcmwoKSArIHRoaXMudXJsICsgXCI/dG9rZW49XCIgKyBzZXNzaW9uU3RvcmFnZS5nZXRJdGVtKFwicGF0aEFwcElkXCIpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIC8vIHJlbW90ZSBhYnNvbHV0ZSB1cmxcclxuICAgICAgICAgICAgdXJsID0gdGhpcy51cmw7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHdpbmRvdy5sb2NhdGlvbi5hc3NpZ24odXJsKTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgZnJvbUpzb24obW9kZWxFbGVtZW50KSB7XHJcbiAgICAgICAgc3VwZXIuZnJvbUpzb24obW9kZWxFbGVtZW50KTtcclxuICAgICAgICB0aGlzLnR5cGUgPSBcImxpbmtCdXR0b25cIjtcclxuICAgICAgICB0aGlzLnVybCA9IEtleVV0aWxpdHkudHJhbnNsYXRlVXJsKG1vZGVsRWxlbWVudFtcInVybFwiXSwgbnVsbCwgZmFsc2UsIHRoaXMucGFyZW50UGFnZUVsZW1lbnQpO1xyXG4gICAgfVxyXG59XHJcbiJdfQ==