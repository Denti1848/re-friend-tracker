import * as tslib_1 from "tslib";
import { PageElement } from "../page-element";
import { Input, Output, Component } from "@angular/core";
import { KeyUtility } from "../../../utility/key-utility";
import { ButtonDetail } from "./button-detail";
import { StringUtility } from "../../../utility/string-utility";
import { ColorUtility } from "../../../utility/color-utility";
let ButtonComponent = class ButtonComponent {
};
tslib_1.__decorate([
    Input("button"),
    Output("button")
], ButtonComponent.prototype, "button", void 0);
ButtonComponent = tslib_1.__decorate([
    Component({
        selector: "path-button",
        template: "<a (click)=\"button.onClick()\" class=\"fa-links\">\r\n\t<div tooltip=\"{{button.tooltip}}\" *ngIf=\"button.visible\" class=\"thumbnail tile {{button.cssButtonTarget ? 'tile-button' : ''}} {{(button.width <= 1 ? 'tile-medium' : (button.width == 2 ? 'tile-wide' : (button.width == 3 ? 'tile-wide-3' : (button.width >= 4 ? 'tile-wide-4' : ''))))}} {{button.cssGroupBorder}} {{button.cssClass}}\" [ngStyle]=\"button.cssStyle\">\r\n\t\t<div class=\"h3 truncate\">{{button.name}}</div>\r\n\t\t<span class=\"truncate\" *ngFor='let detail of button.details; let last = last;'>\r\n                    <span class=\"h4 m-t-5\" [innerHTML]=\"detail.text\"></span><small [hidden]=\"last\">&nbsp;&bull;&nbsp;</small></span>\r\n\t\t<div class=\"h4 m-t-5\"></div>\r\n\t\t<i class=\"fa fa-2x {{button.icon}}\"></i>\r\n\t</div>\r\n</a>\r\n"
    })
], ButtonComponent);
export { ButtonComponent };
export class Button extends PageElement {
    constructor(app, pathService, translationService) {
        super(app);
        this.pathService = pathService;
        this.translationService = translationService;
        this._details = [];
    }
    onClick() {
        if (this._handler != null) {
            this._handler.doClick(this);
            return;
        }
        if (!StringUtility.isEmpty(this._url)) {
            this.pathService.serverGet(this.app.getBackendUrl(), this._url, () => {
                this.app.refreshCurrentPage();
            }, null);
        }
        if (!StringUtility.isEmpty(this._page)) {
            this.app.setCurrentPage(this._page, this);
            return;
        }
        if (!StringUtility.isEmpty(this._form)) {
            this.app.setCurrentForm(this._form, this.key, this._formHandler, this);
            return;
        }
    }
    setIcon(icon) {
        this.icon = icon;
    }
    setForm(form) {
        this.form = form;
    }
    setFormHandler(formHandler) {
        this.formHandler = formHandler;
    }
    setPage(page) {
        this.page = page;
    }
    setKey(key) {
        this.key = key;
    }
    getApp() {
        return this.app;
    }
    getName() {
        return this.name;
    }
    get icon() {
        return this._icon;
    }
    set icon(value) {
        this._icon = value;
    }
    get cssStyle() {
        return this._cssStyle;
    }
    get cssClass() {
        return this._cssClass;
    }
    get cssButtonTarget() {
        return this._cssButtonTarget;
    }
    get cssGroupBorder() {
        return this._cssGroupBorder;
    }
    set cssGroupBorder(value) {
        this._cssGroupBorder = value;
    }
    get handler() {
        return this._handler;
    }
    set handler(value) {
        this._handler = value;
    }
    get details() {
        return this._details;
    }
    set details(value) {
        this._details = value;
    }
    get page() {
        return this._page;
    }
    set page(value) {
        this._page = value;
    }
    get form() {
        return this._form;
    }
    set form(value) {
        this._form = value;
    }
    get formHandler() {
        return this._formHandler;
    }
    set formHandler(value) {
        this._formHandler = value;
    }
    get url() {
        return this._url;
    }
    set url(value) {
        this._url = value;
    }
    get tooltip() {
        return this._tooltip;
    }
    set tooltip(value) {
        this._tooltip = value;
    }
    fromJson(modelElement) {
        super.fromJson(modelElement);
        // general attributes
        this.type = "button";
        this.setIcon(modelElement["icon"]);
        if (modelElement["color"] != null) {
            const color = modelElement["color"];
            if (typeof color === "object") {
                this._cssStyle = color;
            }
            else if (typeof color === "string") {
                if (ColorUtility.isPathDefaultColor(color)) {
                    this._cssClass = "tile-" + color;
                }
                else {
                    this._cssClass = color;
                }
            }
        }
        if (modelElement["form"] != null) {
            this.setForm(modelElement["form"]["form"]);
            this.setFormHandler(modelElement["form"]["handler"]);
        }
        this.setPage(modelElement["page"]);
        if (this.key == null && this.parentPageElement != null && modelElement.type === "button") {
            this.key = this.parentPageElement.key;
        }
        this.name = this.translationService.getText(modelElement["name"]);
        this.url = KeyUtility.translateUrl(modelElement["url"], null, false, this);
        if (modelElement["tooltip"] != null) {
            this.tooltip = this.translationService.getText(modelElement["tooltip"]);
        }
        // button details
        if (modelElement["details"] != null) {
            this.details = [];
            for (const detail of modelElement["details"]) {
                const bd = new ButtonDetail();
                bd.text = detail;
                this.details.push(bd);
            }
        }
        // button target
        this._cssButtonTarget = true;
        if (this.type === "button") {
            if (StringUtility.isEmpty(this.form) && StringUtility.isEmpty(this.page) && StringUtility.isEmpty(this.url)) {
                this._cssButtonTarget = false;
            }
        }
    }
}
//# sourceMappingURL=data:application/json;base64,