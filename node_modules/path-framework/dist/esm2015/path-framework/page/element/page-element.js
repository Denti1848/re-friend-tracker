import { KeyUtility } from "../../utility/key-utility";
export class PageElement {
    constructor(app) {
        this._visible = true;
        this._newRow = false;
        this._listElement = false;
        this._app = app;
    }
    static buildShortName(str) {
        if (str == null || str.length === 0) {
            return "";
        }
        if (str.length > 63) {
            return str.substr(0, 60) + "...";
        }
        return str;
    }
    getShortName() {
        return PageElement.buildShortName(this.name);
    }
    get app() {
        return this._app;
    }
    get name() {
        return this._name;
    }
    set name(value) {
        this._name = value;
    }
    get type() {
        return this._type;
    }
    set type(value) {
        this._type = value;
    }
    get id() {
        return this._id;
    }
    set id(value) {
        this._id = value;
    }
    get width() {
        return this._width;
    }
    set width(value) {
        this._width = value;
    }
    getKey() {
        return this._key;
    }
    get key() {
        return this._key;
    }
    set key(value) {
        this._key = value;
    }
    getParent() {
        return this.parentPageElement;
    }
    get visible() {
        return this._visible;
    }
    set visible(value) {
        this._visible = value;
    }
    get newRow() {
        return this._newRow;
    }
    set newRow(value) {
        this._newRow = value;
    }
    get parentPageElement() {
        return this._parentPageElement;
    }
    set parentPageElement(value) {
        this._parentPageElement = value;
    }
    get listElement() {
        return this._listElement;
    }
    set listElement(value) {
        this._listElement = value;
    }
    fromJson(modelElement) {
        this.visible = true;
        if (modelElement["id"] != null) {
            this.id = modelElement["id"];
        }
        if (modelElement["key"] != null) {
            const name = modelElement["key"]["name"];
            if (name && !modelElement["key"]["key"]) {
                this.key = KeyUtility.findKey(this.parentPageElement, name);
            }
            else {
                this.key = new Key(modelElement["key"]["key"], name);
            }
        }
        if (modelElement["visible"] != null) {
            this.visible = modelElement["visible"];
        }
        if (modelElement["newRow"] != null) {
            this.newRow = modelElement["newRow"];
        }
        if (modelElement["width"] != null) {
            this.width = modelElement["width"];
        }
        else {
            this.width = 1;
        }
    }
}
export class Key {
    constructor(key, name) {
        this._key = key;
        this._name = name;
    }
    getName() {
        return this._name;
    }
    set key(value) {
        this._key = value;
    }
    getKey() {
        return this._key;
    }
    set name(value) {
        this._name = value;
    }
    equals(otherKey) {
        if (otherKey != null &&
            otherKey.getName() &&
            otherKey.getKey() &&
            this.getName() &&
            this.getKey() &&
            otherKey.getName() === this.getName() &&
            otherKey.getKey() === this.getKey()) {
            return true;
        }
        return false;
    }
}
//# sourceMappingURL=data:application/json;base64,