import * as tslib_1 from "tslib";
import { Component, Input, Output } from "@angular/core";
import { PageElement } from "../page-element";
let ButtonGroupComponent = class ButtonGroupComponent {
};
tslib_1.__decorate([
    Input("buttonGroup"),
    Output("buttonGroup")
], ButtonGroupComponent.prototype, "buttonGroup", void 0);
ButtonGroupComponent = tslib_1.__decorate([
    Component({
        selector: "path-button-group",
        template: "<span>\r\n    <div *ngIf='buttonGroup.mobilePageBreak' class=\"tile-group tile-group-divider tile hide-on-desktop\"></div>\r\n    <div *ngIf='buttonGroup.visible' class=\"tile-group\">\r\n            <span *ngFor='let pageElement of buttonGroup.buttons'>\r\n            <!-- Button -->\r\n            <span *ngIf='pageElement.type == \"button\" || pageElement.type == \"newButton\"'>\r\n                <path-button [button]=\"pageElement\"></path-button>\r\n            </span>\r\n            <!-- Back Button -->\r\n            <span *ngIf='pageElement.type == \"backbutton\"'>\r\n                <path-back-button [button]=\"pageElement\"></path-back-button>\r\n            </span>\r\n            <!-- Delete Button -->\r\n            <span *ngIf='pageElement.type == \"deleteButton\"'>\r\n                <path-page-delete-button [button]=\"pageElement\"></path-page-delete-button>\r\n            </span>\r\n            <!-- Link Button (deprecated: DownloadButton -->\r\n            <span *ngIf='pageElement.type == \"linkButton\" || pageElement.type == \"downloadButton\"'>\r\n                <path-link-button [button]=\"pageElement\"></path-link-button>\r\n            </span>\r\n        </span>\r\n    </div>\r\n    <div *ngIf='buttonGroup.mobilePageBreak' class=\"tile-group tile-group-divider tile hide-on-desktop\"></div>\r\n</span>"
    })
], ButtonGroupComponent);
export { ButtonGroupComponent };
export class ButtonGroup extends PageElement {
    constructor(app) {
        super(app);
        this._buttons = [];
        this._mobilePageBreak = false;
    }
    get buttons() {
        return this._buttons;
    }
    get mobilePageBreak() {
        return this._mobilePageBreak;
    }
    addButton(button) {
        this._buttons.push(button);
        let length = 0;
        for (const currentButton of this.buttons) {
            length += (currentButton.width >= 2 ? 2 : 1);
        }
        this._mobilePageBreak = length > 1 && this.buttons.length >= 2;
    }
    updateButtonBorders() {
        if (this._buttons.length === 1) {
            // single button has no special border
            this._buttons[0].cssGroupBorder = "";
        }
        else {
            for (const button of this._buttons) {
                button.cssGroupBorder = "tile-grouped-middle";
            }
            if (this._buttons.length >= 1) {
                // set first and last button border
                this._buttons[0].cssGroupBorder = "tile-grouped-left";
                this._buttons[this._buttons.length - 1].cssGroupBorder = "tile-grouped-right";
            }
        }
    }
    fromJson(modelElement) {
        super.fromJson(modelElement);
        this.type = "buttonGroup";
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYnV0dG9uLWdyb3VwLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL3BhdGgtZnJhbWV3b3JrLyIsInNvdXJjZXMiOlsicGF0aC1mcmFtZXdvcmsvcGFnZS9lbGVtZW50L2J1dHRvbi1ncm91cC9idXR0b24tZ3JvdXAuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUMsU0FBUyxFQUFFLEtBQUssRUFBRSxNQUFNLEVBQUMsTUFBTSxlQUFlLENBQUM7QUFHdkQsT0FBTyxFQUFDLFdBQVcsRUFBQyxNQUFNLGlCQUFpQixDQUFDO0FBTTVDLElBQWEsb0JBQW9CLEdBQWpDLE1BQWEsb0JBQW9CO0NBSWhDLENBQUE7QUFERztJQUZDLEtBQUssQ0FBQyxhQUFhLENBQUM7SUFDcEIsTUFBTSxDQUFDLGFBQWEsQ0FBQzt5REFDRztBQUhoQixvQkFBb0I7SUFKaEMsU0FBUyxDQUFDO1FBQ1AsUUFBUSxFQUFFLG1CQUFtQjtRQUM3Qiw0MENBQTBDO0tBQzdDLENBQUM7R0FDVyxvQkFBb0IsQ0FJaEM7U0FKWSxvQkFBb0I7QUFNakMsTUFBTSxPQUFPLFdBQVksU0FBUSxXQUFXO0lBS3hDLFlBQVksR0FBYTtRQUNyQixLQUFLLENBQUMsR0FBRyxDQUFDLENBQUM7UUFKUCxhQUFRLEdBQWEsRUFBRSxDQUFDO1FBQ3hCLHFCQUFnQixHQUFHLEtBQUssQ0FBQztJQUlqQyxDQUFDO0lBRUQsSUFBSSxPQUFPO1FBQ1AsT0FBTyxJQUFJLENBQUMsUUFBUSxDQUFDO0lBQ3pCLENBQUM7SUFFRCxJQUFJLGVBQWU7UUFDZixPQUFPLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQztJQUNqQyxDQUFDO0lBRU0sU0FBUyxDQUFDLE1BQWM7UUFDM0IsSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7UUFDM0IsSUFBSSxNQUFNLEdBQUcsQ0FBQyxDQUFDO1FBQ2YsS0FBSyxNQUFNLGFBQWEsSUFBSSxJQUFJLENBQUMsT0FBTyxFQUFFO1lBQ3RDLE1BQU0sSUFBSSxDQUFDLGFBQWEsQ0FBQyxLQUFLLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1NBQ2hEO1FBQ0QsSUFBSSxDQUFDLGdCQUFnQixHQUFHLE1BQU0sR0FBRyxDQUFDLElBQUksSUFBSSxDQUFDLE9BQU8sQ0FBQyxNQUFNLElBQUksQ0FBQyxDQUFDO0lBQ25FLENBQUM7SUFFTSxtQkFBbUI7UUFDdEIsSUFBSSxJQUFJLENBQUMsUUFBUSxDQUFDLE1BQU0sS0FBSyxDQUFDLEVBQUU7WUFDNUIsc0NBQXNDO1lBQ3RDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUMsY0FBYyxHQUFHLEVBQUUsQ0FBQztTQUN4QzthQUFNO1lBQ0gsS0FBSyxNQUFNLE1BQU0sSUFBSSxJQUFJLENBQUMsUUFBUSxFQUFFO2dCQUNoQyxNQUFNLENBQUMsY0FBYyxHQUFHLHFCQUFxQixDQUFDO2FBQ2pEO1lBQ0QsSUFBSSxJQUFJLENBQUMsUUFBUSxDQUFDLE1BQU0sSUFBSSxDQUFDLEVBQUU7Z0JBQzNCLG1DQUFtQztnQkFDbkMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxjQUFjLEdBQUcsbUJBQW1CLENBQUM7Z0JBQ3RELElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDLENBQUMsY0FBYyxHQUFHLG9CQUFvQixDQUFDO2FBQ2pGO1NBQ0o7SUFDTCxDQUFDO0lBRU0sUUFBUSxDQUFDLFlBQVk7UUFDeEIsS0FBSyxDQUFDLFFBQVEsQ0FBQyxZQUFZLENBQUMsQ0FBQztRQUM3QixJQUFJLENBQUMsSUFBSSxHQUFHLGFBQWEsQ0FBQztJQUM5QixDQUFDO0NBRUoiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0NvbXBvbmVudCwgSW5wdXQsIE91dHB1dH0gZnJvbSBcIkBhbmd1bGFyL2NvcmVcIjtcclxuaW1wb3J0IHtJUGF0aEFwcH0gZnJvbSBcIi4uLy4uLy4uL3BhdGhpbnRlcmZhY2VcIjtcclxuaW1wb3J0IHtCdXR0b259IGZyb20gXCIuLi9idXR0b24vYnV0dG9uLmNvbXBvbmVudFwiO1xyXG5pbXBvcnQge1BhZ2VFbGVtZW50fSBmcm9tIFwiLi4vcGFnZS1lbGVtZW50XCI7XHJcblxyXG5AQ29tcG9uZW50KHtcclxuICAgIHNlbGVjdG9yOiBcInBhdGgtYnV0dG9uLWdyb3VwXCIsXHJcbiAgICB0ZW1wbGF0ZVVybDogXCJidXR0b24tZ3JvdXAuY29tcG9uZW50Lmh0bWxcIlxyXG59KVxyXG5leHBvcnQgY2xhc3MgQnV0dG9uR3JvdXBDb21wb25lbnQge1xyXG4gICAgQElucHV0KFwiYnV0dG9uR3JvdXBcIilcclxuICAgIEBPdXRwdXQoXCJidXR0b25Hcm91cFwiKVxyXG4gICAgYnV0dG9uR3JvdXA6IEJ1dHRvbkdyb3VwO1xyXG59XHJcblxyXG5leHBvcnQgY2xhc3MgQnV0dG9uR3JvdXAgZXh0ZW5kcyBQYWdlRWxlbWVudCB7XHJcblxyXG4gICAgcHJpdmF0ZSBfYnV0dG9uczogQnV0dG9uW10gPSBbXTtcclxuICAgIHByaXZhdGUgX21vYmlsZVBhZ2VCcmVhayA9IGZhbHNlO1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKGFwcDogSVBhdGhBcHApIHtcclxuICAgICAgICBzdXBlcihhcHApO1xyXG4gICAgfVxyXG5cclxuICAgIGdldCBidXR0b25zKCk6IEJ1dHRvbltdIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fYnV0dG9ucztcclxuICAgIH1cclxuXHJcbiAgICBnZXQgbW9iaWxlUGFnZUJyZWFrKCk6IGJvb2xlYW4ge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9tb2JpbGVQYWdlQnJlYWs7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGFkZEJ1dHRvbihidXR0b246IEJ1dHRvbik6IHZvaWQge1xyXG4gICAgICAgIHRoaXMuX2J1dHRvbnMucHVzaChidXR0b24pO1xyXG4gICAgICAgIGxldCBsZW5ndGggPSAwO1xyXG4gICAgICAgIGZvciAoY29uc3QgY3VycmVudEJ1dHRvbiBvZiB0aGlzLmJ1dHRvbnMpIHtcclxuICAgICAgICAgICAgbGVuZ3RoICs9IChjdXJyZW50QnV0dG9uLndpZHRoID49IDIgPyAyIDogMSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuX21vYmlsZVBhZ2VCcmVhayA9IGxlbmd0aCA+IDEgJiYgdGhpcy5idXR0b25zLmxlbmd0aCA+PSAyO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyB1cGRhdGVCdXR0b25Cb3JkZXJzKCk6IHZvaWQge1xyXG4gICAgICAgIGlmICh0aGlzLl9idXR0b25zLmxlbmd0aCA9PT0gMSkge1xyXG4gICAgICAgICAgICAvLyBzaW5nbGUgYnV0dG9uIGhhcyBubyBzcGVjaWFsIGJvcmRlclxyXG4gICAgICAgICAgICB0aGlzLl9idXR0b25zWzBdLmNzc0dyb3VwQm9yZGVyID0gXCJcIjtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBmb3IgKGNvbnN0IGJ1dHRvbiBvZiB0aGlzLl9idXR0b25zKSB7XHJcbiAgICAgICAgICAgICAgICBidXR0b24uY3NzR3JvdXBCb3JkZXIgPSBcInRpbGUtZ3JvdXBlZC1taWRkbGVcIjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAodGhpcy5fYnV0dG9ucy5sZW5ndGggPj0gMSkge1xyXG4gICAgICAgICAgICAgICAgLy8gc2V0IGZpcnN0IGFuZCBsYXN0IGJ1dHRvbiBib3JkZXJcclxuICAgICAgICAgICAgICAgIHRoaXMuX2J1dHRvbnNbMF0uY3NzR3JvdXBCb3JkZXIgPSBcInRpbGUtZ3JvdXBlZC1sZWZ0XCI7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9idXR0b25zW3RoaXMuX2J1dHRvbnMubGVuZ3RoIC0gMV0uY3NzR3JvdXBCb3JkZXIgPSBcInRpbGUtZ3JvdXBlZC1yaWdodFwiO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBmcm9tSnNvbihtb2RlbEVsZW1lbnQpIHtcclxuICAgICAgICBzdXBlci5mcm9tSnNvbihtb2RlbEVsZW1lbnQpO1xyXG4gICAgICAgIHRoaXMudHlwZSA9IFwiYnV0dG9uR3JvdXBcIjtcclxuICAgIH1cclxuXHJcbn1cclxuIl19