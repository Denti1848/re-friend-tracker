import * as tslib_1 from "tslib";
import { Component, Input, Output } from "@angular/core";
import { PageElement } from "../page-element";
import { KeyUtility } from "../../../utility/key-utility";
import { Button } from "../button/button.component";
import { FocusUtility } from "../../../form/focus-utility";
import { Subject } from "rxjs";
import { debounceTime } from "rxjs/operators";
let ListComponent = class ListComponent {
    ngAfterViewInit() {
        FocusUtility.focusFirstField(null);
    }
};
tslib_1.__decorate([
    Input("list"),
    Output("list")
], ListComponent.prototype, "list", void 0);
ListComponent = tslib_1.__decorate([
    Component({
        selector: "path-list",
        template: "<!-- search on mobile devices -->\r\n<div *ngIf='list.search' class=\"search-mobile hide-on-desktop\">\r\n    <div class=\"row\">\r\n        <label for=\"search-mobile\">Search</label>\r\n        <input id=\"search-mobile\" name=\"search\" [(ngModel)]=\"list.searchText\" placeholder=\"{{list.searchInputLabel}}\" (ngModelChange)='list.filterChanged($event)' class=\"form-control\" type=\"text\">\r\n    </div>\r\n</div>\r\n<span>\r\n    <span>\r\n        <div class=\"tile-group\">\r\n            <!-- default search (tablet, desktop) -->\r\n            <div *ngIf='list.search' class=\"thumbnail {{(list.searchButton.width <= 1 ? 'tile-medium' : (list.searchButton.width == 2 ? 'tile-wide' : (list.searchButton.width == 3 ? 'tile-wide-3' : (list.searchButton.width >= 4 ? 'tile-wide-4' : ''))))}} tile tile-button hide-on-mobile {{list.searchButton.cssClass}}\" [ngStyle]=\"list.searchButton.cssStyle\">\r\n                <div class=\"input-group input-group-sm\">\r\n                    <div class=\"h3\">{{list.searchLabel}}</div>\r\n                    <i class=\"fa fa-2x fa-search\"></i>\r\n                    <div class=\"h5\"></div>\r\n                    <form>\r\n                        <input name=\"search\" [(ngModel)]=\"list.searchText\" placeholder=\"{{list.searchInputLabel}}\" (ngModelChange)='list.filterChanged($event)' class=\"form-control\" type=\"text\">\r\n                    </form>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </span>\r\n    <!-- list -->\r\n    <span *ngFor='let buttonGroup of list.buttonGroups; let i = index'>\r\n        <path-button-group [buttonGroup]=\"buttonGroup\"></path-button-group>\r\n    </span>\r\n</span>"
    })
], ListComponent);
export { ListComponent };
export class List extends PageElement {
    constructor(app, pathService, translationService) {
        super(app);
        this.pathService = pathService;
        this.translationService = translationService;
        this._buttonGroups = [];
        this._searchTextChanged = new Subject();
        this._searchLabel = translationService.getText("Search");
        this._searchInputLabel = translationService.getText("SearchInputLabel");
        this._searchButton = new Button(app, pathService, translationService);
    }
    getContent() {
        const buttons = [];
        for (const buttonGroup of this.buttonGroups) {
            buttons.push(...buttonGroup.buttons);
        }
        return buttons;
    }
    refresh(searchText, afterRefreshHandler) {
        // callback function for data
        console.log("refresh list (searchText: " + searchText + ")");
        const dataHandler = (data) => {
            this.buttonGroups = [];
            for (const item of data) {
                // create button group and buttons
                // set default types if server does not set type (button or buttonGroup)
                const itemIsButtonGroup = item.hasOwnProperty("buttons");
                if (itemIsButtonGroup) {
                    item["type"] = "buttonGroup";
                    for (const button of item.buttons) {
                        if (button["type"] == null) {
                            button["type"] = "button";
                        }
                    }
                }
                else {
                    if (item["type"] == null) {
                        item["type"] = "button";
                    }
                }
                const pageElements = this.app.createPageElement(item, this.parentPageElement, null);
                if (pageElements.length !== 1) {
                    console.log("error creating button group from: ");
                    console.log(item);
                }
                else {
                    const buttonGroup = pageElements[0];
                    let buttonCounter = 0;
                    for (const button of buttonGroup.buttons) {
                        button.listElement = true;
                        // model is either simple button or button of a group
                        let buttonModel = item;
                        if (itemIsButtonGroup) {
                            buttonModel = item.buttons[buttonCounter];
                        }
                        // build button from json
                        // use list defaults if button does not specify model
                        if (buttonModel["icon"] == null) {
                            buttonModel["icon"] = this.icon;
                        }
                        if (buttonModel["color"] == null) {
                            buttonModel["color"] = this.color;
                        }
                        if (buttonModel["page"] == null && (buttonModel["form"] == null || buttonModel["form"]["form"] == null)) {
                            // service does not return page or form, use static model
                            if (this.page != null) {
                                buttonModel["page"] = this.page;
                            }
                            if (this.form != null) {
                                buttonModel["form"] = {};
                                buttonModel.form["form"] = this.form;
                                buttonModel.form["handler"] = this.formHandler;
                            }
                        }
                        // special default width (2 instead of 1) for buttons in list
                        if (buttonModel["width"] == null) {
                            buttonModel["width"] = this.width;
                        }
                        button.fromJson(buttonModel);
                        // special values for list buttons
                        button.handler = this._buttonHandler;
                        button.name = buttonModel.name; // no translation
                        button.tooltip = buttonModel.tooltip; // no translation
                        buttonCounter++;
                    }
                    this.buttonGroups.push(buttonGroup);
                }
            }
            if (this.handler != null) {
                this.handler.doLoad(this); // TODO useful?
            }
            // refresh search
            this.filterVisibleButtonGroups();
            if (this.limit) {
                this.setSearchResultsCountMessage();
            }
            if (afterRefreshHandler != null) {
                window.setTimeout(() => {
                    afterRefreshHandler();
                }, 1);
            }
        };
        const listHandlerDoLoad = (list) => (data) => dataHandler(data);
        // backend data
        if (this._url != null) {
            let urlParameters = "";
            if (this.searchRequest || this.limit) {
                urlParameters = "?search=" + (searchText == null ? "" : encodeURI(searchText)) + "&limit=" + this.limit;
            }
            this.pathService.serverGet(this.app.getBackendUrl(), this.url + urlParameters, listHandlerDoLoad(this), null);
        }
        // mock data
        if (this._mockData != null) {
            let count = 0;
            // fake a key for mock data
            for (const mock of this.mockData) {
                count++;
                if (mock["key"] == null) {
                    mock["key"] = count;
                }
            }
            dataHandler(this.mockData);
        }
    }
    filterChanged(text) {
        this._searchTextChanged.next(text);
    }
    filter() {
        this._searchLabel = this.translationService.getText("Search");
        if (this._searchText && this._searchText === "*") {
            this.refresh(null, null);
        }
        else if (this.searchRequest) {
            // call server to filter data
            if (!this._searchText && this.searchRequired) {
                this._buttonGroups = [];
            }
            else if (this._searchText === "*" || (!this._searchText && !this.searchRequired)) {
                this.refresh(null, null);
            }
            else if (this._searchText && this._searchText.length >= 2) {
                this.refresh(this._searchText, null);
            }
            else {
                this._searchLabel = this.translationService.getText("SearchTextTooShort");
                this._buttonGroups = [];
            }
        }
        else {
            // filter loaded data only
            this.filterVisibleButtonGroups();
        }
    }
    filterVisibleButtonGroups() {
        const searchText = this._searchText ? this._searchText.toLowerCase() : "";
        for (const buttonGroup of this._buttonGroups) {
            if (searchText.length <= 0) {
                buttonGroup.visible = true;
            }
            else {
                buttonGroup.visible = false;
                for (const button of buttonGroup.buttons) {
                    if (!buttonGroup.visible) {
                        buttonGroup.visible = button.name.toLowerCase().indexOf(searchText) !== -1;
                        if (!buttonGroup.visible) {
                            for (const detail of button.details) {
                                if (detail.text.toLowerCase().indexOf(searchText) !== -1) {
                                    buttonGroup.visible = true;
                                    break;
                                }
                            }
                        }
                    }
                }
            }
        }
        if (this.visibleItemSize() !== this.buttonGroups.length) {
            this.setSearchResultsCountMessage();
        }
    }
    setSearchResultsCountMessage() {
        this._searchLabel = this.visibleItemSize() + " " +
            (this.visibleItemSize() === 1 ? this.translationService.getText("Result") : this.translationService.getText("Results"));
    }
    visibleItemSize() {
        let result = 0;
        for (const buttonGroup of this.buttonGroups) {
            if (buttonGroup.visible) {
                for (const button of buttonGroup.buttons) {
                    if (button.visible) {
                        result++;
                        break;
                    }
                }
            }
        }
        return result;
    }
    get buttonGroups() {
        return this._buttonGroups;
    }
    set buttonGroups(value) {
        this._buttonGroups = value;
    }
    get search() {
        return this._search;
    }
    set search(value) {
        this._search = value;
    }
    get handler() {
        return this._handler;
    }
    set handler(value) {
        this._handler = value;
    }
    get buttonHandler() {
        return this._buttonHandler;
    }
    set buttonHandler(value) {
        this._buttonHandler = value;
    }
    get icon() {
        return this._icon;
    }
    set icon(value) {
        this._icon = value;
    }
    get color() {
        return this._color;
    }
    set color(value) {
        this._color = value;
    }
    get form() {
        return this._form;
    }
    set form(value) {
        this._form = value;
    }
    get formHandler() {
        return this._formHandler;
    }
    set formHandler(value) {
        this._formHandler = value;
    }
    get page() {
        return this._page;
    }
    set page(value) {
        this._page = value;
    }
    get mockData() {
        return this._mockData;
    }
    set mockData(value) {
        this._mockData = value;
    }
    get url() {
        return this._url;
    }
    set url(value) {
        this._url = value;
    }
    get limit() {
        return this._limit;
    }
    set limit(value) {
        this._limit = value;
    }
    get searchRequired() {
        return this._searchRequired;
    }
    get searchRequest() {
        return this._searchRequest;
    }
    get searchText() {
        return this._searchText;
    }
    get searchLabel() {
        return this._searchLabel;
    }
    get searchInputLabel() {
        return this._searchInputLabel;
    }
    set searchLabel(value) {
        this._searchLabel = value;
    }
    set searchInputLabel(value) {
        this._searchInputLabel = value;
    }
    set searchText(value) {
        this._searchText = value;
    }
    get searchButton() {
        return this._searchButton;
    }
    fromJson(modelElement) {
        super.fromJson(modelElement);
        if (modelElement["search"] != null) {
            this.search = modelElement["search"];
        }
        if (modelElement["searchRequired"] != null) {
            this._searchRequired = modelElement["searchRequired"];
        }
        if (modelElement["searchRequest"] != null) {
            this._searchRequest = modelElement["searchRequest"];
        }
        if (modelElement["limit"] != null) {
            this.limit = modelElement["limit"];
        }
        // verify valid search combinations
        if (!this.search && this.searchRequired) {
            console.log("Configuration Error: search=false requires searchRequired=false");
            this._searchRequired = false;
        }
        if (this.searchRequired && !this.searchRequest) {
            console.log("Configuration Error: searchRequired=true requires searchRequest=true");
            this._searchRequest = true;
        }
        // other model attributes
        if (modelElement["color"] != null) {
            this.color = modelElement["color"];
        }
        if (modelElement["form"] != null) {
            this.form = modelElement["form"]["form"];
            this.formHandler = modelElement["form"]["handler"];
        }
        if (modelElement["page"] != null) {
            this.page = modelElement["page"];
        }
        if (modelElement["icon"] != null) {
            this.icon = modelElement["icon"];
        }
        if (modelElement["data"] != null) {
            this.mockData = modelElement["data"];
        }
        if (modelElement["name"] != null) {
            this.name = this.translationService.getText(modelElement["name"]);
        }
        if (modelElement["url"] != null) {
            const urlString = modelElement["url"];
            this.url = KeyUtility.translateUrl(urlString, null, false, this);
        }
        // override from PageElement
        if (modelElement["width"] != null) {
            this.width = modelElement["width"];
        }
        else {
            this.width = 2; // special default for list
        }
        // search button
        const searchButtonModel = {};
        searchButtonModel["color"] = modelElement["searchColor"] != null ? modelElement["searchColor"] : "tile-search";
        searchButtonModel["width"] = modelElement["searchWidth"] != null ? modelElement["searchWidth"] : this.width;
        this._searchButton.fromJson(searchButtonModel);
        // delay for search field
        const debounceTimeValue = this.searchRequest ? 300 : 30;
        this._searchTextChanged.pipe(debounceTime(debounceTimeValue)) // wait after the last event before emitting last event
            .subscribe(_searchText => {
            this._searchText = _searchText;
            this.filter();
        });
    }
}
//# sourceMappingURL=data:application/json;base64,