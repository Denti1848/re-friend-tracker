import { AutoCompleteFieldEntry } from "./form/field/auto-complete/auto-complete-field-entry";
import { AutoCompleteField } from "./form/field/auto-complete/auto-complete-field.component";
import { CancelButton } from "./form/field/button/cancel-button";
import { FormDeleteButton } from "./form/field/button/form-delete-button";
import { OkButton } from "./form/field/button/ok-button";
import { PreviousButton } from "./form/field/button/previous-button";
import { CheckboxGroupField } from "./form/field/checkbox/checkbox-group.component";
import { DateField } from "./form/field/date/date-field.component";
import { FieldListField } from "./form/field/fieldList/field-list-field.component";
import { FileUploadField } from "./form/field/file-upload/file-upload.component";
import { FormField } from "./form/field/form-field";
import { LabelField } from "./form/field/label/label-field.component";
import { NumberField } from "./form/field/number/number-field.component";
import { ProgressBarField } from "./form/field/progress-bar/progress-bar.component";
import { Radio } from "./form/field/radio/radio";
import { RadioGroupField } from "./form/field/radio/radio-group.component";
import { TextField } from "./form/field/text/text-field.component";
import { TranslationField } from "./form/field/translation/translation-field.component";
import { ValueField } from "./form/field/value-field";
import { FormFunction } from "./form/form-function";
import { Form } from "./form/form.component";
import { ButtonGroup } from "./page/element/button-group/button-group.component";
import { BackButton } from "./page/element/button/back-button.component";
import { Button } from "./page/element/button/button.component";
import { LinkButton } from "./page/element/button/link-button.component";
import { PageDeleteButton } from "./page/element/button/page-delete-button.component";
import { ChartElement } from "./page/element/chart/chart.component";
import { CustomContainerPageElement } from "./page/element/custom/custom-container-page-element";
import { ElementList } from "./page/element/element-list/element-list.component";
import { InlineForm } from "./page/element/inline-form/inline-form";
import { PageLabel } from "./page/element/label/page-label.component";
import { List } from "./page/element/list/list.component";
import { Key, PageElement } from "./page/element/page-element";
import { Page } from "./page/page";
import { KeyUtility } from "./utility/key-utility";
import { Breadcrumb } from "./page/element/breadcrumb/breadcrumb.component";
export class PathAppComponent {
    constructor(pathService, translationService) {
        this.pathService = pathService;
        this.translationService = translationService;
        this._pageStack = [];
        this._formStack = [];
        this._texts = [];
        /* toggle navigation
        inspired by: https://angularfirebase.com/lessons/bootstrap-4-collapsable-navbar-work-with-angular */
        this.show = false;
        if (this.getBackendUrl() && this.getBackendUrl().length > 0) {
            this.pathService.serverGet(this.getBackendUrl(), "/ping", (data) => {
                let backendVersion = data["version"];
                if (backendVersion !== this.getFrontendVersion()) {
                    backendVersion = "Version mismatch: Backend (" + backendVersion + "), Frontend (" + this.getFrontendVersion() + "). " +
                        "Please clear cache or check server installation.";
                    window.alert(backendVersion);
                }
                this._version = backendVersion;
                if (data["userId"] !== null && data["userId"] !== "") {
                    this._userId = data["userId"];
                    this.setCurrentPage(this.getStartPage(), null);
                }
                if (data["languageCode"] !== null && data["languageCode"] !== "") {
                    sessionStorage.setItem("languageCode", data["languageCode"]);
                }
            }, (err) => {
                console.error(err);
            });
        }
        this.loadApplicationTexts();
    }
    getApplicationLogo() {
        return null;
    }
    isLoading() {
        return this.pathService.isLoading();
    }
    loadApplicationTexts() {
        this._texts["Logout"] = this.translationService.getText("Logout");
        this._texts["NotSignedIn"] = this.translationService.getText("NotSignedIn");
        this._texts["SignedInAs"] = this.translationService.getText("SignedInAs");
    }
    getUserId() {
        return this._userId;
    }
    login(event, userId, password) {
        const credentials = {};
        credentials["username"] = userId;
        credentials["password"] = password;
        this.pathService.serverPost(this.getBackendUrl(), "/login", credentials, (data) => {
            console.log("login ok, language code: " + data["languageCode"] + ", jwt:" + data["jwt"]);
            sessionStorage.setItem("languageCode", data["languageCode"]);
            this._userId = userId;
            this.loadApplicationTexts();
            this.setCurrentPage(this.getStartPage(), null); // set start page
        }, (err) => {
            this.pathService.hideLoading();
            alert("Login failed.");
            console.error("failed login");
        });
    }
    logout() {
        sessionStorage.clear();
        console.log("logout user " + this._userId);
        this._userId = null;
        location.reload();
    }
    showUserForm() {
        this.setCurrentForm(this.getOwnUserForm(), new Key(0, "userId"), null, null); // TODO set correct key
    }
    closeCurrentForm() {
        this._formStack.pop();
    }
    refreshCurrentPage() {
        const pageStack = this._pageStack;
        const afterRefreshHandler = () => {
            // refresh all breadcrumb texts
            for (let k = 1; k < pageStack.length; k++) {
                const page = pageStack[k];
                // only if page name is derived from parent button
                if (page.parentPageElement && page.parentPageElement.getKey()) {
                    const parentPage = pageStack[k - 1]; // the parent page contains a button that defines the page name
                    for (const element of parentPage.content) {
                        // search all lists of parent page
                        if (element instanceof List) {
                            const list = element;
                            // check if all buttons have unique keys
                            const keys = new Set();
                            let buttonCount = 0;
                            for (const button of list.getContent()) {
                                buttonCount++;
                                keys.add(button.getKey().getName() + "-" + button.getKey().getKey());
                                if (keys.size !== buttonCount) {
                                    break;
                                }
                            }
                            // only update page name if list has unique keys
                            if (keys.size === buttonCount) {
                                for (const button of list.getContent()) {
                                    // compare key value and name and update page name
                                    if (page.parentPageElement.getKey().getKey() === button.getKey().getKey() &&
                                        page.parentPageElement.getKey().getName() === button.getKey().getName()) {
                                        page.name = PageElement.buildShortName(button.getName());
                                        break;
                                    }
                                }
                            }
                        }
                    }
                }
            }
        };
        this.refreshPageStack(this._pageStack.length - 1, false, afterRefreshHandler);
    }
    refreshPageStack(index, clearSearch, afterRefreshHandler) {
        let refresh;
        if (this._pageStack[index].id === this.getStartPage() && clearSearch) {
            // refresh clean, without search text
            refresh = (element) => {
                const list = element;
                list.filterChanged(null);
                list.refresh(null, afterRefreshHandler);
            };
        }
        else {
            // refresh with search text
            refresh = (element) => {
                const list = element;
                list.refresh(list.searchText, afterRefreshHandler);
            };
        }
        let pageHasList = false;
        for (const element of this._pageStack[index].content) {
            if (element instanceof List) {
                refresh(element);
                pageHasList = true;
            }
        }
        if (!pageHasList && afterRefreshHandler) {
            afterRefreshHandler();
        }
        // breadcrumbs
        for (let k = index - 1; k > 0; k--) {
            const currentPage = this._pageStack[k];
            if (currentPage) {
                for (const element of currentPage.content) {
                    if (element instanceof List) {
                        refresh(element);
                    }
                }
            }
        }
    }
    navigateBack(clearSearch = false) {
        const currentPageLength = this._pageStack.length;
        const afterRefreshHandler = () => {
            if (this._pageStack.length === currentPageLength) {
                this._pageStack.pop();
            }
        };
        this.refreshPageStack(this._pageStack.length - 2, clearSearch, afterRefreshHandler);
    }
    navigateToPage(pageNumber) {
        for (let k = this._pageStack.length - 1; k > pageNumber + 1; k--) {
            this._pageStack.pop();
        }
        this.navigateBack(true);
    }
    yesNo(text, yesHandler, noHandler) {
        const form = new Form(this.pathService, this);
        form.formFunction = new FormFunction();
        form.formFunction.save = (data) => {
            this.closeCurrentForm();
            this.refreshCurrentPage();
        };
        form.formFunction.cancel = () => {
            this.closeCurrentForm();
        };
        const message = new TextField(form, this.translationService);
        message.type = "label";
        message.visible = true;
        message.labelVisible = false;
        message.setValue(text);
        form.fields.push(message);
        const cancelButton = new CancelButton(form, this.translationService);
        cancelButton.type = "cancelButton";
        cancelButton.name = this.translationService.getText("Cancel");
        cancelButton.visible = true;
        form.fields.push(cancelButton);
        const okButton = new OkButton(form, this.translationService);
        okButton.type = "okButton";
        okButton.name = this.translationService.getText("Ok");
        okButton.visible = true;
        okButton.handler = {
            doClick(button) {
                yesHandler();
            }
        };
        form.fields.push(okButton);
        form.updateRows();
        this._formStack.push(form);
    }
    getCustomComponentClass(componentType) {
        console.log("Please define a type mapping for " + componentType + " in your App-Component.");
        return null;
    }
    setCurrentPage(pageId, parentPageElement) {
        let page = null;
        for (const modelPage of this.getGuiModel().application.pageList) {
            if (modelPage.id === pageId) {
                page = new Page(parentPageElement);
                page.id = pageId;
                page.name = this.translationService.getText(modelPage.name);
                if (parentPageElement != null) {
                    page.name = parentPageElement.name;
                }
                for (const modelElement of modelPage.elementList) {
                    this.createPageElement(modelElement, parentPageElement, page);
                }
            }
        }
        if (page == null && pageId != null) {
            this.pathService.addAlert("Missing page", pageId);
        }
        else {
            this._pageStack.push(page);
        }
    }
    createPageElement(modelElement, parentPageElement, page) {
        const elements = [];
        switch (modelElement.type) {
            case "button":
            case "newButton":
                const button = new Button(this, this.pathService, this.translationService);
                button.parentPageElement = parentPageElement;
                button.fromJson(modelElement);
                if (modelElement["buttonhandler"] != null) {
                    button.handler = new (this.getHandlers()[modelElement["buttonhandler"]]);
                }
                elements.push(this.wrapSingleButton(button));
                break;
            case "deleteButton":
                const deleteButton = new PageDeleteButton(this, this.pathService, this.translationService);
                deleteButton.parentPageElement = parentPageElement;
                deleteButton.fromJson(modelElement);
                elements.push(this.wrapSingleButton(deleteButton));
                break;
            case "downloadButton": // deprecated
            case "linkButton":
                const linkButton = new LinkButton(this, this.pathService, this.translationService);
                linkButton.parentPageElement = parentPageElement;
                linkButton.fromJson(modelElement);
                elements.push(this.wrapSingleButton(linkButton));
                break;
            case "backbutton":
                const backButton = new BackButton(this, this.pathService, this.translationService);
                backButton.fromJson(modelElement);
                elements.push(this.wrapSingleButton(backButton));
                break;
            case "inlineForm":
                const inlineForm = new InlineForm(this, this.pathService, this.translationService);
                inlineForm.fromJson(modelElement);
                inlineForm.url = KeyUtility.translateUrl(modelElement["url"], inlineForm.getKey(), true, parentPageElement);
                inlineForm.loadNextForm(true);
                elements.push(inlineForm);
                break;
            case "list":
                const dynamicList = new List(this, this.pathService, this.translationService);
                dynamicList.parentPageElement = parentPageElement;
                dynamicList.fromJson(modelElement);
                // handler
                if (modelElement["handler"] != null) {
                    dynamicList.handler = new (this.getHandlers()[modelElement["handler"]]);
                }
                if (modelElement["buttonhandler"] != null) {
                    dynamicList.buttonHandler = new (this.getHandlers()[modelElement["buttonhandler"]]);
                }
                if (!dynamicList.searchRequired) {
                    dynamicList.refresh(null, null);
                }
                elements.push(dynamicList);
                break;
            case "ChartElement":
                const chart = new ChartElement(this, this.pathService, this.translationService);
                chart.fromJson(modelElement);
                chart.url = KeyUtility.translateUrl(modelElement["url"], null, false, parentPageElement);
                elements.push(chart);
                break;
            case "pageLabel":
                const pageLabel = new PageLabel(this, this.pathService, this.translationService);
                pageLabel.fromJson(modelElement);
                elements.push(pageLabel);
                break;
            case "elementList":
                const elementList = new ElementList(this, this.pathService, this.translationService);
                elementList.fromJson(modelElement);
                const elementListUrl = KeyUtility.translateUrl(modelElement["url"], null, false, parentPageElement);
                this.pathService.serverGet(this.getBackendUrl(), elementListUrl, (data) => {
                    for (const dynamicElement of data) {
                        elements.push(...this.createPageElement(dynamicElement, parentPageElement, page));
                    }
                }, null);
                elements.push(elementList);
                break;
            case "buttonGroup":
                const buttonGroup = new ButtonGroup(this);
                buttonGroup.fromJson(modelElement);
                if (modelElement["buttons"]) {
                    for (const buttonItem of modelElement["buttons"]) {
                        const buttonGroups = this.createPageElement(buttonItem, parentPageElement, null);
                        if (buttonGroups.length > 0) {
                            for (const item of buttonGroups[0].buttons) {
                                buttonGroup.addButton(item);
                            }
                        }
                    }
                    buttonGroup.updateButtonBorders();
                }
                elements.push(buttonGroup);
                break;
            case "breadcrumb":
                const breadcrumb = new Breadcrumb(this);
                breadcrumb.fromJson(modelElement);
                elements.push(breadcrumb);
                break;
            default: {
                // call method to get custom component class
                const customContainerPageElement = new CustomContainerPageElement(this);
                customContainerPageElement.fromJson(modelElement);
                customContainerPageElement.typeClass = this.getCustomComponentClass(modelElement.type);
                elements.push(customContainerPageElement);
            }
        }
        for (const element of elements) {
            if (modelElement["permissionUrl"] != null) {
                element.visible = false;
                const permissionUrl = KeyUtility.translateUrl(modelElement["permissionUrl"], null, false, parentPageElement);
                const permissionHandler = (permissionElement) => (data) => {
                    permissionElement.visible = data["permission"];
                };
                this.pathService.serverGet(this.getBackendUrl(), permissionUrl, permissionHandler(element), null);
            }
            if (!element.type) {
                element.type = modelElement.type;
            }
            element.parentPageElement = parentPageElement;
        }
        if (page && elements) {
            page.content.push(...elements);
            page.updateRows();
        }
        return elements;
    }
    wrapSingleButton(button) {
        const buttonGroup = new ButtonGroup(this);
        buttonGroup.type = "buttonGroup";
        buttonGroup.addButton(button);
        buttonGroup.updateButtonBorders();
        buttonGroup.newRow = button.newRow;
        return buttonGroup;
    }
    setCurrentForm(formId, key, handler, parentPageElement) {
        const setCurrentForm = () => {
            // build form function
            const formFunction = new FormFunction();
            formFunction.save = () => {
                this.closeCurrentForm();
                this.refreshCurrentPage();
            };
            formFunction.cancel = () => {
                this.closeCurrentForm();
            };
            formFunction.delete = () => {
                this.closeCurrentForm();
                const parent = parentPageElement;
                if (parent != null && parent instanceof PageElement && parent.listElement) {
                    this.refreshCurrentPage();
                }
                else {
                    this.navigateBack();
                    this.refreshCurrentPage();
                }
            };
            const form = this.createForm(formId, key, handler, formFunction, parentPageElement);
            if (form != null) {
                this._formStack.push(form);
            }
        };
        // check permission
        const modelForm = this.getModelForm(formId);
        if (modelForm != null && modelForm["permissionUrl"] != null) {
            let suffix = "/update";
            if (key == null) {
                suffix = "/create";
            }
            const permissionUrl = KeyUtility.translateUrl(modelForm["permissionUrl"] + suffix, key, false, parentPageElement);
            this.pathService.serverGet(this.getBackendUrl(), permissionUrl, (data) => {
                if (!data["permission"]) {
                    window.alert(this.translationService.getText("NoPermissionError"));
                }
                else {
                    setCurrentForm();
                }
            }, null);
        }
        else {
            setCurrentForm();
        }
    }
    getModelForm(formId) {
        let result = null;
        for (const modelForm of this.getGuiModel().application.formList) {
            if (modelForm.id === formId) {
                result = modelForm;
            }
        }
        if (result == null && formId != null) {
            this.pathService.addAlert("Missing form", formId);
        }
        return result;
    }
    createForm(formId, key, handler, formFunction, parentPageElement) {
        let form = null;
        const modelForm = this.getModelForm(formId);
        if (modelForm != null) {
            // create form
            form = new Form(this.pathService, this);
            form.fromJson(modelForm);
            form.key = key;
            form.formFunction = formFunction;
            form.title = this.translationService.getText(modelForm.title);
            for (const modelFormField of modelForm.formFieldList) {
                // create form field
                const formField = this.createFormField(modelFormField, form, parentPageElement);
                form.fields.push(formField);
            }
            form.updateRows();
            // fetch data from backend
            if (form.url && form.key) {
                // button set a key on form, update mode, ignore urlDefaults
                this.populateForm(form, form.getKey(), parentPageElement);
            }
            else if (form.urlDefaults) {
                // no key, create mode
                const nullKey = new Key("null", "nullKey");
                this.populateForm(form, nullKey, parentPageElement);
            }
            if (form.url) {
                form.url = KeyUtility.translateUrl(form.url, key, true, parentPageElement);
            }
            // execute handler
            let handlerName = handler;
            if (handlerName == null) {
                handlerName = formId + "Handler";
            }
            if (this.getBeans()[formId] != null && this.getHandlers()[handlerName] != null) {
                const formBean = new (this.getBeans()[formId]);
                const formHandler = new (this.getHandlers()[handlerName]);
                for (let a = 0; a < form.fields.length; a++) {
                    if (form.fields[a].id != null) {
                        formBean[form.fields[a].id] = form.fields[a];
                    }
                }
                form.bean = formBean;
                formHandler.doLoad(form.bean);
                form.handler = formHandler;
            }
        }
        return form;
    }
    populateForm(form, key, parentPageElement) {
        const url = KeyUtility.translateUrl(form.url, key, true, parentPageElement);
        this.pathService.serverGet(this.getBackendUrl(), url, (data) => {
            for (const field of form.fields) {
                if (data[field.id] != null && field instanceof ValueField) {
                    if (field instanceof RadioGroupField) {
                        // TODO general solution
                        const setValueOfRadioGroupFieldContextWrapper = () => {
                            const f = field;
                            const v = data[field.id];
                            //noinspection TypeScriptUnresolvedFunction
                            setValueOfRadioGroupField(f, v);
                        };
                        const setValueOfRadioGroupField = (radioGroupField, value) => {
                            if (!radioGroupField.created) {
                                console.log("Waiting for RadioGroupField " + radioGroupField.id);
                                console.log(radioGroupField.created);
                                window.setTimeout(setValueOfRadioGroupFieldContextWrapper, 50); // wait then try again
                                return;
                            }
                            console.log("setting radiogroupfield value");
                            if (value != null) {
                                value = value.toString(); // force radio key type string for angular2
                            }
                            radioGroupField.setValue(value);
                            radioGroupField.isInitialValueSet = true;
                        };
                        setValueOfRadioGroupFieldContextWrapper();
                    }
                    else {
                        field.setValue(data[field.id]);
                        field.isInitialValueSet = true;
                    }
                }
                if (field instanceof FieldListField) {
                    const setValueOfFieldListFieldContextWrapper = () => {
                        const f = field;
                        const d = data;
                        //noinspection TypeScriptUnresolvedFunction
                        setValueOfFieldListField(f, d);
                    };
                    const setValueOfFieldListField = (fieldListField, value) => {
                        if (!field.created) {
                            console.log("Waiting for FieldListField... ");
                            setTimeout(setValueOfFieldListFieldContextWrapper, 50); // wait then try again
                            return;
                        }
                        // update fields
                        for (const subfield of field.subfields) {
                            if (data[subfield.id] != null) {
                                subfield.setValue(data[subfield.id]);
                                subfield.isInitialValueSet = true;
                            }
                        }
                    };
                    setValueOfFieldListFieldContextWrapper();
                }
            }
        }, null);
    }
    createFormField(modelFormField, form, parentPageElement) {
        let formField = null;
        switch (modelFormField.type) {
            case "text": {
                formField = new TextField(form, this.translationService);
                formField.fromJson(modelFormField);
                break;
            }
            case "translation": {
                formField = new TranslationField(form, this.pathService, this.translationService);
                formField.fromJson(modelFormField);
                break;
            }
            case "number": {
                formField = new NumberField(form, this.translationService);
                formField.fromJson(modelFormField);
                break;
            }
            case "label": {
                formField = new LabelField(form, this.translationService);
                formField.fromJson(modelFormField);
                break;
            }
            case "fieldList": {
                formField = new FieldListField(form, this.translationService);
                formField.name = "list";
                formField.fromJson(modelFormField);
                if (modelFormField["url"] != null) {
                    const fieldListUrl = KeyUtility.translateUrl(modelFormField["url"], form.getKey(), false, parentPageElement);
                    const modelId = modelFormField["id"];
                    this.pathService.serverGet(this.getBackendUrl(), fieldListUrl, (data) => {
                        let counter = 1;
                        for (const item of data) {
                            const dynamicField = this.createFormField(item, form, parentPageElement);
                            dynamicField.name = item["name"]; // do not use translation service
                            dynamicField.id = modelId + counter;
                            formField.subfields.push(dynamicField);
                            counter++;
                        }
                        form.updateRows();
                        formField.created = true;
                    }, null);
                }
                break;
            }
            case "date": {
                formField = new DateField(form, this.translationService);
                formField.fromJson(modelFormField);
                break;
            }
            case "autocomplete": {
                const autoCompleteFormField = new AutoCompleteField(form, this.translationService, this.pathService);
                autoCompleteFormField.detailForm = modelFormField["form"];
                autoCompleteFormField.wordSearchEnabled = modelFormField["wordSearchEnabled"];
                if (modelFormField["data"] != null) {
                    const data = [];
                    let k = 0;
                    for (const item of modelFormField["data"]) {
                        const entry = new AutoCompleteFieldEntry();
                        entry.text = item;
                        entry.key = k;
                        data.push(entry);
                        k++;
                    }
                    autoCompleteFormField.data = data;
                    autoCompleteFormField.dataLoaded = true;
                }
                else if (modelFormField["url"] != null) {
                    const autoCompleteFormFieldUrl = KeyUtility.translateUrl(modelFormField["url"], form.key, false, parentPageElement);
                    autoCompleteFormField.url = autoCompleteFormFieldUrl;
                    autoCompleteFormField.load();
                }
                else {
                    autoCompleteFormField.dataLoaded = true;
                }
                formField = autoCompleteFormField;
                formField.fromJson(modelFormField);
                break;
            }
            case "RadioGroupField": {
                const radioGroupFormField = new RadioGroupField(form, this.translationService);
                if (modelFormField["url"] != null) {
                    const radiosUrl = KeyUtility.translateUrl(modelFormField["url"], form.getKey(), false, parentPageElement);
                    const radioLoader = (rgField) => (data) => {
                        for (const item of data) {
                            const radio = new Radio(form, this.translationService);
                            radio.name = item["name"];
                            radio.key = item["key"]["key"].toString(); // force radio key type string for angular2
                            if (radio.key === item["defaultKey"]) {
                                rgField.setValue(radio.key);
                            }
                            rgField.radios.push(radio);
                        }
                        rgField.created = true;
                        console.log("radio group field created: " + rgField.id);
                    };
                    const radioLoaderForField = radioLoader(radioGroupFormField);
                    this.pathService.serverGet(this.getBackendUrl(), radiosUrl, radioLoaderForField, null);
                }
                else {
                    radioGroupFormField.created = true;
                }
                radioGroupFormField.fromJson(modelFormField);
                formField = radioGroupFormField;
                break;
            }
            case "CheckboxGroupField": {
                const checkboxGroupField = new CheckboxGroupField(form, this.translationService);
                checkboxGroupField.fromJson(modelFormField);
                formField = checkboxGroupField;
                break;
            }
            case "ProgressBarField": {
                const progressBarField = new ProgressBarField(form, this.translationService);
                progressBarField.fromJson(modelFormField);
                formField = progressBarField;
                break;
            }
            case "okButton": {
                formField = new OkButton(form, this.translationService);
                formField.fromJson(modelFormField);
                break;
            }
            case "cancelButton": {
                formField = new CancelButton(form, this.translationService);
                formField.fromJson(modelFormField);
                break;
            }
            case "deleteButton": {
                formField = new FormDeleteButton(form, this.translationService);
                formField.fromJson(modelFormField);
                if (form.key == null) {
                    formField.visible = false;
                }
                break;
            }
            case "previousButton": {
                formField = new PreviousButton(form, this.translationService);
                formField.fromJson(modelFormField);
                if (form.key == null) {
                    formField.visible = false;
                }
                break;
            }
            case "fileUpload": {
                formField = new FileUploadField(form, this.translationService);
                modelFormField["url"] = KeyUtility.translateUrl(modelFormField["url"], form.getKey(), false, parentPageElement);
                formField.fromJson(modelFormField);
                break;
            }
            default: {
                formField = new FormField(form, this.translationService);
                formField.fromJson(modelFormField);
            }
        }
        // Field permission (move code to FormField)
        if (modelFormField["permissionUrl"] != null) {
            formField.readonly = false;
            const permissionUrl = KeyUtility.translateUrl(modelFormField["permissionUrl"], formField.getForm().getKey(), false, parentPageElement);
            const permissionHandler = (permissionElement) => (data) => {
                permissionElement.readonly = !data["permission"];
            };
            this.pathService.serverGet(formField.getForm().getApp().getBackendUrl(), permissionUrl, permissionHandler(formField), null);
        }
        // search parents for defaultKey
        if (formField instanceof ValueField && modelFormField["defaultKey"] != null) {
            let pageElement = parentPageElement;
            while (pageElement != null) {
                if (pageElement.getKey() != null && pageElement.getKey().getName() === modelFormField["defaultKey"]) {
                    formField.setValue(pageElement.getKey().getKey());
                    formField.isInitialValueSet = true;
                    pageElement = null;
                }
                else {
                    pageElement = pageElement.getParent();
                }
            }
        }
        return formField;
    }
    toggleCollapse() {
        this.show = !this.show;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGF0aC1hcHAuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vcGF0aC1mcmFtZXdvcmsvIiwic291cmNlcyI6WyJwYXRoLWZyYW1ld29yay9wYXRoLWFwcC5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQ0EsT0FBTyxFQUFDLHNCQUFzQixFQUFDLE1BQU0sc0RBQXNELENBQUM7QUFDNUYsT0FBTyxFQUFDLGlCQUFpQixFQUFDLE1BQU0sMERBQTBELENBQUM7QUFDM0YsT0FBTyxFQUFDLFlBQVksRUFBQyxNQUFNLG1DQUFtQyxDQUFDO0FBQy9ELE9BQU8sRUFBQyxnQkFBZ0IsRUFBQyxNQUFNLHdDQUF3QyxDQUFDO0FBQ3hFLE9BQU8sRUFBQyxRQUFRLEVBQUMsTUFBTSwrQkFBK0IsQ0FBQztBQUN2RCxPQUFPLEVBQUMsY0FBYyxFQUFDLE1BQU0scUNBQXFDLENBQUM7QUFDbkUsT0FBTyxFQUFDLGtCQUFrQixFQUFDLE1BQU0sZ0RBQWdELENBQUM7QUFDbEYsT0FBTyxFQUFDLFNBQVMsRUFBQyxNQUFNLHdDQUF3QyxDQUFDO0FBQ2pFLE9BQU8sRUFBQyxjQUFjLEVBQUMsTUFBTSxtREFBbUQsQ0FBQztBQUNqRixPQUFPLEVBQUMsZUFBZSxFQUFDLE1BQU0sZ0RBQWdELENBQUM7QUFDL0UsT0FBTyxFQUFDLFNBQVMsRUFBQyxNQUFNLHlCQUF5QixDQUFDO0FBQ2xELE9BQU8sRUFBQyxVQUFVLEVBQUMsTUFBTSwwQ0FBMEMsQ0FBQztBQUNwRSxPQUFPLEVBQUMsV0FBVyxFQUFDLE1BQU0sNENBQTRDLENBQUM7QUFDdkUsT0FBTyxFQUFDLGdCQUFnQixFQUFDLE1BQU0sa0RBQWtELENBQUM7QUFDbEYsT0FBTyxFQUFDLEtBQUssRUFBQyxNQUFNLDBCQUEwQixDQUFDO0FBQy9DLE9BQU8sRUFBQyxlQUFlLEVBQUMsTUFBTSwwQ0FBMEMsQ0FBQztBQUN6RSxPQUFPLEVBQUMsU0FBUyxFQUFDLE1BQU0sd0NBQXdDLENBQUM7QUFDakUs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QUMsSUFBSSxDQUFDLElBQUksQ0FBQztJQUMzQixDQUFDO0NBRUoiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1R5cGV9IGZyb20gXCJAYW5ndWxhci9jb3JlXCI7XHJcbmltcG9ydCB7QXV0b0NvbXBsZXRlRmllbGRFbnRyeX0gZnJvbSBcIi4vZm9ybS9maWVsZC9hdXRvLWNvbXBsZXRlL2F1dG8tY29tcGxldGUtZmllbGQtZW50cnlcIjtcclxuaW1wb3J0IHtBdXRvQ29tcGxldGVGaWVsZH0gZnJvbSBcIi4vZm9ybS9maWVsZC9hdXRvLWNvbXBsZXRlL2F1dG8tY29tcGxldGUtZmllbGQuY29tcG9uZW50XCI7XHJcbmltcG9ydCB7Q2FuY2VsQnV0dG9ufSBmcm9tIFwiLi9mb3JtL2ZpZWxkL2J1dHRvbi9jYW5jZWwtYnV0dG9uXCI7XHJcbmltcG9ydCB7Rm9ybURlbGV0ZUJ1dHRvbn0gZnJvbSBcIi4vZm9ybS9maWVsZC9idXR0b24vZm9ybS1kZWxldGUtYnV0dG9uXCI7XHJcbmltcG9ydCB7T2tCdXR0b259IGZyb20gXCIuL2Zvcm0vZmllbGQvYnV0dG9uL29rLWJ1dHRvblwiO1xyXG5pbXBvcnQge1ByZXZpb3VzQnV0dG9ufSBmcm9tIFwiLi9mb3JtL2ZpZWxkL2J1dHRvbi9wcmV2aW91cy1idXR0b25cIjtcclxuaW1wb3J0IHtDaGVja2JveEdyb3VwRmllbGR9IGZyb20gXCIuL2Zvcm0vZmllbGQvY2hlY2tib3gvY2hlY2tib3gtZ3JvdXAuY29tcG9uZW50XCI7XHJcbmltcG9ydCB7RGF0ZUZpZWxkfSBmcm9tIFwiLi9mb3JtL2ZpZWxkL2RhdGUvZGF0ZS1maWVsZC5jb21wb25lbnRcIjtcclxuaW1wb3J0IHtGaWVsZExpc3RGaWVsZH0gZnJvbSBcIi4vZm9ybS9maWVsZC9maWVsZExpc3QvZmllbGQtbGlzdC1maWVsZC5jb21wb25lbnRcIjtcclxuaW1wb3J0IHtGaWxlVXBsb2FkRmllbGR9IGZyb20gXCIuL2Zvcm0vZmllbGQvZmlsZS11cGxvYWQvZmlsZS11cGxvYWQuY29tcG9uZW50XCI7XHJcbmltcG9ydCB7Rm9ybUZpZWxkfSBmcm9tIFwiLi9mb3JtL2ZpZWxkL2Zvcm0tZmllbGRcIjtcclxuaW1wb3J0IHtMYWJlbEZpZWxkfSBmcm9tIFwiLi9mb3JtL2ZpZWxkL2xhYmVsL2xhYmVsLWZpZWxkLmNvbXBvbmVudFwiO1xyXG5pbXBvcnQge051bWJlckZpZWxkfSBmcm9tIFwiLi9mb3JtL2ZpZWxkL251bWJlci9udW1iZXItZmllbGQuY29tcG9uZW50XCI7XHJcbmltcG9ydCB7UHJvZ3Jlc3NCYXJGaWVsZH0gZnJvbSBcIi4vZm9ybS9maWVsZC9wcm9ncmVzcy1iYXIvcHJvZ3Jlc3MtYmFyLmNvbXBvbmVudFwiO1xyXG5pbXBvcnQge1JhZGlvfSBmcm9tIFwiLi9mb3JtL2ZpZWxkL3JhZGlvL3JhZGlvXCI7XHJcbmltcG9ydCB7UmFkaW9Hcm91cEZpZWxkfSBmcm9tIFwiLi9mb3JtL2ZpZWxkL3JhZGlvL3JhZGlvLWdyb3VwLmNvbXBvbmVudFwiO1xyXG5pbXBvcnQge1RleHRGaWVsZH0gZnJvbSBcIi4vZm9ybS9maWVsZC90ZXh0L3RleHQtZmllbGQuY29tcG9uZW50XCI7XHJcbmltcG9ydCB7VHJhbnNsYXRpb25GaWVsZH0gZnJvbSBcIi4vZm9ybS9maWVsZC90cmFuc2xhdGlvbi90cmFuc2xhdGlvbi1maWVsZC5jb21wb25lbnRcIjtcclxuaW1wb3J0IHtWYWx1ZUZpZWxkfSBmcm9tIFwiLi9mb3JtL2ZpZWxkL3ZhbHVlLWZpZWxkXCI7XHJcbmltcG9ydCB7Rm9ybUZ1bmN0aW9ufSBmcm9tIFwiLi9mb3JtL2Zvcm0tZnVuY3Rpb25cIjtcclxuaW1wb3J0IHtGb3JtfSBmcm9tIFwiLi9mb3JtL2Zvcm0uY29tcG9uZW50XCI7XHJcbmltcG9ydCB7QnV0dG9uR3JvdXB9IGZyb20gXCIuL3BhZ2UvZWxlbWVudC9idXR0b24tZ3JvdXAvYnV0dG9uLWdyb3VwLmNvbXBvbmVudFwiO1xyXG5pbXBvcnQge0JhY2tCdXR0b259IGZyb20gXCIuL3BhZ2UvZWxlbWVudC9idXR0b24vYmFjay1idXR0b24uY29tcG9uZW50XCI7XHJcbmltcG9ydCB7QnV0dG9ufSBmcm9tIFwiLi9wYWdlL2VsZW1lbnQvYnV0dG9uL2J1dHRvbi5jb21wb25lbnRcIjtcclxuaW1wb3J0IHtMaW5rQnV0dG9ufSBmcm9tIFwiLi9wYWdlL2VsZW1lbnQvYnV0dG9uL2xpbmstYnV0dG9uLmNvbXBvbmVudFwiO1xyXG5pbXBvcnQge1BhZ2VEZWxldGVCdXR0b259IGZyb20gXCIuL3BhZ2UvZWxlbWVudC9idXR0b24vcGFnZS1kZWxldGUtYnV0dG9uLmNvbXBvbmVudFwiO1xyXG5pbXBvcnQge0NoYXJ0RWxlbWVudH0gZnJvbSBcIi4vcGFnZS9lbGVtZW50L2NoYXJ0L2NoYXJ0LmNvbXBvbmVudFwiO1xyXG5pbXBvcnQge0N1c3RvbUNvbnRhaW5lclBhZ2VFbGVtZW50fSBmcm9tIFwiLi9wYWdlL2VsZW1lbnQvY3VzdG9tL2N1c3RvbS1jb250YWluZXItcGFnZS1lbGVtZW50XCI7XHJcbmltcG9ydCB7Q3VzdG9tUGFnZUVsZW1lbnR9IGZyb20gXCIuL3BhZ2UvZWxlbWVudC9jdXN0b20vY3VzdG9tLWNvbnRhaW5lci5jb21wb25lbnRcIjtcclxuaW1wb3J0IHtFbGVtZW50TGlzdH0gZnJvbSBcIi4vcGFnZS9lbGVtZW50L2VsZW1lbnQtbGlzdC9lbGVtZW50LWxpc3QuY29tcG9uZW50XCI7XHJcbmltcG9ydCB7SW5saW5lRm9ybX0gZnJvbSBcIi4vcGFnZS9lbGVtZW50L2lubGluZS1mb3JtL2lubGluZS1mb3JtXCI7XHJcbmltcG9ydCB7UGFnZUxhYmVsfSBmcm9tIFwiLi9wYWdlL2VsZW1lbnQvbGFiZWwvcGFnZS1sYWJlbC5jb21wb25lbnRcIjtcclxuaW1wb3J0IHtMaXN0fSBmcm9tIFwiLi9wYWdlL2VsZW1lbnQvbGlzdC9saXN0LmNvbXBvbmVudFwiO1xyXG5pbXBvcnQge0tleSwgUGFnZUVsZW1lbnR9IGZyb20gXCIuL3BhZ2UvZWxlbWVudC9wYWdlLWVsZW1lbnRcIjtcclxuaW1wb3J0IHtQYWdlfSBmcm9tIFwiLi9wYWdlL3BhZ2VcIjtcclxuaW1wb3J0IHtJQnV0dG9uLCBJRm9ybSwgSUZvcm1IYW5kbGVyLCBJUGFnZUVsZW1lbnQsIElQYXRoQXBwfSBmcm9tIFwiLi9wYXRoaW50ZXJmYWNlXCI7XHJcbmltcG9ydCB7UGF0aFNlcnZpY2V9IGZyb20gXCIuL3NlcnZpY2UvcGF0aC5zZXJ2aWNlXCI7XHJcbmltcG9ydCB7VHJhbnNsYXRpb25TZXJ2aWNlfSBmcm9tIFwiLi9zZXJ2aWNlL3RyYW5zbGF0aW9uLnNlcnZpY2VcIjtcclxuaW1wb3J0IHtLZXlVdGlsaXR5fSBmcm9tIFwiLi91dGlsaXR5L2tleS11dGlsaXR5XCI7XHJcbmltcG9ydCB7QnJlYWRjcnVtYn0gZnJvbSBcIi4vcGFnZS9lbGVtZW50L2JyZWFkY3J1bWIvYnJlYWRjcnVtYi5jb21wb25lbnRcIjtcclxuXHJcbmV4cG9ydCBhYnN0cmFjdCBjbGFzcyBQYXRoQXBwQ29tcG9uZW50IGltcGxlbWVudHMgSVBhdGhBcHAge1xyXG5cclxuXHJcbiAgICBwcml2YXRlIF9wYWdlU3RhY2s6IFBhZ2VbXSA9IFtdO1xyXG4gICAgcHJpdmF0ZSBfZm9ybVN0YWNrOiBGb3JtW10gPSBbXTtcclxuICAgIHByaXZhdGUgX3VzZXJJZDogc3RyaW5nO1xyXG4gICAgcHJpdmF0ZSBfdGV4dHM6IHN0cmluZ1tdID0gW107XHJcbiAgICBwcml2YXRlIF92ZXJzaW9uOiBzdHJpbmc7XHJcbiAgICAvKiB0b2dnbGUgbmF2aWdhdGlvblxyXG4gICAgaW5zcGlyZWQgYnk6IGh0dHBzOi8vYW5ndWxhcmZpcmViYXNlLmNvbS9sZXNzb25zL2Jvb3RzdHJhcC00LWNvbGxhcHNhYmxlLW5hdmJhci13b3JrLXdpdGgtYW5ndWxhciAqL1xyXG4gICAgc2hvdyA9IGZhbHNlO1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKHByaXZhdGUgcGF0aFNlcnZpY2U6IFBhdGhTZXJ2aWNlLCBwcml2YXRlIHRyYW5zbGF0aW9uU2VydmljZTogVHJhbnNsYXRpb25TZXJ2aWNlKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuZ2V0QmFja2VuZFVybCgpICYmIHRoaXMuZ2V0QmFja2VuZFVybCgpLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgdGhpcy5wYXRoU2VydmljZS5zZXJ2ZXJHZXQodGhpcy5nZXRCYWNrZW5kVXJsKCksIFwiL3BpbmdcIiwgKGRhdGE6IGFueSkgPT4ge1xyXG4gICAgICAgICAgICAgICAgbGV0IGJhY2tlbmRWZXJzaW9uID0gZGF0YVtcInZlcnNpb25cIl07XHJcbiAgICAgICAgICAgICAgICBpZiAoYmFja2VuZFZlcnNpb24gIT09IHRoaXMuZ2V0RnJvbnRlbmRWZXJzaW9uKCkpIHtcclxuICAgICAgICAgICAgICAgICAgICBiYWNrZW5kVmVyc2lvbiA9IFwiVmVyc2lvbiBtaXNtYXRjaDogQmFja2VuZCAoXCIgKyBiYWNrZW5kVmVyc2lvbiArIFwiKSwgRnJvbnRlbmQgKFwiICsgdGhpcy5nZXRGcm9udGVuZFZlcnNpb24oKSArIFwiKS4gXCIgK1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBcIlBsZWFzZSBjbGVhciBjYWNoZSBvciBjaGVjayBzZXJ2ZXIgaW5zdGFsbGF0aW9uLlwiO1xyXG4gICAgICAgICAgICAgICAgICAgIHdpbmRvdy5hbGVydChiYWNrZW5kVmVyc2lvbik7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB0aGlzLl92ZXJzaW9uID0gYmFja2VuZFZlcnNpb247XHJcbiAgICAgICAgICAgICAgICBpZiAoZGF0YVtcInVzZXJJZFwiXSAhPT0gbnVsbCAmJiBkYXRhW1widXNlcklkXCJdICE9PSBcIlwiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fdXNlcklkID0gZGF0YVtcInVzZXJJZFwiXTtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnNldEN1cnJlbnRQYWdlKHRoaXMuZ2V0U3RhcnRQYWdlKCksIG51bGwpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYgKGRhdGFbXCJsYW5ndWFnZUNvZGVcIl0gIT09IG51bGwgJiYgZGF0YVtcImxhbmd1YWdlQ29kZVwiXSAhPT0gXCJcIikge1xyXG4gICAgICAgICAgICAgICAgICAgIHNlc3Npb25TdG9yYWdlLnNldEl0ZW0oXCJsYW5ndWFnZUNvZGVcIiwgZGF0YVtcImxhbmd1YWdlQ29kZVwiXSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0sIChlcnI6IGFueSkgPT4ge1xyXG4gICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcihlcnIpO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5sb2FkQXBwbGljYXRpb25UZXh0cygpO1xyXG4gICAgfVxyXG5cclxuICAgIHByb3RlY3RlZCBhYnN0cmFjdCBnZXRTdGFydFBhZ2UoKTogc3RyaW5nO1xyXG5cclxuICAgIHByb3RlY3RlZCBnZXRBcHBsaWNhdGlvbkxvZ28oKTogc3RyaW5nIHtcclxuICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgIH1cclxuXHJcbiAgICBwcm90ZWN0ZWQgYWJzdHJhY3QgZ2V0T3duVXNlckZvcm0oKTogc3RyaW5nO1xyXG5cclxuICAgIHByb3RlY3RlZCBhYnN0cmFjdCBnZXRHdWlNb2RlbCgpO1xyXG5cclxuICAgIHByb3RlY3RlZCBhYnN0cmFjdCBnZXRCZWFucygpO1xyXG5cclxuICAgIHByb3RlY3RlZCBhYnN0cmFjdCBnZXRIYW5kbGVycygpO1xyXG5cclxuICAgIHB1YmxpYyBhYnN0cmFjdCBnZXRCYWNrZW5kVXJsKCk6IHN0cmluZztcclxuXHJcbiAgICBwcm90ZWN0ZWQgYWJzdHJhY3QgZ2V0RnJvbnRlbmRWZXJzaW9uKCk6IHN0cmluZztcclxuXHJcbiAgICBwdWJsaWMgaXNMb2FkaW5nKCk6IGJvb2xlYW4ge1xyXG4gICAgICAgIHJldHVybiB0aGlzLnBhdGhTZXJ2aWNlLmlzTG9hZGluZygpO1xyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgbG9hZEFwcGxpY2F0aW9uVGV4dHMoKSB7XHJcbiAgICAgICAgdGhpcy5fdGV4dHNbXCJMb2dvdXRcIl0gPSB0aGlzLnRyYW5zbGF0aW9uU2VydmljZS5nZXRUZXh0KFwiTG9nb3V0XCIpO1xyXG4gICAgICAgIHRoaXMuX3RleHRzW1wiTm90U2lnbmVkSW5cIl0gPSB0aGlzLnRyYW5zbGF0aW9uU2VydmljZS5nZXRUZXh0KFwiTm90U2lnbmVkSW5cIik7XHJcbiAgICAgICAgdGhpcy5fdGV4dHNbXCJTaWduZWRJbkFzXCJdID0gdGhpcy50cmFuc2xhdGlvblNlcnZpY2UuZ2V0VGV4dChcIlNpZ25lZEluQXNcIik7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGdldFVzZXJJZCgpOiBzdHJpbmcge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl91c2VySWQ7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGxvZ2luKGV2ZW50LCB1c2VySWQ6IHN0cmluZywgcGFzc3dvcmQ6IHN0cmluZykge1xyXG4gICAgICAgIGNvbnN0IGNyZWRlbnRpYWxzOiBhbnkgPSB7fTtcclxuICAgICAgICBjcmVkZW50aWFsc1tcInVzZXJuYW1lXCJdID0gdXNlcklkO1xyXG4gICAgICAgIGNyZWRlbnRpYWxzW1wicGFzc3dvcmRcIl0gPSBwYXNzd29yZDtcclxuICAgICAgICB0aGlzLnBhdGhTZXJ2aWNlLnNlcnZlclBvc3QodGhpcy5nZXRCYWNrZW5kVXJsKCksIFwiL2xvZ2luXCIsIGNyZWRlbnRpYWxzLCAoZGF0YTogYW55KSA9PiB7XHJcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKFwibG9naW4gb2ssIGxhbmd1YWdlIGNvZGU6IFwiICsgZGF0YVtcImxhbmd1YWdlQ29kZVwiXSArIFwiLCBqd3Q6XCIgKyBkYXRhW1wiand0XCJdKTtcclxuICAgICAgICAgICAgc2Vzc2lvblN0b3JhZ2Uuc2V0SXRlbShcImxhbmd1YWdlQ29kZVwiLCBkYXRhW1wibGFuZ3VhZ2VDb2RlXCJdKTtcclxuICAgICAgICAgICAgdGhpcy5fdXNlcklkID0gdXNlcklkO1xyXG4gICAgICAgICAgICB0aGlzLmxvYWRBcHBsaWNhdGlvblRleHRzKCk7XHJcbiAgICAgICAgICAgIHRoaXMuc2V0Q3VycmVudFBhZ2UodGhpcy5nZXRTdGFydFBhZ2UoKSwgbnVsbCk7IC8vIHNldCBzdGFydCBwYWdlXHJcbiAgICAgICAgfSwgKGVycjogYW55KSA9PiB7XHJcbiAgICAgICAgICAgIHRoaXMucGF0aFNlcnZpY2UuaGlkZUxvYWRpbmcoKTtcclxuICAgICAgICAgICAgYWxlcnQoXCJMb2dpbiBmYWlsZWQuXCIpO1xyXG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKFwiZmFpbGVkIGxvZ2luXCIpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBsb2dvdXQoKSB7XHJcbiAgICAgICAgc2Vzc2lvblN0b3JhZ2UuY2xlYXIoKTtcclxuICAgICAgICBjb25zb2xlLmxvZyhcImxvZ291dCB1c2VyIFwiICsgdGhpcy5fdXNlcklkKTtcclxuICAgICAgICB0aGlzLl91c2VySWQgPSBudWxsO1xyXG4gICAgICAgIGxvY2F0aW9uLnJlbG9hZCgpO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBzaG93VXNlckZvcm0oKSB7XHJcbiAgICAgICAgdGhpcy5zZXRDdXJyZW50Rm9ybSh0aGlzLmdldE93blVzZXJGb3JtKCksIG5ldyBLZXkoMCwgXCJ1c2VySWRcIiksIG51bGwsIG51bGwpOyAvLyBUT0RPIHNldCBjb3JyZWN0IGtleVxyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBjbG9zZUN1cnJlbnRGb3JtKCkge1xyXG4gICAgICAgIHRoaXMuX2Zvcm1TdGFjay5wb3AoKTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgcmVmcmVzaEN1cnJlbnRQYWdlKCkge1xyXG4gICAgICAgIGNvbnN0IHBhZ2VTdGFjayA9IHRoaXMuX3BhZ2VTdGFjaztcclxuICAgICAgICBjb25zdCBhZnRlclJlZnJlc2hIYW5kbGVyID0gKCkgPT4ge1xyXG4gICAgICAgICAgICAvLyByZWZyZXNoIGFsbCBicmVhZGNydW1iIHRleHRzXHJcbiAgICAgICAgICAgIGZvciAobGV0IGsgPSAxOyBrIDwgcGFnZVN0YWNrLmxlbmd0aDsgaysrKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBwYWdlID0gcGFnZVN0YWNrW2tdO1xyXG4gICAgICAgICAgICAgICAgLy8gb25seSBpZiBwYWdlIG5hbWUgaXMgZGVyaXZlZCBmcm9tIHBhcmVudCBidXR0b25cclxuICAgICAgICAgICAgICAgIGlmIChwYWdlLnBhcmVudFBhZ2VFbGVtZW50ICYmIHBhZ2UucGFyZW50UGFnZUVsZW1lbnQuZ2V0S2V5KCkpIHtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBwYXJlbnRQYWdlID0gcGFnZVN0YWNrW2sgLSAxXTsgLy8gdGhlIHBhcmVudCBwYWdlIGNvbnRhaW5zIGEgYnV0dG9uIHRoYXQgZGVmaW5lcyB0aGUgcGFnZSBuYW1lXHJcbiAgICAgICAgICAgICAgICAgICAgZm9yIChjb25zdCBlbGVtZW50IG9mIHBhcmVudFBhZ2UuY29udGVudCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBzZWFyY2ggYWxsIGxpc3RzIG9mIHBhcmVudCBwYWdlXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChlbGVtZW50IGluc3RhbmNlb2YgTGlzdCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgbGlzdCA9IDxMaXN0PmVsZW1lbnQ7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gY2hlY2sgaWYgYWxsIGJ1dHRvbnMgaGF2ZSB1bmlxdWUga2V5c1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3Qga2V5cyA9IG5ldyBTZXQoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBidXR0b25Db3VudCA9IDA7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IGJ1dHRvbiBvZiBsaXN0LmdldENvbnRlbnQoKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJ1dHRvbkNvdW50Kys7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAga2V5cy5hZGQoYnV0dG9uLmdldEtleSgpLmdldE5hbWUoKSArIFwiLVwiICsgYnV0dG9uLmdldEtleSgpLmdldEtleSgpKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoa2V5cy5zaXplICE9PSBidXR0b25Db3VudCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gb25seSB1cGRhdGUgcGFnZSBuYW1lIGlmIGxpc3QgaGFzIHVuaXF1ZSBrZXlzXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoa2V5cy5zaXplID09PSBidXR0b25Db3VudCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAoY29uc3QgYnV0dG9uIG9mIGxpc3QuZ2V0Q29udGVudCgpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGNvbXBhcmUga2V5IHZhbHVlIGFuZCBuYW1lIGFuZCB1cGRhdGUgcGFnZSBuYW1lXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChwYWdlLnBhcmVudFBhZ2VFbGVtZW50LmdldEtleSgpLmdldEtleSgpID09PSBidXR0b24uZ2V0S2V5KCkuZ2V0S2V5KCkgJiZcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhZ2UucGFyZW50UGFnZUVsZW1lbnQuZ2V0S2V5KCkuZ2V0TmFtZSgpID09PSBidXR0b24uZ2V0S2V5KCkuZ2V0TmFtZSgpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYWdlLm5hbWUgPSBQYWdlRWxlbWVudC5idWlsZFNob3J0TmFtZShidXR0b24uZ2V0TmFtZSgpKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgdGhpcy5yZWZyZXNoUGFnZVN0YWNrKHRoaXMuX3BhZ2VTdGFjay5sZW5ndGggLSAxLCBmYWxzZSwgYWZ0ZXJSZWZyZXNoSGFuZGxlcik7XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSByZWZyZXNoUGFnZVN0YWNrKGluZGV4OiBudW1iZXIsIGNsZWFyU2VhcmNoLCBhZnRlclJlZnJlc2hIYW5kbGVyOiAoKSA9PiB2b2lkKSB7XHJcbiAgICAgICAgbGV0IHJlZnJlc2g6IChlbGVtZW50OiBQYWdlRWxlbWVudCkgPT4gdm9pZDtcclxuICAgICAgICBpZiAodGhpcy5fcGFnZVN0YWNrW2luZGV4XS5pZCA9PT0gdGhpcy5nZXRTdGFydFBhZ2UoKSAmJiBjbGVhclNlYXJjaCkge1xyXG4gICAgICAgICAgICAvLyByZWZyZXNoIGNsZWFuLCB3aXRob3V0IHNlYXJjaCB0ZXh0XHJcbiAgICAgICAgICAgIHJlZnJlc2ggPSAoZWxlbWVudDogUGFnZUVsZW1lbnQpID0+IHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGxpc3Q6IExpc3QgPSA8TGlzdD5lbGVtZW50O1xyXG4gICAgICAgICAgICAgICAgbGlzdC5maWx0ZXJDaGFuZ2VkKG51bGwpO1xyXG4gICAgICAgICAgICAgICAgbGlzdC5yZWZyZXNoKG51bGwsIGFmdGVyUmVmcmVzaEhhbmRsZXIpO1xyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIC8vIHJlZnJlc2ggd2l0aCBzZWFyY2ggdGV4dFxyXG4gICAgICAgICAgICByZWZyZXNoID0gKGVsZW1lbnQ6IFBhZ2VFbGVtZW50KSA9PiB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBsaXN0OiBMaXN0ID0gPExpc3Q+ZWxlbWVudDtcclxuICAgICAgICAgICAgICAgIGxpc3QucmVmcmVzaChsaXN0LnNlYXJjaFRleHQsIGFmdGVyUmVmcmVzaEhhbmRsZXIpO1xyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgIH1cclxuICAgICAgICBsZXQgcGFnZUhhc0xpc3QgPSBmYWxzZTtcclxuICAgICAgICBmb3IgKGNvbnN0IGVsZW1lbnQgb2YgdGhpcy5fcGFnZVN0YWNrW2luZGV4XS5jb250ZW50KSB7XHJcbiAgICAgICAgICAgIGlmIChlbGVtZW50IGluc3RhbmNlb2YgTGlzdCkge1xyXG4gICAgICAgICAgICAgICAgcmVmcmVzaChlbGVtZW50KTtcclxuICAgICAgICAgICAgICAgIHBhZ2VIYXNMaXN0ID0gdHJ1ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoIXBhZ2VIYXNMaXN0ICYmIGFmdGVyUmVmcmVzaEhhbmRsZXIpIHtcclxuICAgICAgICAgICAgYWZ0ZXJSZWZyZXNoSGFuZGxlcigpO1xyXG4gICAgICAgIH1cclxuICAgICAgICAvLyBicmVhZGNydW1ic1xyXG4gICAgICAgIGZvciAobGV0IGsgPSBpbmRleCAtIDE7IGsgPiAwOyBrLS0pIHtcclxuICAgICAgICAgICAgY29uc3QgY3VycmVudFBhZ2UgPSB0aGlzLl9wYWdlU3RhY2tba107XHJcbiAgICAgICAgICAgIGlmIChjdXJyZW50UGFnZSkge1xyXG4gICAgICAgICAgICAgICAgZm9yIChjb25zdCBlbGVtZW50IG9mIGN1cnJlbnRQYWdlLmNvbnRlbnQpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoZWxlbWVudCBpbnN0YW5jZW9mIExpc3QpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmVmcmVzaChlbGVtZW50KTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIG5hdmlnYXRlQmFjayhjbGVhclNlYXJjaCA9IGZhbHNlKSB7XHJcbiAgICAgICAgY29uc3QgY3VycmVudFBhZ2VMZW5ndGggPSB0aGlzLl9wYWdlU3RhY2subGVuZ3RoO1xyXG4gICAgICAgIGNvbnN0IGFmdGVyUmVmcmVzaEhhbmRsZXIgPSAoKSA9PiB7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLl9wYWdlU3RhY2subGVuZ3RoID09PSBjdXJyZW50UGFnZUxlbmd0aCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fcGFnZVN0YWNrLnBvcCgpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfTtcclxuICAgICAgICB0aGlzLnJlZnJlc2hQYWdlU3RhY2sodGhpcy5fcGFnZVN0YWNrLmxlbmd0aCAtIDIsIGNsZWFyU2VhcmNoLCBhZnRlclJlZnJlc2hIYW5kbGVyKTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgbmF2aWdhdGVUb1BhZ2UocGFnZU51bWJlcjogbnVtYmVyKSB7XHJcbiAgICAgICAgZm9yIChsZXQgayA9IHRoaXMuX3BhZ2VTdGFjay5sZW5ndGggLSAxOyBrID4gcGFnZU51bWJlciArIDE7IGstLSkge1xyXG4gICAgICAgICAgICB0aGlzLl9wYWdlU3RhY2sucG9wKCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMubmF2aWdhdGVCYWNrKHRydWUpO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyB5ZXNObyh0ZXh0OiBzdHJpbmcsIHllc0hhbmRsZXI6ICgpID0+IHZvaWQsIG5vSGFuZGxlcjogKCkgPT4gdm9pZCkge1xyXG4gICAgICAgIGNvbnN0IGZvcm06IEZvcm0gPSBuZXcgRm9ybSh0aGlzLnBhdGhTZXJ2aWNlLCB0aGlzKTtcclxuICAgICAgICBmb3JtLmZvcm1GdW5jdGlvbiA9IG5ldyBGb3JtRnVuY3Rpb24oKTtcclxuICAgICAgICBmb3JtLmZvcm1GdW5jdGlvbi5zYXZlID0gKGRhdGE6IGFueSkgPT4ge1xyXG4gICAgICAgICAgICB0aGlzLmNsb3NlQ3VycmVudEZvcm0oKTtcclxuICAgICAgICAgICAgdGhpcy5yZWZyZXNoQ3VycmVudFBhZ2UoKTtcclxuICAgICAgICB9O1xyXG4gICAgICAgIGZvcm0uZm9ybUZ1bmN0aW9uLmNhbmNlbCA9ICgpID0+IHtcclxuICAgICAgICAgICAgdGhpcy5jbG9zZUN1cnJlbnRGb3JtKCk7XHJcbiAgICAgICAgfTtcclxuICAgICAgICBjb25zdCBtZXNzYWdlOiBUZXh0RmllbGQgPSBuZXcgVGV4dEZpZWxkKGZvcm0sIHRoaXMudHJhbnNsYXRpb25TZXJ2aWNlKTtcclxuICAgICAgICBtZXNzYWdlLnR5cGUgPSBcImxhYmVsXCI7XHJcbiAgICAgICAgbWVzc2FnZS52aXNpYmxlID0gdHJ1ZTtcclxuICAgICAgICBtZXNzYWdlLmxhYmVsVmlzaWJsZSA9IGZhbHNlO1xyXG4gICAgICAgIG1lc3NhZ2Uuc2V0VmFsdWUodGV4dCk7XHJcbiAgICAgICAgZm9ybS5maWVsZHMucHVzaChtZXNzYWdlKTtcclxuXHJcbiAgICAgICAgY29uc3QgY2FuY2VsQnV0dG9uOiBDYW5jZWxCdXR0b24gPSBuZXcgQ2FuY2VsQnV0dG9uKGZvcm0sIHRoaXMudHJhbnNsYXRpb25TZXJ2aWNlKTtcclxuICAgICAgICBjYW5jZWxCdXR0b24udHlwZSA9IFwiY2FuY2VsQnV0dG9uXCI7XHJcbiAgICAgICAgY2FuY2VsQnV0dG9uLm5hbWUgPSB0aGlzLnRyYW5zbGF0aW9uU2VydmljZS5nZXRUZXh0KFwiQ2FuY2VsXCIpO1xyXG4gICAgICAgIGNhbmNlbEJ1dHRvbi52aXNpYmxlID0gdHJ1ZTtcclxuICAgICAgICBmb3JtLmZpZWxkcy5wdXNoKGNhbmNlbEJ1dHRvbik7XHJcblxyXG4gICAgICAgIGNvbnN0IG9rQnV0dG9uOiBPa0J1dHRvbiA9IG5ldyBPa0J1dHRvbihmb3JtLCB0aGlzLnRyYW5zbGF0aW9uU2VydmljZSk7XHJcbiAgICAgICAgb2tCdXR0b24udHlwZSA9IFwib2tCdXR0b25cIjtcclxuICAgICAgICBva0J1dHRvbi5uYW1lID0gdGhpcy50cmFuc2xhdGlvblNlcnZpY2UuZ2V0VGV4dChcIk9rXCIpO1xyXG4gICAgICAgIG9rQnV0dG9uLnZpc2libGUgPSB0cnVlO1xyXG4gICAgICAgIG9rQnV0dG9uLmhhbmRsZXIgPSB7XHJcbiAgICAgICAgICAgIGRvQ2xpY2soYnV0dG9uOiBJQnV0dG9uKSB7XHJcbiAgICAgICAgICAgICAgICB5ZXNIYW5kbGVyKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9O1xyXG4gICAgICAgIGZvcm0uZmllbGRzLnB1c2gob2tCdXR0b24pO1xyXG5cclxuICAgICAgICBmb3JtLnVwZGF0ZVJvd3MoKTtcclxuICAgICAgICB0aGlzLl9mb3JtU3RhY2sucHVzaChmb3JtKTtcclxuICAgIH1cclxuXHJcbiAgICBwcm90ZWN0ZWQgZ2V0Q3VzdG9tQ29tcG9uZW50Q2xhc3MoY29tcG9uZW50VHlwZTogc3RyaW5nKTogVHlwZTxDdXN0b21QYWdlRWxlbWVudD4ge1xyXG4gICAgICAgIGNvbnNvbGUubG9nKFwiUGxlYXNlIGRlZmluZSBhIHR5cGUgbWFwcGluZyBmb3IgXCIgKyBjb21wb25lbnRUeXBlICsgXCIgaW4geW91ciBBcHAtQ29tcG9uZW50LlwiKTtcclxuICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgc2V0Q3VycmVudFBhZ2UocGFnZUlkOiBzdHJpbmcsIHBhcmVudFBhZ2VFbGVtZW50OiBQYWdlRWxlbWVudCkge1xyXG4gICAgICAgIGxldCBwYWdlOiBQYWdlID0gbnVsbDtcclxuXHJcbiAgICAgICAgZm9yIChjb25zdCBtb2RlbFBhZ2Ugb2YgdGhpcy5nZXRHdWlNb2RlbCgpLmFwcGxpY2F0aW9uLnBhZ2VMaXN0KSB7XHJcbiAgICAgICAgICAgIGlmIChtb2RlbFBhZ2UuaWQgPT09IHBhZ2VJZCkge1xyXG4gICAgICAgICAgICAgICAgcGFnZSA9IG5ldyBQYWdlKHBhcmVudFBhZ2VFbGVtZW50KTtcclxuICAgICAgICAgICAgICAgIHBhZ2UuaWQgPSBwYWdlSWQ7XHJcbiAgICAgICAgICAgICAgICBwYWdlLm5hbWUgPSB0aGlzLnRyYW5zbGF0aW9uU2VydmljZS5nZXRUZXh0KG1vZGVsUGFnZS5uYW1lKTtcclxuICAgICAgICAgICAgICAgIGlmIChwYXJlbnRQYWdlRWxlbWVudCAhPSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcGFnZS5uYW1lID0gcGFyZW50UGFnZUVsZW1lbnQubmFtZTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGZvciAoY29uc3QgbW9kZWxFbGVtZW50IG9mIG1vZGVsUGFnZS5lbGVtZW50TGlzdCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuY3JlYXRlUGFnZUVsZW1lbnQobW9kZWxFbGVtZW50LCBwYXJlbnRQYWdlRWxlbWVudCwgcGFnZSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmIChwYWdlID09IG51bGwgJiYgcGFnZUlkICE9IG51bGwpIHtcclxuICAgICAgICAgICAgdGhpcy5wYXRoU2VydmljZS5hZGRBbGVydChcIk1pc3NpbmcgcGFnZVwiLCBwYWdlSWQpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHRoaXMuX3BhZ2VTdGFjay5wdXNoKHBhZ2UpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgY3JlYXRlUGFnZUVsZW1lbnQobW9kZWxFbGVtZW50LCBwYXJlbnRQYWdlRWxlbWVudDogUGFnZUVsZW1lbnQsIHBhZ2U6IFBhZ2UpOiBQYWdlRWxlbWVudFtdIHtcclxuICAgICAgICBjb25zdCBlbGVtZW50czogUGFnZUVsZW1lbnRbXSA9IFtdO1xyXG4gICAgICAgIHN3aXRjaCAobW9kZWxFbGVtZW50LnR5cGUpIHtcclxuICAgICAgICAgICAgY2FzZSBcImJ1dHRvblwiOlxyXG4gICAgICAgICAgICBjYXNlIFwibmV3QnV0dG9uXCI6XHJcbiAgICAgICAgICAgICAgICBjb25zdCBidXR0b24gPSBuZXcgQnV0dG9uKHRoaXMsIHRoaXMucGF0aFNlcnZpY2UsIHRoaXMudHJhbnNsYXRpb25TZXJ2aWNlKTtcclxuICAgICAgICAgICAgICAgIGJ1dHRvbi5wYXJlbnRQYWdlRWxlbWVudCA9IHBhcmVudFBhZ2VFbGVtZW50O1xyXG4gICAgICAgICAgICAgICAgYnV0dG9uLmZyb21Kc29uKG1vZGVsRWxlbWVudCk7XHJcbiAgICAgICAgICAgICAgICBpZiAobW9kZWxFbGVtZW50W1wiYnV0dG9uaGFuZGxlclwiXSAhPSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgKDxCdXR0b24+YnV0dG9uKS5oYW5kbGVyID0gbmV3ICh0aGlzLmdldEhhbmRsZXJzKClbbW9kZWxFbGVtZW50W1wiYnV0dG9uaGFuZGxlclwiXV0pO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxlbWVudHMucHVzaCh0aGlzLndyYXBTaW5nbGVCdXR0b24oYnV0dG9uKSk7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgY2FzZSBcImRlbGV0ZUJ1dHRvblwiOlxyXG4gICAgICAgICAgICAgICAgY29uc3QgZGVsZXRlQnV0dG9uID0gbmV3IFBhZ2VEZWxldGVCdXR0b24odGhpcywgdGhpcy5wYXRoU2VydmljZSwgdGhpcy50cmFuc2xhdGlvblNlcnZpY2UpO1xyXG4gICAgICAgICAgICAgICAgZGVsZXRlQnV0dG9uLnBhcmVudFBhZ2VFbGVtZW50ID0gcGFyZW50UGFnZUVsZW1lbnQ7XHJcbiAgICAgICAgICAgICAgICBkZWxldGVCdXR0b24uZnJvbUpzb24obW9kZWxFbGVtZW50KTtcclxuICAgICAgICAgICAgICAgIGVsZW1lbnRzLnB1c2godGhpcy53cmFwU2luZ2xlQnV0dG9uKGRlbGV0ZUJ1dHRvbikpO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgXCJkb3dubG9hZEJ1dHRvblwiOiAvLyBkZXByZWNhdGVkXHJcbiAgICAgICAgICAgIGNhc2UgXCJsaW5rQnV0dG9uXCI6XHJcbiAgICAgICAgICAgICAgICBjb25zdCBsaW5rQnV0dG9uID0gbmV3IExpbmtCdXR0b24odGhpcywgdGhpcy5wYXRoU2VydmljZSwgdGhpcy50cmFuc2xhdGlvblNlcnZpY2UpO1xyXG4gICAgICAgICAgICAgICAgbGlua0J1dHRvbi5wYXJlbnRQYWdlRWxlbWVudCA9IHBhcmVudFBhZ2VFbGVtZW50O1xyXG4gICAgICAgICAgICAgICAgbGlua0J1dHRvbi5mcm9tSnNvbihtb2RlbEVsZW1lbnQpO1xyXG4gICAgICAgICAgICAgICAgZWxlbWVudHMucHVzaCh0aGlzLndyYXBTaW5nbGVCdXR0b24obGlua0J1dHRvbikpO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgXCJiYWNrYnV0dG9uXCI6XHJcbiAgICAgICAgICAgICAgICBjb25zdCBiYWNrQnV0dG9uID0gbmV3IEJhY2tCdXR0b24odGhpcywgdGhpcy5wYXRoU2VydmljZSwgdGhpcy50cmFuc2xhdGlvblNlcnZpY2UpO1xyXG4gICAgICAgICAgICAgICAgYmFja0J1dHRvbi5mcm9tSnNvbihtb2RlbEVsZW1lbnQpO1xyXG4gICAgICAgICAgICAgICAgZWxlbWVudHMucHVzaCh0aGlzLndyYXBTaW5nbGVCdXR0b24oYmFja0J1dHRvbikpO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgXCJpbmxpbmVGb3JtXCI6XHJcbiAgICAgICAgICAgICAgICBjb25zdCBpbmxpbmVGb3JtID0gbmV3IElubGluZUZvcm0odGhpcywgdGhpcy5wYXRoU2VydmljZSwgdGhpcy50cmFuc2xhdGlvblNlcnZpY2UpO1xyXG4gICAgICAgICAgICAgICAgaW5saW5lRm9ybS5mcm9tSnNvbihtb2RlbEVsZW1lbnQpO1xyXG4gICAgICAgICAgICAgICAgaW5saW5lRm9ybS51cmwgPSBLZXlVdGlsaXR5LnRyYW5zbGF0ZVVybChtb2RlbEVsZW1lbnRbXCJ1cmxcIl0sIGlubGluZUZvcm0uZ2V0S2V5KCksIHRydWUsIHBhcmVudFBhZ2VFbGVtZW50KTtcclxuICAgICAgICAgICAgICAgIGlubGluZUZvcm0ubG9hZE5leHRGb3JtKHRydWUpO1xyXG4gICAgICAgICAgICAgICAgZWxlbWVudHMucHVzaChpbmxpbmVGb3JtKTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlIFwibGlzdFwiOlxyXG4gICAgICAgICAgICAgICAgY29uc3QgZHluYW1pY0xpc3Q6IExpc3QgPSBuZXcgTGlzdCh0aGlzLCB0aGlzLnBhdGhTZXJ2aWNlLCB0aGlzLnRyYW5zbGF0aW9uU2VydmljZSk7XHJcbiAgICAgICAgICAgICAgICBkeW5hbWljTGlzdC5wYXJlbnRQYWdlRWxlbWVudCA9IHBhcmVudFBhZ2VFbGVtZW50O1xyXG4gICAgICAgICAgICAgICAgZHluYW1pY0xpc3QuZnJvbUpzb24obW9kZWxFbGVtZW50KTtcclxuICAgICAgICAgICAgICAgIC8vIGhhbmRsZXJcclxuICAgICAgICAgICAgICAgIGlmIChtb2RlbEVsZW1lbnRbXCJoYW5kbGVyXCJdICE9IG51bGwpIHtcclxuICAgICAgICAgICAgICAgICAgICBkeW5hbWljTGlzdC5oYW5kbGVyID0gbmV3ICh0aGlzLmdldEhhbmRsZXJzKClbbW9kZWxFbGVtZW50W1wiaGFuZGxlclwiXV0pO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYgKG1vZGVsRWxlbWVudFtcImJ1dHRvbmhhbmRsZXJcIl0gIT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGR5bmFtaWNMaXN0LmJ1dHRvbkhhbmRsZXIgPSBuZXcgKHRoaXMuZ2V0SGFuZGxlcnMoKVttb2RlbEVsZW1lbnRbXCJidXR0b25oYW5kbGVyXCJdXSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpZiAoIWR5bmFtaWNMaXN0LnNlYXJjaFJlcXVpcmVkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZHluYW1pY0xpc3QucmVmcmVzaChudWxsLCBudWxsKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsZW1lbnRzLnB1c2goZHluYW1pY0xpc3QpO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgXCJDaGFydEVsZW1lbnRcIjpcclxuICAgICAgICAgICAgICAgIGNvbnN0IGNoYXJ0ID0gbmV3IENoYXJ0RWxlbWVudCh0aGlzLCB0aGlzLnBhdGhTZXJ2aWNlLCB0aGlzLnRyYW5zbGF0aW9uU2VydmljZSk7XHJcbiAgICAgICAgICAgICAgICBjaGFydC5mcm9tSnNvbihtb2RlbEVsZW1lbnQpO1xyXG4gICAgICAgICAgICAgICAgY2hhcnQudXJsID0gS2V5VXRpbGl0eS50cmFuc2xhdGVVcmwobW9kZWxFbGVtZW50W1widXJsXCJdLCBudWxsLCBmYWxzZSwgcGFyZW50UGFnZUVsZW1lbnQpO1xyXG4gICAgICAgICAgICAgICAgZWxlbWVudHMucHVzaChjaGFydCk7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgY2FzZSBcInBhZ2VMYWJlbFwiOlxyXG4gICAgICAgICAgICAgICAgY29uc3QgcGFnZUxhYmVsID0gbmV3IFBhZ2VMYWJlbCh0aGlzLCB0aGlzLnBhdGhTZXJ2aWNlLCB0aGlzLnRyYW5zbGF0aW9uU2VydmljZSk7XHJcbiAgICAgICAgICAgICAgICBwYWdlTGFiZWwuZnJvbUpzb24obW9kZWxFbGVtZW50KTtcclxuICAgICAgICAgICAgICAgIGVsZW1lbnRzLnB1c2gocGFnZUxhYmVsKTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlIFwiZWxlbWVudExpc3RcIjpcclxuICAgICAgICAgICAgICAgIGNvbnN0IGVsZW1lbnRMaXN0ID0gbmV3IEVsZW1lbnRMaXN0KHRoaXMsIHRoaXMucGF0aFNlcnZpY2UsIHRoaXMudHJhbnNsYXRpb25TZXJ2aWNlKTtcclxuICAgICAgICAgICAgICAgIGVsZW1lbnRMaXN0LmZyb21Kc29uKG1vZGVsRWxlbWVudCk7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBlbGVtZW50TGlzdFVybDogYW55ID0gS2V5VXRpbGl0eS50cmFuc2xhdGVVcmwobW9kZWxFbGVtZW50W1widXJsXCJdLCBudWxsLCBmYWxzZSwgcGFyZW50UGFnZUVsZW1lbnQpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5wYXRoU2VydmljZS5zZXJ2ZXJHZXQodGhpcy5nZXRCYWNrZW5kVXJsKCksIGVsZW1lbnRMaXN0VXJsLCAoZGF0YTogYW55KSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgZm9yIChjb25zdCBkeW5hbWljRWxlbWVudCBvZiBkYXRhKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGVsZW1lbnRzLnB1c2goLi4udGhpcy5jcmVhdGVQYWdlRWxlbWVudChkeW5hbWljRWxlbWVudCwgcGFyZW50UGFnZUVsZW1lbnQsIHBhZ2UpKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9LCBudWxsKTtcclxuICAgICAgICAgICAgICAgIGVsZW1lbnRzLnB1c2goZWxlbWVudExpc3QpO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgXCJidXR0b25Hcm91cFwiOlxyXG4gICAgICAgICAgICAgICAgY29uc3QgYnV0dG9uR3JvdXAgPSBuZXcgQnV0dG9uR3JvdXAodGhpcyk7XHJcbiAgICAgICAgICAgICAgICBidXR0b25Hcm91cC5mcm9tSnNvbihtb2RlbEVsZW1lbnQpO1xyXG4gICAgICAgICAgICAgICAgaWYgKG1vZGVsRWxlbWVudFtcImJ1dHRvbnNcIl0pIHtcclxuICAgICAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IGJ1dHRvbkl0ZW0gb2YgbW9kZWxFbGVtZW50W1wiYnV0dG9uc1wiXSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBidXR0b25Hcm91cHM6IEJ1dHRvbkdyb3VwW10gPSA8QnV0dG9uR3JvdXBbXT50aGlzLmNyZWF0ZVBhZ2VFbGVtZW50KGJ1dHRvbkl0ZW0sIHBhcmVudFBhZ2VFbGVtZW50LCBudWxsKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGJ1dHRvbkdyb3Vwcy5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IGl0ZW0gb2YgYnV0dG9uR3JvdXBzWzBdLmJ1dHRvbnMpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBidXR0b25Hcm91cC5hZGRCdXR0b24oaXRlbSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgYnV0dG9uR3JvdXAudXBkYXRlQnV0dG9uQm9yZGVycygpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxlbWVudHMucHVzaChidXR0b25Hcm91cCk7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgY2FzZSBcImJyZWFkY3J1bWJcIjpcclxuICAgICAgICAgICAgICAgIGNvbnN0IGJyZWFkY3J1bWIgPSBuZXcgQnJlYWRjcnVtYih0aGlzKTtcclxuICAgICAgICAgICAgICAgIGJyZWFkY3J1bWIuZnJvbUpzb24obW9kZWxFbGVtZW50KTtcclxuICAgICAgICAgICAgICAgIGVsZW1lbnRzLnB1c2goYnJlYWRjcnVtYik7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgZGVmYXVsdDoge1xyXG4gICAgICAgICAgICAgICAgLy8gY2FsbCBtZXRob2QgdG8gZ2V0IGN1c3RvbSBjb21wb25lbnQgY2xhc3NcclxuICAgICAgICAgICAgICAgIGNvbnN0IGN1c3RvbUNvbnRhaW5lclBhZ2VFbGVtZW50ID0gbmV3IEN1c3RvbUNvbnRhaW5lclBhZ2VFbGVtZW50KHRoaXMpO1xyXG4gICAgICAgICAgICAgICAgY3VzdG9tQ29udGFpbmVyUGFnZUVsZW1lbnQuZnJvbUpzb24obW9kZWxFbGVtZW50KTtcclxuICAgICAgICAgICAgICAgIGN1c3RvbUNvbnRhaW5lclBhZ2VFbGVtZW50LnR5cGVDbGFzcyA9IHRoaXMuZ2V0Q3VzdG9tQ29tcG9uZW50Q2xhc3MobW9kZWxFbGVtZW50LnR5cGUpO1xyXG4gICAgICAgICAgICAgICAgZWxlbWVudHMucHVzaChjdXN0b21Db250YWluZXJQYWdlRWxlbWVudCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgZm9yIChjb25zdCBlbGVtZW50IG9mIGVsZW1lbnRzKSB7XHJcbiAgICAgICAgICAgIGlmIChtb2RlbEVsZW1lbnRbXCJwZXJtaXNzaW9uVXJsXCJdICE9IG51bGwpIHtcclxuICAgICAgICAgICAgICAgIGVsZW1lbnQudmlzaWJsZSA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgcGVybWlzc2lvblVybDogc3RyaW5nID0gS2V5VXRpbGl0eS50cmFuc2xhdGVVcmwobW9kZWxFbGVtZW50W1wicGVybWlzc2lvblVybFwiXSwgbnVsbCwgZmFsc2UsIHBhcmVudFBhZ2VFbGVtZW50KTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHBlcm1pc3Npb25IYW5kbGVyID0gKHBlcm1pc3Npb25FbGVtZW50OiBQYWdlRWxlbWVudCkgPT4gKGRhdGE6IGFueSkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIHBlcm1pc3Npb25FbGVtZW50LnZpc2libGUgPSBkYXRhW1wicGVybWlzc2lvblwiXTtcclxuICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICB0aGlzLnBhdGhTZXJ2aWNlLnNlcnZlckdldCh0aGlzLmdldEJhY2tlbmRVcmwoKSwgcGVybWlzc2lvblVybCwgcGVybWlzc2lvbkhhbmRsZXIoZWxlbWVudCksIG51bGwpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmICghZWxlbWVudC50eXBlKSB7XHJcbiAgICAgICAgICAgICAgICBlbGVtZW50LnR5cGUgPSBtb2RlbEVsZW1lbnQudHlwZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbGVtZW50LnBhcmVudFBhZ2VFbGVtZW50ID0gcGFyZW50UGFnZUVsZW1lbnQ7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChwYWdlICYmIGVsZW1lbnRzKSB7XHJcbiAgICAgICAgICAgIHBhZ2UuY29udGVudC5wdXNoKC4uLmVsZW1lbnRzKTtcclxuICAgICAgICAgICAgcGFnZS51cGRhdGVSb3dzKCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBlbGVtZW50cztcclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIHdyYXBTaW5nbGVCdXR0b24oYnV0dG9uOiBCdXR0b24pOiBCdXR0b25Hcm91cCB7XHJcbiAgICAgICAgY29uc3QgYnV0dG9uR3JvdXAgPSBuZXcgQnV0dG9uR3JvdXAodGhpcyk7XHJcbiAgICAgICAgYnV0dG9uR3JvdXAudHlwZSA9IFwiYnV0dG9uR3JvdXBcIjtcclxuICAgICAgICBidXR0b25Hcm91cC5hZGRCdXR0b24oYnV0dG9uKTtcclxuICAgICAgICBidXR0b25Hcm91cC51cGRhdGVCdXR0b25Cb3JkZXJzKCk7XHJcbiAgICAgICAgYnV0dG9uR3JvdXAubmV3Um93ID0gYnV0dG9uLm5ld1JvdztcclxuICAgICAgICByZXR1cm4gYnV0dG9uR3JvdXA7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIHNldEN1cnJlbnRGb3JtKGZvcm1JZDogc3RyaW5nLCBrZXk6IEtleSwgaGFuZGxlcjogc3RyaW5nLCBwYXJlbnRQYWdlRWxlbWVudDogSVBhZ2VFbGVtZW50KSB7XHJcbiAgICAgICAgY29uc3Qgc2V0Q3VycmVudEZvcm0gPSAoKSA9PiB7XHJcbiAgICAgICAgICAgIC8vIGJ1aWxkIGZvcm0gZnVuY3Rpb25cclxuICAgICAgICAgICAgY29uc3QgZm9ybUZ1bmN0aW9uOiBGb3JtRnVuY3Rpb24gPSBuZXcgRm9ybUZ1bmN0aW9uKCk7XHJcbiAgICAgICAgICAgIGZvcm1GdW5jdGlvbi5zYXZlID0gKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5jbG9zZUN1cnJlbnRGb3JtKCk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnJlZnJlc2hDdXJyZW50UGFnZSgpO1xyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICBmb3JtRnVuY3Rpb24uY2FuY2VsID0gKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5jbG9zZUN1cnJlbnRGb3JtKCk7XHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIGZvcm1GdW5jdGlvbi5kZWxldGUgPSAoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmNsb3NlQ3VycmVudEZvcm0oKTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHBhcmVudDogSVBhZ2VFbGVtZW50ID0gcGFyZW50UGFnZUVsZW1lbnQ7XHJcbiAgICAgICAgICAgICAgICBpZiAocGFyZW50ICE9IG51bGwgJiYgcGFyZW50IGluc3RhbmNlb2YgUGFnZUVsZW1lbnQgJiYgKDxQYWdlRWxlbWVudD5wYXJlbnQpLmxpc3RFbGVtZW50KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5yZWZyZXNoQ3VycmVudFBhZ2UoKTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5uYXZpZ2F0ZUJhY2soKTtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnJlZnJlc2hDdXJyZW50UGFnZSgpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICBjb25zdCBmb3JtOiBGb3JtID0gdGhpcy5jcmVhdGVGb3JtKGZvcm1JZCwga2V5LCBoYW5kbGVyLCBmb3JtRnVuY3Rpb24sIHBhcmVudFBhZ2VFbGVtZW50KTtcclxuICAgICAgICAgICAgaWYgKGZvcm0gIT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fZm9ybVN0YWNrLnB1c2goZm9ybSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICAvLyBjaGVjayBwZXJtaXNzaW9uXHJcbiAgICAgICAgY29uc3QgbW9kZWxGb3JtID0gdGhpcy5nZXRNb2RlbEZvcm0oZm9ybUlkKTtcclxuICAgICAgICBpZiAobW9kZWxGb3JtICE9IG51bGwgJiYgbW9kZWxGb3JtW1wicGVybWlzc2lvblVybFwiXSAhPSBudWxsKSB7XHJcbiAgICAgICAgICAgIGxldCBzdWZmaXggPSBcIi91cGRhdGVcIjtcclxuICAgICAgICAgICAgaWYgKGtleSA9PSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICBzdWZmaXggPSBcIi9jcmVhdGVcIjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBjb25zdCBwZXJtaXNzaW9uVXJsOiBzdHJpbmcgPSBLZXlVdGlsaXR5LnRyYW5zbGF0ZVVybChtb2RlbEZvcm1bXCJwZXJtaXNzaW9uVXJsXCJdICsgc3VmZml4LCBrZXksIGZhbHNlLCBwYXJlbnRQYWdlRWxlbWVudCk7XHJcbiAgICAgICAgICAgIHRoaXMucGF0aFNlcnZpY2Uuc2VydmVyR2V0KHRoaXMuZ2V0QmFja2VuZFVybCgpLCBwZXJtaXNzaW9uVXJsLCAoZGF0YTogYW55KSA9PiB7XHJcbiAgICAgICAgICAgICAgICBpZiAoIWRhdGFbXCJwZXJtaXNzaW9uXCJdKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgd2luZG93LmFsZXJ0KHRoaXMudHJhbnNsYXRpb25TZXJ2aWNlLmdldFRleHQoXCJOb1Blcm1pc3Npb25FcnJvclwiKSk7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIHNldEN1cnJlbnRGb3JtKCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0sIG51bGwpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHNldEN1cnJlbnRGb3JtKCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgZ2V0TW9kZWxGb3JtKGZvcm1JZDogc3RyaW5nKSB7XHJcbiAgICAgICAgbGV0IHJlc3VsdCA9IG51bGw7XHJcbiAgICAgICAgZm9yIChjb25zdCBtb2RlbEZvcm0gb2YgdGhpcy5nZXRHdWlNb2RlbCgpLmFwcGxpY2F0aW9uLmZvcm1MaXN0KSB7XHJcbiAgICAgICAgICAgIGlmIChtb2RlbEZvcm0uaWQgPT09IGZvcm1JZCkge1xyXG4gICAgICAgICAgICAgICAgcmVzdWx0ID0gbW9kZWxGb3JtO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChyZXN1bHQgPT0gbnVsbCAmJiBmb3JtSWQgIT0gbnVsbCkge1xyXG4gICAgICAgICAgICB0aGlzLnBhdGhTZXJ2aWNlLmFkZEFsZXJ0KFwiTWlzc2luZyBmb3JtXCIsIGZvcm1JZCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiByZXN1bHQ7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGNyZWF0ZUZvcm0oZm9ybUlkOiBzdHJpbmcsXHJcbiAgICAgICAgICAgICAgICAgICAgICBrZXk6IEtleSwgaGFuZGxlcjogc3RyaW5nLFxyXG4gICAgICAgICAgICAgICAgICAgICAgZm9ybUZ1bmN0aW9uOiBGb3JtRnVuY3Rpb24sXHJcbiAgICAgICAgICAgICAgICAgICAgICBwYXJlbnRQYWdlRWxlbWVudDogSVBhZ2VFbGVtZW50KTogRm9ybSB7XHJcbiAgICAgICAgbGV0IGZvcm06IEZvcm0gPSBudWxsO1xyXG4gICAgICAgIGNvbnN0IG1vZGVsRm9ybSA9IHRoaXMuZ2V0TW9kZWxGb3JtKGZvcm1JZCk7XHJcbiAgICAgICAgaWYgKG1vZGVsRm9ybSAhPSBudWxsKSB7XHJcbiAgICAgICAgICAgIC8vIGNyZWF0ZSBmb3JtXHJcbiAgICAgICAgICAgIGZvcm0gPSBuZXcgRm9ybSh0aGlzLnBhdGhTZXJ2aWNlLCB0aGlzKTtcclxuICAgICAgICAgICAgZm9ybS5mcm9tSnNvbihtb2RlbEZvcm0pO1xyXG4gICAgICAgICAgICBmb3JtLmtleSA9IGtleTtcclxuICAgICAgICAgICAgZm9ybS5mb3JtRnVuY3Rpb24gPSBmb3JtRnVuY3Rpb247XHJcbiAgICAgICAgICAgIGZvcm0udGl0bGUgPSB0aGlzLnRyYW5zbGF0aW9uU2VydmljZS5nZXRUZXh0KG1vZGVsRm9ybS50aXRsZSk7XHJcbiAgICAgICAgICAgIGZvciAoY29uc3QgbW9kZWxGb3JtRmllbGQgb2YgbW9kZWxGb3JtLmZvcm1GaWVsZExpc3QpIHtcclxuICAgICAgICAgICAgICAgIC8vIGNyZWF0ZSBmb3JtIGZpZWxkXHJcbiAgICAgICAgICAgICAgICBjb25zdCBmb3JtRmllbGQgPSB0aGlzLmNyZWF0ZUZvcm1GaWVsZChtb2RlbEZvcm1GaWVsZCwgZm9ybSwgcGFyZW50UGFnZUVsZW1lbnQpO1xyXG4gICAgICAgICAgICAgICAgZm9ybS5maWVsZHMucHVzaChmb3JtRmllbGQpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGZvcm0udXBkYXRlUm93cygpO1xyXG5cclxuICAgICAgICAgICAgLy8gZmV0Y2ggZGF0YSBmcm9tIGJhY2tlbmRcclxuICAgICAgICAgICAgaWYgKGZvcm0udXJsICYmIGZvcm0ua2V5KSB7XHJcbiAgICAgICAgICAgICAgICAvLyBidXR0b24gc2V0IGEga2V5IG9uIGZvcm0sIHVwZGF0ZSBtb2RlLCBpZ25vcmUgdXJsRGVmYXVsdHNcclxuICAgICAgICAgICAgICAgIHRoaXMucG9wdWxhdGVGb3JtKGZvcm0sIGZvcm0uZ2V0S2V5KCksIHBhcmVudFBhZ2VFbGVtZW50KTtcclxuICAgICAgICAgICAgfSBlbHNlIGlmIChmb3JtLnVybERlZmF1bHRzKSB7XHJcbiAgICAgICAgICAgICAgICAvLyBubyBrZXksIGNyZWF0ZSBtb2RlXHJcbiAgICAgICAgICAgICAgICBjb25zdCBudWxsS2V5ID0gbmV3IEtleShcIm51bGxcIiwgXCJudWxsS2V5XCIpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5wb3B1bGF0ZUZvcm0oZm9ybSwgbnVsbEtleSwgcGFyZW50UGFnZUVsZW1lbnQpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmIChmb3JtLnVybCkge1xyXG4gICAgICAgICAgICAgICAgZm9ybS51cmwgPSBLZXlVdGlsaXR5LnRyYW5zbGF0ZVVybChmb3JtLnVybCwga2V5LCB0cnVlLCBwYXJlbnRQYWdlRWxlbWVudCk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIC8vIGV4ZWN1dGUgaGFuZGxlclxyXG4gICAgICAgICAgICBsZXQgaGFuZGxlck5hbWUgPSBoYW5kbGVyO1xyXG4gICAgICAgICAgICBpZiAoaGFuZGxlck5hbWUgPT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgaGFuZGxlck5hbWUgPSBmb3JtSWQgKyBcIkhhbmRsZXJcIjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAodGhpcy5nZXRCZWFucygpW2Zvcm1JZF0gIT0gbnVsbCAmJiB0aGlzLmdldEhhbmRsZXJzKClbaGFuZGxlck5hbWVdICE9IG51bGwpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGZvcm1CZWFuOiBJRm9ybSA9IG5ldyAodGhpcy5nZXRCZWFucygpW2Zvcm1JZF0pO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgZm9ybUhhbmRsZXI6IElGb3JtSGFuZGxlciA9IG5ldyAodGhpcy5nZXRIYW5kbGVycygpW2hhbmRsZXJOYW1lXSk7XHJcbiAgICAgICAgICAgICAgICBmb3IgKGxldCBhID0gMDsgYSA8IGZvcm0uZmllbGRzLmxlbmd0aDsgYSsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGZvcm0uZmllbGRzW2FdLmlkICE9IG51bGwpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZm9ybUJlYW5bZm9ybS5maWVsZHNbYV0uaWRdID0gZm9ybS5maWVsZHNbYV07XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZm9ybS5iZWFuID0gZm9ybUJlYW47XHJcbiAgICAgICAgICAgICAgICBmb3JtSGFuZGxlci5kb0xvYWQoZm9ybS5iZWFuKTtcclxuICAgICAgICAgICAgICAgIGZvcm0uaGFuZGxlciA9IGZvcm1IYW5kbGVyO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBmb3JtO1xyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgcG9wdWxhdGVGb3JtKGZvcm06IEZvcm0sIGtleTogS2V5LCBwYXJlbnRQYWdlRWxlbWVudDogSVBhZ2VFbGVtZW50KSB7XHJcbiAgICAgICAgY29uc3QgdXJsID0gS2V5VXRpbGl0eS50cmFuc2xhdGVVcmwoZm9ybS51cmwsIGtleSwgdHJ1ZSwgcGFyZW50UGFnZUVsZW1lbnQpO1xyXG4gICAgICAgIHRoaXMucGF0aFNlcnZpY2Uuc2VydmVyR2V0KHRoaXMuZ2V0QmFja2VuZFVybCgpLCB1cmwsIChkYXRhOiBhbnkpID0+IHtcclxuICAgICAgICAgICAgZm9yIChjb25zdCBmaWVsZCBvZiBmb3JtLmZpZWxkcykge1xyXG4gICAgICAgICAgICAgICAgaWYgKGRhdGFbZmllbGQuaWRdICE9IG51bGwgJiYgZmllbGQgaW5zdGFuY2VvZiBWYWx1ZUZpZWxkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGZpZWxkIGluc3RhbmNlb2YgUmFkaW9Hcm91cEZpZWxkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIFRPRE8gZ2VuZXJhbCBzb2x1dGlvblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBzZXRWYWx1ZU9mUmFkaW9Hcm91cEZpZWxkQ29udGV4dFdyYXBwZXIgPSAoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBmOiBSYWRpb0dyb3VwRmllbGQgPSA8UmFkaW9Hcm91cEZpZWxkPmZpZWxkO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgdjogYW55ID0gZGF0YVtmaWVsZC5pZF07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL25vaW5zcGVjdGlvbiBUeXBlU2NyaXB0VW5yZXNvbHZlZEZ1bmN0aW9uXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZXRWYWx1ZU9mUmFkaW9Hcm91cEZpZWxkKGYsIHYpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBzZXRWYWx1ZU9mUmFkaW9Hcm91cEZpZWxkID0gKHJhZGlvR3JvdXBGaWVsZDogUmFkaW9Hcm91cEZpZWxkLCB2YWx1ZTogYW55KSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIXJhZGlvR3JvdXBGaWVsZC5jcmVhdGVkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coXCJXYWl0aW5nIGZvciBSYWRpb0dyb3VwRmllbGQgXCIgKyByYWRpb0dyb3VwRmllbGQuaWQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKHJhZGlvR3JvdXBGaWVsZC5jcmVhdGVkKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB3aW5kb3cuc2V0VGltZW91dChzZXRWYWx1ZU9mUmFkaW9Hcm91cEZpZWxkQ29udGV4dFdyYXBwZXIsIDUwKTsgLy8gd2FpdCB0aGVuIHRyeSBhZ2FpblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKFwic2V0dGluZyByYWRpb2dyb3VwZmllbGQgdmFsdWVcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodmFsdWUgIT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlID0gdmFsdWUudG9TdHJpbmcoKTsgLy8gZm9yY2UgcmFkaW8ga2V5IHR5cGUgc3RyaW5nIGZvciBhbmd1bGFyMlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmFkaW9Hcm91cEZpZWxkLnNldFZhbHVlKHZhbHVlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJhZGlvR3JvdXBGaWVsZC5pc0luaXRpYWxWYWx1ZVNldCA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHNldFZhbHVlT2ZSYWRpb0dyb3VwRmllbGRDb250ZXh0V3JhcHBlcigpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICg8VmFsdWVGaWVsZDxhbnk+PmZpZWxkKS5zZXRWYWx1ZShkYXRhW2ZpZWxkLmlkXSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICg8VmFsdWVGaWVsZDxhbnk+PmZpZWxkKS5pc0luaXRpYWxWYWx1ZVNldCA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYgKGZpZWxkIGluc3RhbmNlb2YgRmllbGRMaXN0RmllbGQpIHtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBzZXRWYWx1ZU9mRmllbGRMaXN0RmllbGRDb250ZXh0V3JhcHBlciA9ICgpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgZjogRmllbGRMaXN0RmllbGQgPSA8RmllbGRMaXN0RmllbGQ+ZmllbGQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGQ6IGFueSA9IGRhdGE7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vbm9pbnNwZWN0aW9uIFR5cGVTY3JpcHRVbnJlc29sdmVkRnVuY3Rpb25cclxuICAgICAgICAgICAgICAgICAgICAgICAgc2V0VmFsdWVPZkZpZWxkTGlzdEZpZWxkKGYsIGQpO1xyXG4gICAgICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3Qgc2V0VmFsdWVPZkZpZWxkTGlzdEZpZWxkID0gKGZpZWxkTGlzdEZpZWxkOiBGaWVsZExpc3RGaWVsZCwgdmFsdWU6IGFueSkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoISg8RmllbGRMaXN0RmllbGQ+ZmllbGQpLmNyZWF0ZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiV2FpdGluZyBmb3IgRmllbGRMaXN0RmllbGQuLi4gXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2V0VGltZW91dChzZXRWYWx1ZU9mRmllbGRMaXN0RmllbGRDb250ZXh0V3JhcHBlciwgNTApOyAvLyB3YWl0IHRoZW4gdHJ5IGFnYWluXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gdXBkYXRlIGZpZWxkc1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IHN1YmZpZWxkIG9mICg8RmllbGRMaXN0RmllbGQ+ZmllbGQpLnN1YmZpZWxkcykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGRhdGFbc3ViZmllbGQuaWRdICE9IG51bGwpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdWJmaWVsZC5zZXRWYWx1ZShkYXRhW3N1YmZpZWxkLmlkXSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3ViZmllbGQuaXNJbml0aWFsVmFsdWVTZXQgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgICAgICBzZXRWYWx1ZU9mRmllbGRMaXN0RmllbGRDb250ZXh0V3JhcHBlcigpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSwgbnVsbCk7XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBjcmVhdGVGb3JtRmllbGQobW9kZWxGb3JtRmllbGQsIGZvcm06IEZvcm0sIHBhcmVudFBhZ2VFbGVtZW50OiBJUGFnZUVsZW1lbnQpOiBGb3JtRmllbGQge1xyXG4gICAgICAgIGxldCBmb3JtRmllbGQ6IEZvcm1GaWVsZCA9IG51bGw7XHJcbiAgICAgICAgc3dpdGNoIChtb2RlbEZvcm1GaWVsZC50eXBlKSB7XHJcbiAgICAgICAgICAgIGNhc2UgXCJ0ZXh0XCI6IHtcclxuICAgICAgICAgICAgICAgIGZvcm1GaWVsZCA9IG5ldyBUZXh0RmllbGQoZm9ybSwgdGhpcy50cmFuc2xhdGlvblNlcnZpY2UpO1xyXG4gICAgICAgICAgICAgICAgZm9ybUZpZWxkLmZyb21Kc29uKG1vZGVsRm9ybUZpZWxkKTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGNhc2UgXCJ0cmFuc2xhdGlvblwiOiB7XHJcbiAgICAgICAgICAgICAgICBmb3JtRmllbGQgPSBuZXcgVHJhbnNsYXRpb25GaWVsZChmb3JtLCB0aGlzLnBhdGhTZXJ2aWNlLCB0aGlzLnRyYW5zbGF0aW9uU2VydmljZSk7XHJcbiAgICAgICAgICAgICAgICBmb3JtRmllbGQuZnJvbUpzb24obW9kZWxGb3JtRmllbGQpO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgY2FzZSBcIm51bWJlclwiOiB7XHJcbiAgICAgICAgICAgICAgICBmb3JtRmllbGQgPSBuZXcgTnVtYmVyRmllbGQoZm9ybSwgdGhpcy50cmFuc2xhdGlvblNlcnZpY2UpO1xyXG4gICAgICAgICAgICAgICAgZm9ybUZpZWxkLmZyb21Kc29uKG1vZGVsRm9ybUZpZWxkKTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGNhc2UgXCJsYWJlbFwiOiB7XHJcbiAgICAgICAgICAgICAgICBmb3JtRmllbGQgPSBuZXcgTGFiZWxGaWVsZChmb3JtLCB0aGlzLnRyYW5zbGF0aW9uU2VydmljZSk7XHJcbiAgICAgICAgICAgICAgICBmb3JtRmllbGQuZnJvbUpzb24obW9kZWxGb3JtRmllbGQpO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgY2FzZSBcImZpZWxkTGlzdFwiOiB7XHJcbiAgICAgICAgICAgICAgICBmb3JtRmllbGQgPSBuZXcgRmllbGRMaXN0RmllbGQoZm9ybSwgdGhpcy50cmFuc2xhdGlvblNlcnZpY2UpO1xyXG4gICAgICAgICAgICAgICAgZm9ybUZpZWxkLm5hbWUgPSBcImxpc3RcIjtcclxuICAgICAgICAgICAgICAgIGZvcm1GaWVsZC5mcm9tSnNvbihtb2RlbEZvcm1GaWVsZCk7XHJcbiAgICAgICAgICAgICAgICBpZiAobW9kZWxGb3JtRmllbGRbXCJ1cmxcIl0gIT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGZpZWxkTGlzdFVybDogYW55ID0gS2V5VXRpbGl0eS50cmFuc2xhdGVVcmwobW9kZWxGb3JtRmllbGRbXCJ1cmxcIl0sIGZvcm0uZ2V0S2V5KCksIGZhbHNlLCBwYXJlbnRQYWdlRWxlbWVudCk7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgbW9kZWxJZDogc3RyaW5nID0gbW9kZWxGb3JtRmllbGRbXCJpZFwiXTtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnBhdGhTZXJ2aWNlLnNlcnZlckdldCh0aGlzLmdldEJhY2tlbmRVcmwoKSwgZmllbGRMaXN0VXJsLCAoZGF0YTogYW55KSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBjb3VudGVyID0gMTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChjb25zdCBpdGVtIG9mIGRhdGEpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGR5bmFtaWNGaWVsZCA9IHRoaXMuY3JlYXRlRm9ybUZpZWxkKGl0ZW0sIGZvcm0sIHBhcmVudFBhZ2VFbGVtZW50KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGR5bmFtaWNGaWVsZC5uYW1lID0gaXRlbVtcIm5hbWVcIl07IC8vIGRvIG5vdCB1c2UgdHJhbnNsYXRpb24gc2VydmljZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZHluYW1pY0ZpZWxkLmlkID0gbW9kZWxJZCArIGNvdW50ZXI7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAoPEZpZWxkTGlzdEZpZWxkPmZvcm1GaWVsZCkuc3ViZmllbGRzLnB1c2goPFZhbHVlRmllbGQ8YW55Pj5keW5hbWljRmllbGQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY291bnRlcisrO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvcm0udXBkYXRlUm93cygpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAoPEZpZWxkTGlzdEZpZWxkPmZvcm1GaWVsZCkuY3JlYXRlZCA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgfSwgbnVsbCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBjYXNlIFwiZGF0ZVwiOiB7XHJcbiAgICAgICAgICAgICAgICBmb3JtRmllbGQgPSBuZXcgRGF0ZUZpZWxkKGZvcm0sIHRoaXMudHJhbnNsYXRpb25TZXJ2aWNlKTtcclxuICAgICAgICAgICAgICAgIGZvcm1GaWVsZC5mcm9tSnNvbihtb2RlbEZvcm1GaWVsZCk7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBjYXNlIFwiYXV0b2NvbXBsZXRlXCI6IHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGF1dG9Db21wbGV0ZUZvcm1GaWVsZCA9IG5ldyBBdXRvQ29tcGxldGVGaWVsZChmb3JtLCB0aGlzLnRyYW5zbGF0aW9uU2VydmljZSwgdGhpcy5wYXRoU2VydmljZSk7XHJcbiAgICAgICAgICAgICAgICBhdXRvQ29tcGxldGVGb3JtRmllbGQuZGV0YWlsRm9ybSA9IG1vZGVsRm9ybUZpZWxkW1wiZm9ybVwiXTtcclxuICAgICAgICAgICAgICAgIGF1dG9Db21wbGV0ZUZvcm1GaWVsZC53b3JkU2VhcmNoRW5hYmxlZCA9IG1vZGVsRm9ybUZpZWxkW1wid29yZFNlYXJjaEVuYWJsZWRcIl07XHJcbiAgICAgICAgICAgICAgICBpZiAobW9kZWxGb3JtRmllbGRbXCJkYXRhXCJdICE9IG51bGwpIHtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBkYXRhID0gW107XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IGsgPSAwO1xyXG4gICAgICAgICAgICAgICAgICAgIGZvciAoY29uc3QgaXRlbSBvZiBtb2RlbEZvcm1GaWVsZFtcImRhdGFcIl0pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgZW50cnkgPSBuZXcgQXV0b0NvbXBsZXRlRmllbGRFbnRyeSgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBlbnRyeS50ZXh0ID0gaXRlbTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZW50cnkua2V5ID0gaztcclxuICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS5wdXNoKGVudHJ5KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaysrO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBhdXRvQ29tcGxldGVGb3JtRmllbGQuZGF0YSA9IGRhdGE7XHJcbiAgICAgICAgICAgICAgICAgICAgYXV0b0NvbXBsZXRlRm9ybUZpZWxkLmRhdGFMb2FkZWQgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChtb2RlbEZvcm1GaWVsZFtcInVybFwiXSAhPSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgYXV0b0NvbXBsZXRlRm9ybUZpZWxkVXJsOiBzdHJpbmcgPSBLZXlVdGlsaXR5LnRyYW5zbGF0ZVVybChtb2RlbEZvcm1GaWVsZFtcInVybFwiXSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgZm9ybS5rZXksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZhbHNlLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBwYXJlbnRQYWdlRWxlbWVudCk7XHJcbiAgICAgICAgICAgICAgICAgICAgYXV0b0NvbXBsZXRlRm9ybUZpZWxkLnVybCA9IGF1dG9Db21wbGV0ZUZvcm1GaWVsZFVybDtcclxuICAgICAgICAgICAgICAgICAgICBhdXRvQ29tcGxldGVGb3JtRmllbGQubG9hZCgpO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBhdXRvQ29tcGxldGVGb3JtRmllbGQuZGF0YUxvYWRlZCA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBmb3JtRmllbGQgPSBhdXRvQ29tcGxldGVGb3JtRmllbGQ7XHJcbiAgICAgICAgICAgICAgICBmb3JtRmllbGQuZnJvbUpzb24obW9kZWxGb3JtRmllbGQpO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgY2FzZSBcIlJhZGlvR3JvdXBGaWVsZFwiOiB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCByYWRpb0dyb3VwRm9ybUZpZWxkID0gbmV3IFJhZGlvR3JvdXBGaWVsZChmb3JtLCB0aGlzLnRyYW5zbGF0aW9uU2VydmljZSk7XHJcbiAgICAgICAgICAgICAgICBpZiAobW9kZWxGb3JtRmllbGRbXCJ1cmxcIl0gIT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHJhZGlvc1VybDogYW55ID0gS2V5VXRpbGl0eS50cmFuc2xhdGVVcmwobW9kZWxGb3JtRmllbGRbXCJ1cmxcIl0sIGZvcm0uZ2V0S2V5KCksIGZhbHNlLCBwYXJlbnRQYWdlRWxlbWVudCk7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgcmFkaW9Mb2FkZXIgPSAocmdGaWVsZDogUmFkaW9Hcm91cEZpZWxkKSA9PiAoZGF0YTogYW55KSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAoY29uc3QgaXRlbSBvZiBkYXRhKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCByYWRpbyA9IG5ldyBSYWRpbyhmb3JtLCB0aGlzLnRyYW5zbGF0aW9uU2VydmljZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByYWRpby5uYW1lID0gaXRlbVtcIm5hbWVcIl07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByYWRpby5rZXkgPSBpdGVtW1wia2V5XCJdW1wia2V5XCJdLnRvU3RyaW5nKCk7IC8vIGZvcmNlIHJhZGlvIGtleSB0eXBlIHN0cmluZyBmb3IgYW5ndWxhcjJcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChyYWRpby5rZXkgPT09IGl0ZW1bXCJkZWZhdWx0S2V5XCJdKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmdGaWVsZC5zZXRWYWx1ZShyYWRpby5rZXkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmdGaWVsZC5yYWRpb3MucHVzaChyYWRpbyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgcmdGaWVsZC5jcmVhdGVkID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coXCJyYWRpbyBncm91cCBmaWVsZCBjcmVhdGVkOiBcIiArIHJnRmllbGQuaWQpO1xyXG4gICAgICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgcmFkaW9Mb2FkZXJGb3JGaWVsZCA9IHJhZGlvTG9hZGVyKHJhZGlvR3JvdXBGb3JtRmllbGQpO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMucGF0aFNlcnZpY2Uuc2VydmVyR2V0KHRoaXMuZ2V0QmFja2VuZFVybCgpLCByYWRpb3NVcmwsIHJhZGlvTG9hZGVyRm9yRmllbGQsIG51bGwpO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICByYWRpb0dyb3VwRm9ybUZpZWxkLmNyZWF0ZWQgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgcmFkaW9Hcm91cEZvcm1GaWVsZC5mcm9tSnNvbihtb2RlbEZvcm1GaWVsZCk7XHJcbiAgICAgICAgICAgICAgICBmb3JtRmllbGQgPSByYWRpb0dyb3VwRm9ybUZpZWxkO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgY2FzZSBcIkNoZWNrYm94R3JvdXBGaWVsZFwiOiB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBjaGVja2JveEdyb3VwRmllbGQgPSBuZXcgQ2hlY2tib3hHcm91cEZpZWxkKGZvcm0sIHRoaXMudHJhbnNsYXRpb25TZXJ2aWNlKTtcclxuICAgICAgICAgICAgICAgIGNoZWNrYm94R3JvdXBGaWVsZC5mcm9tSnNvbihtb2RlbEZvcm1GaWVsZCk7XHJcbiAgICAgICAgICAgICAgICBmb3JtRmllbGQgPSBjaGVja2JveEdyb3VwRmllbGQ7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBjYXNlIFwiUHJvZ3Jlc3NCYXJGaWVsZFwiOiB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBwcm9ncmVzc0JhckZpZWxkID0gbmV3IFByb2dyZXNzQmFyRmllbGQoZm9ybSwgdGhpcy50cmFuc2xhdGlvblNlcnZpY2UpO1xyXG4gICAgICAgICAgICAgICAgcHJvZ3Jlc3NCYXJGaWVsZC5mcm9tSnNvbihtb2RlbEZvcm1GaWVsZCk7XHJcbiAgICAgICAgICAgICAgICBmb3JtRmllbGQgPSBwcm9ncmVzc0JhckZpZWxkO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgY2FzZSBcIm9rQnV0dG9uXCI6IHtcclxuICAgICAgICAgICAgICAgIGZvcm1GaWVsZCA9IG5ldyBPa0J1dHRvbihmb3JtLCB0aGlzLnRyYW5zbGF0aW9uU2VydmljZSk7XHJcbiAgICAgICAgICAgICAgICBmb3JtRmllbGQuZnJvbUpzb24obW9kZWxGb3JtRmllbGQpO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgY2FzZSBcImNhbmNlbEJ1dHRvblwiOiB7XHJcbiAgICAgICAgICAgICAgICBmb3JtRmllbGQgPSBuZXcgQ2FuY2VsQnV0dG9uKGZvcm0sIHRoaXMudHJhbnNsYXRpb25TZXJ2aWNlKTtcclxuICAgICAgICAgICAgICAgIGZvcm1GaWVsZC5mcm9tSnNvbihtb2RlbEZvcm1GaWVsZCk7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBjYXNlIFwiZGVsZXRlQnV0dG9uXCI6IHtcclxuICAgICAgICAgICAgICAgIGZvcm1GaWVsZCA9IG5ldyBGb3JtRGVsZXRlQnV0dG9uKGZvcm0sIHRoaXMudHJhbnNsYXRpb25TZXJ2aWNlKTtcclxuICAgICAgICAgICAgICAgIGZvcm1GaWVsZC5mcm9tSnNvbihtb2RlbEZvcm1GaWVsZCk7XHJcbiAgICAgICAgICAgICAgICBpZiAoZm9ybS5rZXkgPT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGZvcm1GaWVsZC52aXNpYmxlID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBjYXNlIFwicHJldmlvdXNCdXR0b25cIjoge1xyXG4gICAgICAgICAgICAgICAgZm9ybUZpZWxkID0gbmV3IFByZXZpb3VzQnV0dG9uKGZvcm0sIHRoaXMudHJhbnNsYXRpb25TZXJ2aWNlKTtcclxuICAgICAgICAgICAgICAgIGZvcm1GaWVsZC5mcm9tSnNvbihtb2RlbEZvcm1GaWVsZCk7XHJcbiAgICAgICAgICAgICAgICBpZiAoZm9ybS5rZXkgPT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGZvcm1GaWVsZC52aXNpYmxlID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBjYXNlIFwiZmlsZVVwbG9hZFwiOiB7XHJcbiAgICAgICAgICAgICAgICBmb3JtRmllbGQgPSBuZXcgRmlsZVVwbG9hZEZpZWxkKGZvcm0sIHRoaXMudHJhbnNsYXRpb25TZXJ2aWNlKTtcclxuICAgICAgICAgICAgICAgIG1vZGVsRm9ybUZpZWxkW1widXJsXCJdID0gS2V5VXRpbGl0eS50cmFuc2xhdGVVcmwobW9kZWxGb3JtRmllbGRbXCJ1cmxcIl0sIGZvcm0uZ2V0S2V5KCksIGZhbHNlLCBwYXJlbnRQYWdlRWxlbWVudCk7XHJcbiAgICAgICAgICAgICAgICBmb3JtRmllbGQuZnJvbUpzb24obW9kZWxGb3JtRmllbGQpO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZGVmYXVsdDoge1xyXG4gICAgICAgICAgICAgICAgZm9ybUZpZWxkID0gbmV3IEZvcm1GaWVsZChmb3JtLCB0aGlzLnRyYW5zbGF0aW9uU2VydmljZSk7XHJcbiAgICAgICAgICAgICAgICBmb3JtRmllbGQuZnJvbUpzb24obW9kZWxGb3JtRmllbGQpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIEZpZWxkIHBlcm1pc3Npb24gKG1vdmUgY29kZSB0byBGb3JtRmllbGQpXHJcbiAgICAgICAgaWYgKG1vZGVsRm9ybUZpZWxkW1wicGVybWlzc2lvblVybFwiXSAhPSBudWxsKSB7XHJcbiAgICAgICAgICAgIGZvcm1GaWVsZC5yZWFkb25seSA9IGZhbHNlO1xyXG4gICAgICAgICAgICBjb25zdCBwZXJtaXNzaW9uVXJsOiBzdHJpbmcgPSBLZXlVdGlsaXR5LnRyYW5zbGF0ZVVybChtb2RlbEZvcm1GaWVsZFtcInBlcm1pc3Npb25VcmxcIl0sXHJcbiAgICAgICAgICAgICAgICBmb3JtRmllbGQuZ2V0Rm9ybSgpLmdldEtleSgpLFxyXG4gICAgICAgICAgICAgICAgZmFsc2UsXHJcbiAgICAgICAgICAgICAgICBwYXJlbnRQYWdlRWxlbWVudCk7XHJcbiAgICAgICAgICAgIGNvbnN0IHBlcm1pc3Npb25IYW5kbGVyID0gKHBlcm1pc3Npb25FbGVtZW50OiBGb3JtRmllbGQpID0+IChkYXRhOiBhbnkpID0+IHtcclxuICAgICAgICAgICAgICAgIHBlcm1pc3Npb25FbGVtZW50LnJlYWRvbmx5ID0gIWRhdGFbXCJwZXJtaXNzaW9uXCJdO1xyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICB0aGlzLnBhdGhTZXJ2aWNlLnNlcnZlckdldChmb3JtRmllbGQuZ2V0Rm9ybSgpLmdldEFwcCgpLmdldEJhY2tlbmRVcmwoKSwgcGVybWlzc2lvblVybCwgcGVybWlzc2lvbkhhbmRsZXIoZm9ybUZpZWxkKSwgbnVsbCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIHNlYXJjaCBwYXJlbnRzIGZvciBkZWZhdWx0S2V5XHJcbiAgICAgICAgaWYgKGZvcm1GaWVsZCBpbnN0YW5jZW9mIFZhbHVlRmllbGQgJiYgbW9kZWxGb3JtRmllbGRbXCJkZWZhdWx0S2V5XCJdICE9IG51bGwpIHtcclxuICAgICAgICAgICAgbGV0IHBhZ2VFbGVtZW50OiBJUGFnZUVsZW1lbnQgPSBwYXJlbnRQYWdlRWxlbWVudDtcclxuICAgICAgICAgICAgd2hpbGUgKHBhZ2VFbGVtZW50ICE9IG51bGwpIHtcclxuICAgICAgICAgICAgICAgIGlmIChwYWdlRWxlbWVudC5nZXRLZXkoKSAhPSBudWxsICYmIHBhZ2VFbGVtZW50LmdldEtleSgpLmdldE5hbWUoKSA9PT0gbW9kZWxGb3JtRmllbGRbXCJkZWZhdWx0S2V5XCJdKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgKDxWYWx1ZUZpZWxkPGFueT4+Zm9ybUZpZWxkKS5zZXRWYWx1ZShwYWdlRWxlbWVudC5nZXRLZXkoKS5nZXRLZXkoKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgKDxWYWx1ZUZpZWxkPGFueT4+Zm9ybUZpZWxkKS5pc0luaXRpYWxWYWx1ZVNldCA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgcGFnZUVsZW1lbnQgPSBudWxsO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBwYWdlRWxlbWVudCA9IHBhZ2VFbGVtZW50LmdldFBhcmVudCgpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBmb3JtRmllbGQ7XHJcbiAgICB9XHJcblxyXG4gICAgdG9nZ2xlQ29sbGFwc2UoKSB7XHJcbiAgICAgICAgdGhpcy5zaG93ID0gIXRoaXMuc2hvdztcclxuICAgIH1cclxuXHJcbn1cclxuIl19