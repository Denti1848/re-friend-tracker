export class KeyUtility {
    static translateUrl(url, formKey, crudFormUrl, parentPageElement) {
        let translatedUrl = url;
        if (translatedUrl != null) {
            if (formKey != null && !(translatedUrl.indexOf(formKey.getName()) > 0) && crudFormUrl) {
                translatedUrl = translatedUrl + "/" + formKey.getKey();
            }
            if (formKey != null) {
                translatedUrl = translatedUrl.replace(":" + formKey.getName(), formKey.getKey());
            }
            let pageElement = parentPageElement;
            while (pageElement != null) {
                if (pageElement.getKey() != null) {
                    translatedUrl = translatedUrl.replace(":" + pageElement.getKey().getName(), pageElement.getKey().getKey());
                }
                pageElement = pageElement.getParent();
            }
        }
        return translatedUrl;
    }
    static findKey(pageElement, name) {
        let searchKeyName = name;
        if (searchKeyName) {
            searchKeyName = searchKeyName.replace(":", "");
            while (pageElement != null) {
                if (pageElement.getKey() != null && pageElement.getKey().getName() === searchKeyName) {
                    return pageElement.getKey();
                }
                pageElement = pageElement.getParent();
            }
        }
        return null;
    }
    static replaceVariable(url, variable, value) {
        // replace variables at line end
        let regExp = new RegExp(":" + variable + "$", "g");
        url = url.replace(regExp, value);
        // replace variables in middle of line
        regExp = new RegExp(":" + variable + "\/", "g");
        url = url.replace(regExp, value + "/");
        return url;
    }
    static variableExists(url, variable) {
        const regExp = new RegExp(":" + variable + "$", "g");
        const regExp2 = new RegExp(":" + variable + "\/", "g");
        return url.search(regExp) !== -1 || url.search(regExp2) !== -1;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoia2V5LXV0aWxpdHkuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9wYXRoLWZyYW1ld29yay8iLCJzb3VyY2VzIjpbInBhdGgtZnJhbWV3b3JrL3V0aWxpdHkva2V5LXV0aWxpdHkudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBR0EsTUFBTSxPQUFPLFVBQVU7SUFFWixNQUFNLENBQUMsWUFBWSxDQUFDLEdBQVcsRUFBRSxPQUFhLEVBQUUsV0FBb0IsRUFBRSxpQkFBK0I7UUFDeEcsSUFBSSxhQUFhLEdBQVEsR0FBRyxDQUFDO1FBRTdCLElBQUksYUFBYSxJQUFJLElBQUksRUFBRTtZQUN2QixJQUFJLE9BQU8sSUFBSSxJQUFJLElBQUksQ0FBQyxDQUFDLGFBQWEsQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLE9BQU8sRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksV0FBVyxFQUFFO2dCQUNuRixhQUFhLEdBQUcsYUFBYSxHQUFHLEdBQUcsR0FBRyxPQUFPLENBQUMsTUFBTSxFQUFFLENBQUM7YUFDMUQ7WUFDRCxJQUFJLE9BQU8sSUFBSSxJQUFJLEVBQUU7Z0JBQ2pCLGFBQWEsR0FBRyxhQUFhLENBQUMsT0FBTyxDQUFDLEdBQUcsR0FBRyxPQUFPLENBQUMsT0FBTyxFQUFFLEVBQUUsT0FBTyxDQUFDLE1BQU0sRUFBRSxDQUFDLENBQUM7YUFDcEY7WUFDRCxJQUFJLFdBQVcsR0FBRyxpQkFBaUIsQ0FBQztZQUNwQyxPQUFPLFdBQVcsSUFBSSxJQUFJLEVBQUU7Z0JBQ3hCLElBQUksV0FBVyxDQUFDLE1BQU0sRUFBRSxJQUFJLElBQUksRUFBRTtvQkFDOUIsYUFBYSxHQUFHLGFBQWEsQ0FBQyxPQUFPLENBQUMsR0FBRyxHQUFHLFdBQVcsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxPQUFPLEVBQUUsRUFBRSxXQUFXLENBQUMsTUFBTSxFQUFFLENBQUMsTUFBTSxFQUFFLENBQUMsQ0FBQztpQkFDOUc7Z0JBQ0QsV0FBVyxHQUFHLFdBQVcsQ0FBQyxTQUFTLEVBQUUsQ0FBQzthQUN6QztTQUNKO1FBRUQsT0FBTyxhQUFhLENBQUM7SUFDekIsQ0FBQztJQUVNLE1BQU0sQ0FBQyxPQUFPLENBQUMsV0FBeUIsRUFBRSxJQUFZO1FBQ3pELElBQUksYUFBYSxHQUFHLElBQUksQ0FBQztRQUN6QixJQUFJLGFBQWEsRUFBRTtZQUNmLGFBQWEsR0FBRyxhQUFhLENBQUMsT0FBTyxDQUFDLEdBQUcsRUFBRSxFQUFFLENBQUMsQ0FBQztZQUMvQyxPQUFPLFdBQVcsSUFBSSxJQUFJLEVBQUU7Z0JBQ3hCLElBQUksV0FBVyxDQUFDLE1BQU0sRUFBRSxJQUFJLElBQUksSUFBSSxXQUFXLENBQUMsTUFBTSxFQUFFLENBQUMsT0FBTyxFQUFFLEtBQUssYUFBYSxFQUFFO29CQUNsRixPQUFZLFdBQVcsQ0FBQyxNQUFNLEVBQUUsQ0FBQztpQkFDcEM7Z0JBQ0QsV0FBVyxHQUFHLFdBQVcsQ0FBQyxTQUFTLEVBQUUsQ0FBQzthQUN6QztTQUNKO1FBQ0QsT0FBTyxJQUFJLENBQUM7SUFDaEIsQ0FBQztJQUVNLE1BQU0sQ0FBQyxlQUFlLENBQUMsR0FBVyxFQUFFLFFBQWdCLEVBQUUsS0FBYTtRQUN0RSxnQ0FBZ0M7UUFDaEMsSUFBSSxNQUFNLEdBQUcsSUFBSSxNQUFNLENBQUMsR0FBRyxHQUFHLFFBQVEsR0FBRyxHQUFHLEVBQUUsR0FBRyxDQUFDLENBQUM7UUFDbkQsR0FBRyxHQUFHLEdBQUcsQ0FBQyxPQUFPLENBQUMsTUFBTSxFQUFFLEtBQUssQ0FBQyxDQUFDO1FBQ2pDLHNDQUFzQztRQUN0QyxNQUFNLEdBQUcsSUFBSSxNQUFNLENBQUMsR0FBRyxHQUFHLFFBQVEsR0FBRyxJQUFJLEVBQUUsR0FBRyxDQUFDLENBQUM7UUFDaEQsR0FBRyxHQUFHLEdBQUcsQ0FBQyxPQUFPLENBQUMsTUFBTSxFQUFFLEtBQUssR0FBRyxHQUFHLENBQUMsQ0FBQztRQUN2QyxPQUFPLEdBQUcsQ0FBQztJQUNmLENBQUM7SUFFTSxNQUFNLENBQUMsY0FBYyxDQUFDLEdBQVcsRUFBRSxRQUFnQjtRQUN0RCxNQUFNLE1BQU0sR0FBRyxJQUFJLE1BQU0sQ0FBQyxHQUFHLEdBQUcsUUFBUSxHQUFHLEdBQUcsRUFBRSxHQUFHLENBQUMsQ0FBQztRQUNyRCxNQUFNLE9BQU8sR0FBRyxJQUFJLE1BQU0sQ0FBQyxHQUFHLEdBQUcsUUFBUSxHQUFHLElBQUksRUFBRSxHQUFHLENBQUMsQ0FBQztRQUN2RCxPQUFPLEdBQUcsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDLElBQUksR0FBRyxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQztJQUNuRSxDQUFDO0NBRUoiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0lQYWdlRWxlbWVudCwgSUtleX0gZnJvbSBcIi4uL3BhdGhpbnRlcmZhY2VcIjtcclxuaW1wb3J0IHtLZXl9IGZyb20gXCIuLi9wYWdlL2VsZW1lbnQvcGFnZS1lbGVtZW50XCI7XHJcblxyXG5leHBvcnQgY2xhc3MgS2V5VXRpbGl0eSB7XHJcblxyXG4gICAgcHVibGljIHN0YXRpYyB0cmFuc2xhdGVVcmwodXJsOiBzdHJpbmcsIGZvcm1LZXk6IElLZXksIGNydWRGb3JtVXJsOiBib29sZWFuLCBwYXJlbnRQYWdlRWxlbWVudDogSVBhZ2VFbGVtZW50KTogc3RyaW5nIHtcclxuICAgICAgICBsZXQgdHJhbnNsYXRlZFVybDogYW55ID0gdXJsO1xyXG5cclxuICAgICAgICBpZiAodHJhbnNsYXRlZFVybCAhPSBudWxsKSB7XHJcbiAgICAgICAgICAgIGlmIChmb3JtS2V5ICE9IG51bGwgJiYgISh0cmFuc2xhdGVkVXJsLmluZGV4T2YoZm9ybUtleS5nZXROYW1lKCkpID4gMCkgJiYgY3J1ZEZvcm1VcmwpIHtcclxuICAgICAgICAgICAgICAgIHRyYW5zbGF0ZWRVcmwgPSB0cmFuc2xhdGVkVXJsICsgXCIvXCIgKyBmb3JtS2V5LmdldEtleSgpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmIChmb3JtS2V5ICE9IG51bGwpIHtcclxuICAgICAgICAgICAgICAgIHRyYW5zbGF0ZWRVcmwgPSB0cmFuc2xhdGVkVXJsLnJlcGxhY2UoXCI6XCIgKyBmb3JtS2V5LmdldE5hbWUoKSwgZm9ybUtleS5nZXRLZXkoKSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgbGV0IHBhZ2VFbGVtZW50ID0gcGFyZW50UGFnZUVsZW1lbnQ7XHJcbiAgICAgICAgICAgIHdoaWxlIChwYWdlRWxlbWVudCAhPSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAocGFnZUVsZW1lbnQuZ2V0S2V5KCkgIT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRyYW5zbGF0ZWRVcmwgPSB0cmFuc2xhdGVkVXJsLnJlcGxhY2UoXCI6XCIgKyBwYWdlRWxlbWVudC5nZXRLZXkoKS5nZXROYW1lKCksIHBhZ2VFbGVtZW50LmdldEtleSgpLmdldEtleSgpKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHBhZ2VFbGVtZW50ID0gcGFnZUVsZW1lbnQuZ2V0UGFyZW50KCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiB0cmFuc2xhdGVkVXJsO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBzdGF0aWMgZmluZEtleShwYWdlRWxlbWVudDogSVBhZ2VFbGVtZW50LCBuYW1lOiBzdHJpbmcpOiBLZXkge1xyXG4gICAgICAgIGxldCBzZWFyY2hLZXlOYW1lID0gbmFtZTtcclxuICAgICAgICBpZiAoc2VhcmNoS2V5TmFtZSkge1xyXG4gICAgICAgICAgICBzZWFyY2hLZXlOYW1lID0gc2VhcmNoS2V5TmFtZS5yZXBsYWNlKFwiOlwiLCBcIlwiKTtcclxuICAgICAgICAgICAgd2hpbGUgKHBhZ2VFbGVtZW50ICE9IG51bGwpIHtcclxuICAgICAgICAgICAgICAgIGlmIChwYWdlRWxlbWVudC5nZXRLZXkoKSAhPSBudWxsICYmIHBhZ2VFbGVtZW50LmdldEtleSgpLmdldE5hbWUoKSA9PT0gc2VhcmNoS2V5TmFtZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiA8S2V5PnBhZ2VFbGVtZW50LmdldEtleSgpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgcGFnZUVsZW1lbnQgPSBwYWdlRWxlbWVudC5nZXRQYXJlbnQoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgc3RhdGljIHJlcGxhY2VWYXJpYWJsZSh1cmw6IHN0cmluZywgdmFyaWFibGU6IHN0cmluZywgdmFsdWU6IHN0cmluZyk6IHN0cmluZyB7XHJcbiAgICAgICAgLy8gcmVwbGFjZSB2YXJpYWJsZXMgYXQgbGluZSBlbmRcclxuICAgICAgICBsZXQgcmVnRXhwID0gbmV3IFJlZ0V4cChcIjpcIiArIHZhcmlhYmxlICsgXCIkXCIsIFwiZ1wiKTtcclxuICAgICAgICB1cmwgPSB1cmwucmVwbGFjZShyZWdFeHAsIHZhbHVlKTtcclxuICAgICAgICAvLyByZXBsYWNlIHZhcmlhYmxlcyBpbiBtaWRkbGUgb2YgbGluZVxyXG4gICAgICAgIHJlZ0V4cCA9IG5ldyBSZWdFeHAoXCI6XCIgKyB2YXJpYWJsZSArIFwiXFwvXCIsIFwiZ1wiKTtcclxuICAgICAgICB1cmwgPSB1cmwucmVwbGFjZShyZWdFeHAsIHZhbHVlICsgXCIvXCIpO1xyXG4gICAgICAgIHJldHVybiB1cmw7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIHN0YXRpYyB2YXJpYWJsZUV4aXN0cyh1cmw6IHN0cmluZywgdmFyaWFibGU6IHN0cmluZyk6IGJvb2xlYW4ge1xyXG4gICAgICAgIGNvbnN0IHJlZ0V4cCA9IG5ldyBSZWdFeHAoXCI6XCIgKyB2YXJpYWJsZSArIFwiJFwiLCBcImdcIik7XHJcbiAgICAgICAgY29uc3QgcmVnRXhwMiA9IG5ldyBSZWdFeHAoXCI6XCIgKyB2YXJpYWJsZSArIFwiXFwvXCIsIFwiZ1wiKTtcclxuICAgICAgICByZXR1cm4gdXJsLnNlYXJjaChyZWdFeHApICE9PSAtMSB8fCB1cmwuc2VhcmNoKHJlZ0V4cDIpICE9PSAtMTtcclxuICAgIH1cclxuXHJcbn1cclxuIl19