import * as tslib_1 from "tslib";
import { Directive, ElementRef, HostListener, Input, OnInit } from "@angular/core";
// Initially by https://github.com/cedvdb/ng2draggable
// MIT License: https://github.com/cedvdb/ng2draggable/blob/master/LICENSE
let DraggableDirective = class DraggableDirective {
    constructor(element) {
        this.element = element;
        this.topStart = 0;
        this.leftStart = 0;
        this._allowDrag = true;
    }
    ngOnInit() {
        // draggable only for desktop version (styles for desktop are added when innerWidth>1100)
        if (window.innerWidth < 768) {
            this._allowDrag = false;
        }
        // css changes
        if (this._allowDrag) {
            this.element.nativeElement.style.position = "relative";
            this.element.nativeElement.className += " cursor-draggable";
        }
    }
    set allowDrag(value) {
        this._allowDrag = value;
        if (this._allowDrag) {
            this.element.nativeElement.className += " cursor-draggable";
        }
        else {
            this.element.nativeElement.className = this.element.nativeElement.className.replace(" cursor-draggable", "");
        }
    }
    onMouseDown(event) {
        const eventTargetTag = event.target["tagName"].toLowerCase();
        if (eventTargetTag === "input" || eventTargetTag === "button" || eventTargetTag === "textarea") {
            return;
        }
        if (event.button === 2) {
            return; // prevents right click drag, remove his if you don't want it
        }
        this.md = true;
        this.topStart = event.clientY - this.element.nativeElement.style.top.replace("px", "");
        this.leftStart = event.clientX - this.element.nativeElement.style.left.replace("px", "");
    }
    onMouseUp(event) {
        this.md = false;
    }
    onMouseMove(event) {
        if (this.md && this._allowDrag) {
            this.element.nativeElement.style.top = (event.clientY - this.topStart) + "px";
            this.element.nativeElement.style.left = (event.clientX - this.leftStart) + "px";
        }
    }
    onTouchStart(event) {
        this.md = true;
        this.topStart = event.changedTouches[0].clientY - this.element.nativeElement.style.top.replace("px", "");
        this.leftStart = event.changedTouches[0].clientX - this.element.nativeElement.style.left.replace("px", "");
        event.stopPropagation();
    }
    onTouchEnd() {
        this.md = false;
    }
    onTouchMove(event) {
        if (this.md && this._allowDrag) {
            this.element.nativeElement.style.top = (event.changedTouches[0].clientY - this.topStart) + "px";
            this.element.nativeElement.style.left = (event.changedTouches[0].clientX - this.leftStart) + "px";
        }
        event.stopPropagation();
    }
};
DraggableDirective.ctorParameters = () => [
    { type: ElementRef }
];
tslib_1.__decorate([
    Input("path-draggable")
], DraggableDirective.prototype, "allowDrag", null);
tslib_1.__decorate([
    HostListener("mousedown", ["$event"])
], DraggableDirective.prototype, "onMouseDown", null);
tslib_1.__decorate([
    HostListener("document:mouseup")
], DraggableDirective.prototype, "onMouseUp", null);
tslib_1.__decorate([
    HostListener("document:mousemove", ["$event"])
], DraggableDirective.prototype, "onMouseMove", null);
tslib_1.__decorate([
    HostListener("touchstart", ["$event"])
], DraggableDirective.prototype, "onTouchStart", null);
tslib_1.__decorate([
    HostListener("document:touchend")
], DraggableDirective.prototype, "onTouchEnd", null);
tslib_1.__decorate([
    HostListener("document:touchmove", ["$event"])
], DraggableDirective.prototype, "onTouchMove", null);
DraggableDirective = tslib_1.__decorate([
    Directive({
        selector: "[path-draggable]"
    })
], DraggableDirective);
export { DraggableDirective };
//# sourceMappingURL=data:application/json;base64,