import * as tslib_1 from "tslib";
import { Component, Input, Output } from "@angular/core";
import { ValueField } from "../value-field";
let CheckboxGroupComponent = class CheckboxGroupComponent {
};
tslib_1.__decorate([
    Input("field"),
    Output("field")
], CheckboxGroupComponent.prototype, "field", void 0);
CheckboxGroupComponent = tslib_1.__decorate([
    Component({
        selector: "path-checkbox-group",
        template: "<path-form-field-label [label]=\"field.name\" [required]=\"field.required\"></path-form-field-label>\r\n<div class=\"checkbox\" [class.col-md-4]=\"field.width == 1\" [class.col-md-10]=\"field.width == 2\">\r\n    <span *ngFor=\"let entry of field.entries\">\r\n        <label class=\"checkbox-inline\">\r\n            <input type=\"checkbox\" [(ngModel)]=\"entry.selected\" (ngModelChange)=\"field.doClick()\">\r\n            <span class=\"checkbox-label\"> {{entry.name}}&nbsp;&nbsp;</span>\r\n        </label>\r\n    </span>\r\n</div>\r\n"
    })
], CheckboxGroupComponent);
export { CheckboxGroupComponent };
export class CheckboxGroupField extends ValueField {
    constructor() {
        super(...arguments);
        this._entries = [];
    }
    get entries() {
        return this._entries;
    }
    set entries(value) {
        this._entries = value;
    }
    doClick() {
        const values = [];
        for (const entry of this.entries) {
            if (entry.selected) {
                values.push(entry.key);
            }
        }
        this.setValue(values);
    }
    setValue(values) {
        super.setValue(values);
        for (const entry of this.entries) {
            entry.selected = false;
        }
        for (const value of values) {
            for (const entry of this.entries) {
                if (entry.key === value) {
                    entry.selected = true;
                }
            }
        }
    }
    fromJson(modelFormField) {
        super.fromJson(modelFormField);
        for (const entryModel of modelFormField["data"]) {
            const entry = new CheckboxGroupEntry();
            entry.name = entryModel.name;
            entry.key = entryModel.key;
            entry.selected = false;
            this.entries.push(entry);
        }
    }
}
export class CheckboxGroupEntry {
    get key() {
        return this._key;
    }
    set key(value) {
        this._key = value;
    }
    get name() {
        return this._name;
    }
    set name(value) {
        this._name = value;
    }
    get selected() {
        return this._selected;
    }
    set selected(value) {
        this._selected = value;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2hlY2tib3gtZ3JvdXAuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vcGF0aC1mcmFtZXdvcmsvIiwic291cmNlcyI6WyJwYXRoLWZyYW1ld29yay9mb3JtL2ZpZWxkL2NoZWNrYm94L2NoZWNrYm94LWdyb3VwLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFDLFNBQVMsRUFBRSxLQUFLLEVBQUUsTUFBTSxFQUFDLE1BQU0sZUFBZSxDQUFDO0FBQ3ZELE9BQU8sRUFBQyxVQUFVLEVBQUMsTUFBTSxnQkFBZ0IsQ0FBQztBQU0xQyxJQUFhLHNCQUFzQixHQUFuQyxNQUFhLHNCQUFzQjtDQUlsQyxDQUFBO0FBREc7SUFGQyxLQUFLLENBQUMsT0FBTyxDQUFDO0lBQ2QsTUFBTSxDQUFDLE9BQU8sQ0FBQztxREFDVTtBQUhqQixzQkFBc0I7SUFKbEMsU0FBUyxDQUFDO1FBQ1AsUUFBUSxFQUFFLHFCQUFxQjtRQUMvQix3aUJBQTRDO0tBQy9DLENBQUM7R0FDVyxzQkFBc0IsQ0FJbEM7U0FKWSxzQkFBc0I7QUFNbkMsTUFBTSxPQUFPLGtCQUFtQixTQUFRLFVBQWlCO0lBQXpEOztRQUNZLGFBQVEsR0FBeUIsRUFBRSxDQUFDO0lBNENoRCxDQUFDO0lBMUNHLElBQUksT0FBTztRQUNQLE9BQU8sSUFBSSxDQUFDLFFBQVEsQ0FBQztJQUN6QixDQUFDO0lBRUQsSUFBSSxPQUFPLENBQUMsS0FBMkI7UUFDbkMsSUFBSSxDQUFDLFFBQVEsR0FBRyxLQUFLLENBQUM7SUFDMUIsQ0FBQztJQUVNLE9BQU87UUFDVixNQUFNLE1BQU0sR0FBVSxFQUFFLENBQUM7UUFDekIsS0FBSyxNQUFNLEtBQUssSUFBSSxJQUFJLENBQUMsT0FBTyxFQUFFO1lBQzlCLElBQUksS0FBSyxDQUFDLFFBQVEsRUFBRTtnQkFDaEIsTUFBTSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUM7YUFDMUI7U0FDSjtRQUNELElBQUksQ0FBQyxRQUFRLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDMUIsQ0FBQztJQUVNLFFBQVEsQ0FBQyxNQUFhO1FBQ3pCLEtBQUssQ0FBQyxRQUFRLENBQUMsTUFBTSxDQUFDLENBQUM7UUFDdkIsS0FBSyxNQUFNLEtBQUssSUFBSSxJQUFJLENBQUMsT0FBTyxFQUFFO1lBQzlCLEtBQUssQ0FBQyxRQUFRLEdBQUcsS0FBSyxDQUFDO1NBQzFCO1FBQ0QsS0FBSyxNQUFNLEtBQUssSUFBSSxNQUFNLEVBQUU7WUFDeEIsS0FBSyxNQUFNLEtBQUssSUFBSSxJQUFJLENBQUMsT0FBTyxFQUFFO2dCQUM5QixJQUFJLEtBQUssQ0FBQyxHQUFHLEtBQUssS0FBSyxFQUFFO29CQUNyQixLQUFLLENBQUMsUUFBUSxHQUFHLElBQUksQ0FBQztpQkFDekI7YUFDSjtTQUNKO0lBQ0wsQ0FBQztJQUVNLFFBQVEsQ0FBQyxjQUFjO1FBQzFCLEtBQUssQ0FBQyxRQUFRLENBQUMsY0FBYyxDQUFDLENBQUM7UUFDL0IsS0FBSyxNQUFNLFVBQVUsSUFBSSxjQUFjLENBQUMsTUFBTSxDQUFDLEVBQUU7WUFDN0MsTUFBTSxLQUFLLEdBQUcsSUFBSSxrQkFBa0IsRUFBRSxDQUFDO1lBQ3ZDLEtBQUssQ0FBQyxJQUFJLEdBQUcsVUFBVSxDQUFDLElBQUksQ0FBQztZQUM3QixLQUFLLENBQUMsR0FBRyxHQUFHLFVBQVUsQ0FBQyxHQUFHLENBQUM7WUFDM0IsS0FBSyxDQUFDLFFBQVEsR0FBRyxLQUFLLENBQUM7WUFDdkIsSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7U0FDNUI7SUFDTCxDQUFDO0NBQ0o7QUFFRCxNQUFNLE9BQU8sa0JBQWtCO0lBSzNCLElBQUksR0FBRztRQUNILE9BQU8sSUFBSSxDQUFDLElBQUksQ0FBQztJQUNyQixDQUFDO0lBRUQsSUFBSSxHQUFHLENBQUMsS0FBVTtRQUNkLElBQUksQ0FBQyxJQUFJLEdBQUcsS0FBSyxDQUFDO0lBQ3RCLENBQUM7SUFFRCxJQUFJLElBQUk7UUFDSixPQUFPLElBQUksQ0FBQyxLQUFLLENBQUM7SUFDdEIsQ0FBQztJQUVELElBQUksSUFBSSxDQUFDLEtBQWE7UUFDbEIsSUFBSSxDQUFDLEtBQUssR0FBRyxLQUFLLENBQUM7SUFDdkIsQ0FBQztJQUVELElBQUksUUFBUTtRQUNSLE9BQU8sSUFBSSxDQUFDLFNBQVMsQ0FBQztJQUMxQixDQUFDO0lBRUQsSUFBSSxRQUFRLENBQUMsS0FBYztRQUN2QixJQUFJLENBQUMsU0FBUyxHQUFHLEtBQUssQ0FBQztJQUMzQixDQUFDO0NBQ0oiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0NvbXBvbmVudCwgSW5wdXQsIE91dHB1dH0gZnJvbSBcIkBhbmd1bGFyL2NvcmVcIjtcclxuaW1wb3J0IHtWYWx1ZUZpZWxkfSBmcm9tIFwiLi4vdmFsdWUtZmllbGRcIjtcclxuXHJcbkBDb21wb25lbnQoe1xyXG4gICAgc2VsZWN0b3I6IFwicGF0aC1jaGVja2JveC1ncm91cFwiLFxyXG4gICAgdGVtcGxhdGVVcmw6IFwiY2hlY2tib3gtZ3JvdXAuY29tcG9uZW50Lmh0bWxcIlxyXG59KVxyXG5leHBvcnQgY2xhc3MgQ2hlY2tib3hHcm91cENvbXBvbmVudCB7XHJcbiAgICBASW5wdXQoXCJmaWVsZFwiKVxyXG4gICAgQE91dHB1dChcImZpZWxkXCIpXHJcbiAgICBmaWVsZDogQ2hlY2tib3hHcm91cEZpZWxkO1xyXG59XHJcblxyXG5leHBvcnQgY2xhc3MgQ2hlY2tib3hHcm91cEZpZWxkIGV4dGVuZHMgVmFsdWVGaWVsZDxhbnlbXT4ge1xyXG4gICAgcHJpdmF0ZSBfZW50cmllczogQ2hlY2tib3hHcm91cEVudHJ5W10gPSBbXTtcclxuXHJcbiAgICBnZXQgZW50cmllcygpOiBDaGVja2JveEdyb3VwRW50cnlbXSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2VudHJpZXM7XHJcbiAgICB9XHJcblxyXG4gICAgc2V0IGVudHJpZXModmFsdWU6IENoZWNrYm94R3JvdXBFbnRyeVtdKSB7XHJcbiAgICAgICAgdGhpcy5fZW50cmllcyA9IHZhbHVlO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBkb0NsaWNrKCkge1xyXG4gICAgICAgIGNvbnN0IHZhbHVlczogYW55W10gPSBbXTtcclxuICAgICAgICBmb3IgKGNvbnN0IGVudHJ5IG9mIHRoaXMuZW50cmllcykge1xyXG4gICAgICAgICAgICBpZiAoZW50cnkuc2VsZWN0ZWQpIHtcclxuICAgICAgICAgICAgICAgIHZhbHVlcy5wdXNoKGVudHJ5LmtleSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5zZXRWYWx1ZSh2YWx1ZXMpO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBzZXRWYWx1ZSh2YWx1ZXM6IGFueVtdKSB7XHJcbiAgICAgICAgc3VwZXIuc2V0VmFsdWUodmFsdWVzKTtcclxuICAgICAgICBmb3IgKGNvbnN0IGVudHJ5IG9mIHRoaXMuZW50cmllcykge1xyXG4gICAgICAgICAgICBlbnRyeS5zZWxlY3RlZCA9IGZhbHNlO1xyXG4gICAgICAgIH1cclxuICAgICAgICBmb3IgKGNvbnN0IHZhbHVlIG9mIHZhbHVlcykge1xyXG4gICAgICAgICAgICBmb3IgKGNvbnN0IGVudHJ5IG9mIHRoaXMuZW50cmllcykge1xyXG4gICAgICAgICAgICAgICAgaWYgKGVudHJ5LmtleSA9PT0gdmFsdWUpIHtcclxuICAgICAgICAgICAgICAgICAgICBlbnRyeS5zZWxlY3RlZCA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGZyb21Kc29uKG1vZGVsRm9ybUZpZWxkKSB7XHJcbiAgICAgICAgc3VwZXIuZnJvbUpzb24obW9kZWxGb3JtRmllbGQpO1xyXG4gICAgICAgIGZvciAoY29uc3QgZW50cnlNb2RlbCBvZiBtb2RlbEZvcm1GaWVsZFtcImRhdGFcIl0pIHtcclxuICAgICAgICAgICAgY29uc3QgZW50cnkgPSBuZXcgQ2hlY2tib3hHcm91cEVudHJ5KCk7XHJcbiAgICAgICAgICAgIGVudHJ5Lm5hbWUgPSBlbnRyeU1vZGVsLm5hbWU7XHJcbiAgICAgICAgICAgIGVudHJ5LmtleSA9IGVudHJ5TW9kZWwua2V5O1xyXG4gICAgICAgICAgICBlbnRyeS5zZWxlY3RlZCA9IGZhbHNlO1xyXG4gICAgICAgICAgICB0aGlzLmVudHJpZXMucHVzaChlbnRyeSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XHJcblxyXG5leHBvcnQgY2xhc3MgQ2hlY2tib3hHcm91cEVudHJ5IHtcclxuICAgIHByaXZhdGUgX2tleTogYW55O1xyXG4gICAgcHJpdmF0ZSBfbmFtZTogc3RyaW5nO1xyXG4gICAgcHJpdmF0ZSBfc2VsZWN0ZWQ6IGJvb2xlYW47XHJcblxyXG4gICAgZ2V0IGtleSgpOiBhbnkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9rZXk7XHJcbiAgICB9XHJcblxyXG4gICAgc2V0IGtleSh2YWx1ZTogYW55KSB7XHJcbiAgICAgICAgdGhpcy5fa2V5ID0gdmFsdWU7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0IG5hbWUoKTogc3RyaW5nIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fbmFtZTtcclxuICAgIH1cclxuXHJcbiAgICBzZXQgbmFtZSh2YWx1ZTogc3RyaW5nKSB7XHJcbiAgICAgICAgdGhpcy5fbmFtZSA9IHZhbHVlO1xyXG4gICAgfVxyXG5cclxuICAgIGdldCBzZWxlY3RlZCgpOiBib29sZWFuIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fc2VsZWN0ZWQ7XHJcbiAgICB9XHJcblxyXG4gICAgc2V0IHNlbGVjdGVkKHZhbHVlOiBib29sZWFuKSB7XHJcbiAgICAgICAgdGhpcy5fc2VsZWN0ZWQgPSB2YWx1ZTtcclxuICAgIH1cclxufVxyXG4iXX0=