import * as tslib_1 from "tslib";
import { Component, Input, Output } from "@angular/core";
import { Radio } from "./radio";
import { ValueField } from "../value-field";
let RadioGroupComponent = class RadioGroupComponent {
};
tslib_1.__decorate([
    Input("field"),
    Output("field")
], RadioGroupComponent.prototype, "field", void 0);
RadioGroupComponent = tslib_1.__decorate([
    Component({
        selector: "path-radio-group",
        template: "<path-form-field-label [label]=\"field.name\" [required]=\"field.required\"></path-form-field-label>\r\n<div [class.col-md-4]=\"field.width == 1\" [class.col-md-10]=\"field.width == 2\">\r\n\t<div [ngClass]=\"{'radio': field.horizontal}\">\r\n        <span *ngFor='let radioElement of field.radios' [ngClass]=\"{'radio': !field.horizontal}\">\r\n            <label>\r\n                <input #radio name=\"{{field.id}}\" [(ngModel)]=\"field.value\" (click)=\"field.updateValueFromGui(radioElement.key)\" [value]=\"radioElement.key.toString()\" [disabled]=\"field.isReadonly()\" type=\"radio\">\r\n                <span> {{radioElement.name}}&nbsp;&nbsp;</span>\r\n            </label>\r\n        </span>\r\n\t</div>\r\n</div>\r\n"
    })
], RadioGroupComponent);
export { RadioGroupComponent };
export class RadioGroupField extends ValueField {
    constructor() {
        super(...arguments);
        this._radios = [];
    }
    get radios() {
        return this._radios;
    }
    set radios(value) {
        this._radios = value;
    }
    get horizontal() {
        return this._horizontal;
    }
    set horizontal(value) {
        this._horizontal = value;
    }
    setValue(value) {
        if (value != null) {
            value = value.toString();
        }
        super.setValue(value);
    }
    updateValueFromGui(value) {
        this.setValue(value.toString());
    }
    isReadonly() {
        return super.isReadonly() && this.isInitialValueSet;
    }
    fromJson(modelFormField) {
        super.fromJson(modelFormField);
        this._horizontal = true;
        if (modelFormField["alignment"] != null) {
            if (modelFormField["alignment"] === "vertical") {
                this._horizontal = false;
            }
        }
        if (modelFormField["radios"] != null) {
            for (const radioModel of modelFormField["radios"]) {
                const radio = new Radio(this.getForm(), this.translationService);
                radio.name = radioModel.name;
                radio.key = radioModel.key;
                if (radio.key === modelFormField["defaultKey"]) {
                    this.setValue(radio.key);
                }
                this.radios.push(radio);
            }
        }
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmFkaW8tZ3JvdXAuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vcGF0aC1mcmFtZXdvcmsvIiwic291cmNlcyI6WyJwYXRoLWZyYW1ld29yay9mb3JtL2ZpZWxkL3JhZGlvL3JhZGlvLWdyb3VwLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFDLFNBQVMsRUFBRSxLQUFLLEVBQUUsTUFBTSxFQUFDLE1BQU0sZUFBZSxDQUFDO0FBQ3ZELE9BQU8sRUFBQyxLQUFLLEVBQUMsTUFBTSxTQUFTLENBQUM7QUFDOUIsT0FBTyxFQUFDLFVBQVUsRUFBQyxNQUFNLGdCQUFnQixDQUFDO0FBTTFDLElBQWEsbUJBQW1CLEdBQWhDLE1BQWEsbUJBQW1CO0NBSS9CLENBQUE7QUFERztJQUZDLEtBQUssQ0FBQyxPQUFPLENBQUM7SUFDZCxNQUFNLENBQUMsT0FBTyxDQUFDO2tEQUNPO0FBSGQsbUJBQW1CO0lBSi9CLFNBQVMsQ0FBQztRQUNQLFFBQVEsRUFBRSxrQkFBa0I7UUFDNUIscXVCQUF5QztLQUM1QyxDQUFDO0dBQ1csbUJBQW1CLENBSS9CO1NBSlksbUJBQW1CO0FBTWhDLE1BQU0sT0FBTyxlQUFnQixTQUFRLFVBQWtCO0lBQXZEOztRQUNZLFlBQU8sR0FBWSxFQUFFLENBQUM7SUFzRGxDLENBQUM7SUFuREcsSUFBSSxNQUFNO1FBQ04sT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDO0lBQ3hCLENBQUM7SUFFRCxJQUFJLE1BQU0sQ0FBQyxLQUFjO1FBQ3JCLElBQUksQ0FBQyxPQUFPLEdBQUcsS0FBSyxDQUFDO0lBQ3pCLENBQUM7SUFFRCxJQUFJLFVBQVU7UUFDVixPQUFPLElBQUksQ0FBQyxXQUFXLENBQUM7SUFDNUIsQ0FBQztJQUVELElBQUksVUFBVSxDQUFDLEtBQWM7UUFDekIsSUFBSSxDQUFDLFdBQVcsR0FBRyxLQUFLLENBQUM7SUFDN0IsQ0FBQztJQUVNLFFBQVEsQ0FBQyxLQUFhO1FBQ3pCLElBQUksS0FBSyxJQUFJLElBQUksRUFBRTtZQUNmLEtBQUssR0FBRyxLQUFLLENBQUMsUUFBUSxFQUFFLENBQUM7U0FDNUI7UUFDRCxLQUFLLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQzFCLENBQUM7SUFFTSxrQkFBa0IsQ0FBQyxLQUFhO1FBQ25DLElBQUksQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUM7SUFDcEMsQ0FBQztJQUVNLFVBQVU7UUFDYixPQUFPLEtBQUssQ0FBQyxVQUFVLEVBQUUsSUFBSSxJQUFJLENBQUMsaUJBQWlCLENBQUM7SUFDeEQsQ0FBQztJQUVNLFFBQVEsQ0FBQyxjQUFjO1FBQzFCLEtBQUssQ0FBQyxRQUFRLENBQUMsY0FBYyxDQUFDLENBQUM7UUFDL0IsSUFBSSxDQUFDLFdBQVcsR0FBRyxJQUFJLENBQUM7UUFDeEIsSUFBSSxjQUFjLENBQUMsV0FBVyxDQUFDLElBQUksSUFBSSxFQUFFO1lBQ3JDLElBQUksY0FBYyxDQUFDLFdBQVcsQ0FBQyxLQUFLLFVBQVUsRUFBRTtnQkFDNUMsSUFBSSxDQUFDLFdBQVcsR0FBRyxLQUFLLENBQUM7YUFDNUI7U0FDSjtRQUNELElBQUksY0FBYyxDQUFDLFFBQVEsQ0FBQyxJQUFJLElBQUksRUFBRTtZQUNsQyxLQUFLLE1BQU0sVUFBVSxJQUFJLGNBQWMsQ0FBQyxRQUFRLENBQUMsRUFBRTtnQkFDL0MsTUFBTSxLQUFLLEdBQUcsSUFBSSxLQUFLLENBQUMsSUFBSSxDQUFDLE9BQU8sRUFBRSxFQUFFLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDO2dCQUNqRSxLQUFLLENBQUMsSUFBSSxHQUFHLFVBQVUsQ0FBQyxJQUFJLENBQUM7Z0JBQzdCLEtBQUssQ0FBQyxHQUFHLEdBQUcsVUFBVSxDQUFDLEdBQUcsQ0FBQztnQkFDM0IsSUFBSSxLQUFLLENBQUMsR0FBRyxLQUFLLGNBQWMsQ0FBQyxZQUFZLENBQUMsRUFBRTtvQkFDNUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUM7aUJBQzVCO2dCQUNELElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO2FBQzNCO1NBQ0o7SUFDTCxDQUFDO0NBQ0oiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0NvbXBvbmVudCwgSW5wdXQsIE91dHB1dH0gZnJvbSBcIkBhbmd1bGFyL2NvcmVcIjtcclxuaW1wb3J0IHtSYWRpb30gZnJvbSBcIi4vcmFkaW9cIjtcclxuaW1wb3J0IHtWYWx1ZUZpZWxkfSBmcm9tIFwiLi4vdmFsdWUtZmllbGRcIjtcclxuXHJcbkBDb21wb25lbnQoe1xyXG4gICAgc2VsZWN0b3I6IFwicGF0aC1yYWRpby1ncm91cFwiLFxyXG4gICAgdGVtcGxhdGVVcmw6IFwicmFkaW8tZ3JvdXAuY29tcG9uZW50Lmh0bWxcIlxyXG59KVxyXG5leHBvcnQgY2xhc3MgUmFkaW9Hcm91cENvbXBvbmVudCB7XHJcbiAgICBASW5wdXQoXCJmaWVsZFwiKVxyXG4gICAgQE91dHB1dChcImZpZWxkXCIpXHJcbiAgICBmaWVsZDogUmFkaW9Hcm91cEZpZWxkO1xyXG59XHJcblxyXG5leHBvcnQgY2xhc3MgUmFkaW9Hcm91cEZpZWxkIGV4dGVuZHMgVmFsdWVGaWVsZDxzdHJpbmc+IHtcclxuICAgIHByaXZhdGUgX3JhZGlvczogUmFkaW9bXSA9IFtdO1xyXG4gICAgcHJpdmF0ZSBfaG9yaXpvbnRhbDogYm9vbGVhbjtcclxuXHJcbiAgICBnZXQgcmFkaW9zKCk6IFJhZGlvW10ge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9yYWRpb3M7XHJcbiAgICB9XHJcblxyXG4gICAgc2V0IHJhZGlvcyh2YWx1ZTogUmFkaW9bXSkge1xyXG4gICAgICAgIHRoaXMuX3JhZGlvcyA9IHZhbHVlO1xyXG4gICAgfVxyXG5cclxuICAgIGdldCBob3Jpem9udGFsKCk6IGJvb2xlYW4ge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9ob3Jpem9udGFsO1xyXG4gICAgfVxyXG5cclxuICAgIHNldCBob3Jpem9udGFsKHZhbHVlOiBib29sZWFuKSB7XHJcbiAgICAgICAgdGhpcy5faG9yaXpvbnRhbCA9IHZhbHVlO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBzZXRWYWx1ZSh2YWx1ZTogc3RyaW5nKSB7XHJcbiAgICAgICAgaWYgKHZhbHVlICE9IG51bGwpIHtcclxuICAgICAgICAgICAgdmFsdWUgPSB2YWx1ZS50b1N0cmluZygpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBzdXBlci5zZXRWYWx1ZSh2YWx1ZSk7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIHVwZGF0ZVZhbHVlRnJvbUd1aSh2YWx1ZTogc3RyaW5nKSB7XHJcbiAgICAgICAgdGhpcy5zZXRWYWx1ZSh2YWx1ZS50b1N0cmluZygpKTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgaXNSZWFkb25seSgpIHtcclxuICAgICAgICByZXR1cm4gc3VwZXIuaXNSZWFkb25seSgpICYmIHRoaXMuaXNJbml0aWFsVmFsdWVTZXQ7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGZyb21Kc29uKG1vZGVsRm9ybUZpZWxkKSB7XHJcbiAgICAgICAgc3VwZXIuZnJvbUpzb24obW9kZWxGb3JtRmllbGQpO1xyXG4gICAgICAgIHRoaXMuX2hvcml6b250YWwgPSB0cnVlO1xyXG4gICAgICAgIGlmIChtb2RlbEZvcm1GaWVsZFtcImFsaWdubWVudFwiXSAhPSBudWxsKSB7XHJcbiAgICAgICAgICAgIGlmIChtb2RlbEZvcm1GaWVsZFtcImFsaWdubWVudFwiXSA9PT0gXCJ2ZXJ0aWNhbFwiKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9ob3Jpem9udGFsID0gZmFsc2U7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKG1vZGVsRm9ybUZpZWxkW1wicmFkaW9zXCJdICE9IG51bGwpIHtcclxuICAgICAgICAgICAgZm9yIChjb25zdCByYWRpb01vZGVsIG9mIG1vZGVsRm9ybUZpZWxkW1wicmFkaW9zXCJdKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCByYWRpbyA9IG5ldyBSYWRpbyh0aGlzLmdldEZvcm0oKSwgdGhpcy50cmFuc2xhdGlvblNlcnZpY2UpO1xyXG4gICAgICAgICAgICAgICAgcmFkaW8ubmFtZSA9IHJhZGlvTW9kZWwubmFtZTtcclxuICAgICAgICAgICAgICAgIHJhZGlvLmtleSA9IHJhZGlvTW9kZWwua2V5O1xyXG4gICAgICAgICAgICAgICAgaWYgKHJhZGlvLmtleSA9PT0gbW9kZWxGb3JtRmllbGRbXCJkZWZhdWx0S2V5XCJdKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zZXRWYWx1ZShyYWRpby5rZXkpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgdGhpcy5yYWRpb3MucHVzaChyYWRpbyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuIl19