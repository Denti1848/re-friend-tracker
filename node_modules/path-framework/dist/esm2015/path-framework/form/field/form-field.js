export class FormField {
    constructor(form, translationService) {
        this.form = form;
        this.translationService = translationService;
    }
    getForm() {
        return this.form;
    }
    get height() {
        return this._height;
    }
    set height(value) {
        this._height = value;
    }
    get visible() {
        return this._visible;
    }
    set visible(value) {
        this._visible = value;
    }
    get width() {
        return this._width;
    }
    set width(value) {
        this._width = value;
    }
    get newRow() {
        return this._newRow;
    }
    set newRow(value) {
        this._newRow = value;
    }
    get required() {
        return this._required;
    }
    set required(value) {
        this._required = value;
    }
    get readonly() {
        return this._readonly;
    }
    set readonly(value) {
        this._readonly = value;
    }
    get id() {
        return this._id;
    }
    set id(value) {
        this._id = value;
    }
    get name() {
        return this._name;
    }
    set name(value) {
        this._name = value;
    }
    get type() {
        return this._type;
    }
    set type(value) {
        this._type = value;
    }
    get labelVisible() {
        return this._labelVisible;
    }
    set labelVisible(value) {
        this._labelVisible = value;
    }
    isReadonly() {
        return this.readonly;
    }
    fromJson(modelFormField) {
        this.visible = true;
        if (modelFormField["visible"] != null) {
            this.visible = modelFormField["visible"];
        }
        this.labelVisible = true;
        if (modelFormField["labelVisible"] != null) {
            this.labelVisible = modelFormField["labelVisible"];
        }
        this.width = 1;
        if (modelFormField["width"] != null) {
            this.width = modelFormField["width"];
        }
        this.newRow = false;
        if (modelFormField["newRow"] != null) {
            this.newRow = modelFormField["newRow"];
        }
        this.required = false;
        if (modelFormField["required"] != null) {
            this.required = modelFormField["required"];
        }
        this.readonly = false;
        if (modelFormField["readonly"] != null) {
            this.readonly = modelFormField["readonly"];
        }
        this.id = modelFormField["id"];
        this.name = this.translationService.getText(modelFormField.name);
        this.type = modelFormField.type;
        this.height = modelFormField["height"];
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZm9ybS1maWVsZC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL3BhdGgtZnJhbWV3b3JrLyIsInNvdXJjZXMiOlsicGF0aC1mcmFtZXdvcmsvZm9ybS9maWVsZC9mb3JtLWZpZWxkLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUdBLE1BQU0sT0FBTyxTQUFTO0lBWWxCLFlBQXNCLElBQVcsRUFBWSxrQkFBc0M7UUFBN0QsU0FBSSxHQUFKLElBQUksQ0FBTztRQUFZLHVCQUFrQixHQUFsQixrQkFBa0IsQ0FBb0I7SUFDbkYsQ0FBQztJQUVELE9BQU87UUFDSCxPQUFPLElBQUksQ0FBQyxJQUFJLENBQUM7SUFDckIsQ0FBQztJQUVELElBQUksTUFBTTtRQUNOLE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQztJQUN4QixDQUFDO0lBRUQsSUFBSSxNQUFNLENBQUMsS0FBYTtRQUNwQixJQUFJLENBQUMsT0FBTyxHQUFHLEtBQUssQ0FBQztJQUN6QixDQUFDO0lBRUQsSUFBSSxPQUFPO1FBQ1AsT0FBTyxJQUFJLENBQUMsUUFBUSxDQUFDO0lBQ3pCLENBQUM7SUFFRCxJQUFJLE9BQU8sQ0FBQyxLQUFjO1FBQ3RCLElBQUksQ0FBQyxRQUFRLEdBQUcsS0FBSyxDQUFDO0lBQzFCLENBQUM7SUFFRCxJQUFJLEtBQUs7UUFDTCxPQUFPLElBQUksQ0FBQyxNQUFNLENBQUM7SUFDdkIsQ0FBQztJQUVELElBQUksS0FBSyxDQUFDLEtBQWE7UUFDbkIsSUFBSSxDQUFDLE1BQU0sR0FBRyxLQUFLLENBQUM7SUFDeEIsQ0FBQztJQUVELElBQUksTUFBTTtRQUNOLE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQztJQUN4QixDQUFDO0lBRUQsSUFBSSxNQUFNLENBQUMsS0FBYztRQUNyQixJQUFJLENBQUMsT0FBTyxHQUFHLEtBQUssQ0FBQztJQUN6QixDQUFDO0lBRUQsSUFBSSxRQUFRO1FBQ1IsT0FBTyxJQUFJLENBQUMsU0FBUyxDQUFDO0lBQzFCLENBQUM7SUFFRCxJQUFJLFFBQVEs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LGNBQWMsQ0FBQyxRQUFRLENBQUMsQ0FBQztJQUMzQyxDQUFDO0NBQ0oiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0lGb3JtRmllbGQsIElGb3JtfSBmcm9tIFwiLi4vLi4vcGF0aGludGVyZmFjZVwiO1xyXG5pbXBvcnQge1RyYW5zbGF0aW9uU2VydmljZX0gZnJvbSBcIi4uLy4uL3NlcnZpY2UvdHJhbnNsYXRpb24uc2VydmljZVwiO1xyXG5cclxuZXhwb3J0IGNsYXNzIEZvcm1GaWVsZCBpbXBsZW1lbnRzIElGb3JtRmllbGQge1xyXG4gICAgcHJpdmF0ZSBfaWQ6IHN0cmluZztcclxuICAgIHByaXZhdGUgX25hbWU6IHN0cmluZztcclxuICAgIHByaXZhdGUgX3R5cGU6IHN0cmluZztcclxuICAgIHByaXZhdGUgX2hlaWdodDogbnVtYmVyO1xyXG4gICAgcHJpdmF0ZSBfd2lkdGg6IG51bWJlcjtcclxuICAgIHByaXZhdGUgX25ld1JvdzogYm9vbGVhbjtcclxuICAgIHByaXZhdGUgX3Zpc2libGU6IGJvb2xlYW47XHJcbiAgICBwcml2YXRlIF9sYWJlbFZpc2libGU6IGJvb2xlYW47XHJcbiAgICBwcml2YXRlIF9yZXF1aXJlZDogYm9vbGVhbjtcclxuICAgIHByaXZhdGUgX3JlYWRvbmx5OiBib29sZWFuO1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKHByb3RlY3RlZCBmb3JtOiBJRm9ybSwgcHJvdGVjdGVkIHRyYW5zbGF0aW9uU2VydmljZTogVHJhbnNsYXRpb25TZXJ2aWNlKSB7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0Rm9ybSgpOiBJRm9ybSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuZm9ybTtcclxuICAgIH1cclxuXHJcbiAgICBnZXQgaGVpZ2h0KCk6IG51bWJlciB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2hlaWdodDtcclxuICAgIH1cclxuXHJcbiAgICBzZXQgaGVpZ2h0KHZhbHVlOiBudW1iZXIpIHtcclxuICAgICAgICB0aGlzLl9oZWlnaHQgPSB2YWx1ZTtcclxuICAgIH1cclxuXHJcbiAgICBnZXQgdmlzaWJsZSgpOiBib29sZWFuIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fdmlzaWJsZTtcclxuICAgIH1cclxuXHJcbiAgICBzZXQgdmlzaWJsZSh2YWx1ZTogYm9vbGVhbikge1xyXG4gICAgICAgIHRoaXMuX3Zpc2libGUgPSB2YWx1ZTtcclxuICAgIH1cclxuXHJcbiAgICBnZXQgd2lkdGgoKTogbnVtYmVyIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fd2lkdGg7XHJcbiAgICB9XHJcblxyXG4gICAgc2V0IHdpZHRoKHZhbHVlOiBudW1iZXIpIHtcclxuICAgICAgICB0aGlzLl93aWR0aCA9IHZhbHVlO1xyXG4gICAgfVxyXG5cclxuICAgIGdldCBuZXdSb3coKTogYm9vbGVhbiB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX25ld1JvdztcclxuICAgIH1cclxuXHJcbiAgICBzZXQgbmV3Um93KHZhbHVlOiBib29sZWFuKSB7XHJcbiAgICAgICAgdGhpcy5fbmV3Um93ID0gdmFsdWU7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0IHJlcXVpcmVkKCk6IGJvb2xlYW4ge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9yZXF1aXJlZDtcclxuICAgIH1cclxuXHJcbiAgICBzZXQgcmVxdWlyZWQodmFsdWU6IGJvb2xlYW4pIHtcclxuICAgICAgICB0aGlzLl9yZXF1aXJlZCA9IHZhbHVlO1xyXG4gICAgfVxyXG5cclxuICAgIGdldCByZWFkb25seSgpOiBib29sZWFuIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fcmVhZG9ubHk7XHJcbiAgICB9XHJcblxyXG4gICAgc2V0IHJlYWRvbmx5KHZhbHVlOiBib29sZWFuKSB7XHJcbiAgICAgICAgdGhpcy5fcmVhZG9ubHkgPSB2YWx1ZTtcclxuICAgIH1cclxuXHJcbiAgICBnZXQgaWQoKTogc3RyaW5nIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5faWQ7XHJcbiAgICB9XHJcblxyXG4gICAgc2V0IGlkKHZhbHVlOiBzdHJpbmcpIHtcclxuICAgICAgICB0aGlzLl9pZCA9IHZhbHVlO1xyXG4gICAgfVxyXG5cclxuICAgIGdldCBuYW1lKCk6IHN0cmluZyB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX25hbWU7XHJcbiAgICB9XHJcblxyXG4gICAgc2V0IG5hbWUodmFsdWU6IHN0cmluZykge1xyXG4gICAgICAgIHRoaXMuX25hbWUgPSB2YWx1ZTtcclxuICAgIH1cclxuXHJcbiAgICBnZXQgdHlwZSgpOiBzdHJpbmcge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl90eXBlO1xyXG4gICAgfVxyXG5cclxuICAgIHNldCB0eXBlKHZhbHVlOiBzdHJpbmcpIHtcclxuICAgICAgICB0aGlzLl90eXBlID0gdmFsdWU7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0IGxhYmVsVmlzaWJsZSgpOiBib29sZWFuIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fbGFiZWxWaXNpYmxlO1xyXG4gICAgfVxyXG5cclxuICAgIHNldCBsYWJlbFZpc2libGUodmFsdWU6IGJvb2xlYW4pIHtcclxuICAgICAgICB0aGlzLl9sYWJlbFZpc2libGUgPSB2YWx1ZTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgaXNSZWFkb25seSgpOiBib29sZWFuIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5yZWFkb25seTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgZnJvbUpzb24obW9kZWxGb3JtRmllbGQpIHtcclxuICAgICAgICB0aGlzLnZpc2libGUgPSB0cnVlO1xyXG4gICAgICAgIGlmIChtb2RlbEZvcm1GaWVsZFtcInZpc2libGVcIl0gIT0gbnVsbCkge1xyXG4gICAgICAgICAgICB0aGlzLnZpc2libGUgPSBtb2RlbEZvcm1GaWVsZFtcInZpc2libGVcIl07XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMubGFiZWxWaXNpYmxlID0gdHJ1ZTtcclxuICAgICAgICBpZiAobW9kZWxGb3JtRmllbGRbXCJsYWJlbFZpc2libGVcIl0gIT0gbnVsbCkge1xyXG4gICAgICAgICAgICB0aGlzLmxhYmVsVmlzaWJsZSA9IG1vZGVsRm9ybUZpZWxkW1wibGFiZWxWaXNpYmxlXCJdO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLndpZHRoID0gMTtcclxuICAgICAgICBpZiAobW9kZWxGb3JtRmllbGRbXCJ3aWR0aFwiXSAhPSBudWxsKSB7XHJcbiAgICAgICAgICAgIHRoaXMud2lkdGggPSBtb2RlbEZvcm1GaWVsZFtcIndpZHRoXCJdO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLm5ld1JvdyA9IGZhbHNlO1xyXG4gICAgICAgIGlmIChtb2RlbEZvcm1GaWVsZFtcIm5ld1Jvd1wiXSAhPSBudWxsKSB7XHJcbiAgICAgICAgICAgIHRoaXMubmV3Um93ID0gbW9kZWxGb3JtRmllbGRbXCJuZXdSb3dcIl07XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMucmVxdWlyZWQgPSBmYWxzZTtcclxuICAgICAgICBpZiAobW9kZWxGb3JtRmllbGRbXCJyZXF1aXJlZFwiXSAhPSBudWxsKSB7XHJcbiAgICAgICAgICAgIHRoaXMucmVxdWlyZWQgPSBtb2RlbEZvcm1GaWVsZFtcInJlcXVpcmVkXCJdO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLnJlYWRvbmx5ID0gZmFsc2U7XHJcbiAgICAgICAgaWYgKG1vZGVsRm9ybUZpZWxkW1wicmVhZG9ubHlcIl0gIT0gbnVsbCkge1xyXG4gICAgICAgICAgICB0aGlzLnJlYWRvbmx5ID0gbW9kZWxGb3JtRmllbGRbXCJyZWFkb25seVwiXTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5pZCA9IG1vZGVsRm9ybUZpZWxkW1wiaWRcIl07XHJcbiAgICAgICAgdGhpcy5uYW1lID0gdGhpcy50cmFuc2xhdGlvblNlcnZpY2UuZ2V0VGV4dChtb2RlbEZvcm1GaWVsZC5uYW1lKTtcclxuICAgICAgICB0aGlzLnR5cGUgPSBtb2RlbEZvcm1GaWVsZC50eXBlO1xyXG4gICAgICAgIHRoaXMuaGVpZ2h0ID0gbW9kZWxGb3JtRmllbGRbXCJoZWlnaHRcIl07XHJcbiAgICB9XHJcbn1cclxuIl19