import * as tslib_1 from "tslib";
import { Component, Input, Output, ViewChild } from "@angular/core";
import { ValueField } from "../value-field";
import { HttpClient, HttpEvent, HttpEventType, HttpParams, HttpRequest, HttpResponse } from "@angular/common/http";
let FileUploadComponent = class FileUploadComponent {
    constructor(http) {
        this.http = http;
        this.dragActive = false;
    }
    onDropFile(event) {
        this.dragActive = false;
        event.preventDefault();
        this.uploadFile(event.dataTransfer.files);
    }
    onDragOverFile(event) {
        this.dragActive = true;
        event.stopPropagation();
        event.preventDefault();
    }
    onDragLeave() {
        this.dragActive = false;
    }
    selectFile(event) {
        this.uploadFile(event.target.files);
    }
    uploadFile(files) {
        if (files.length === 0) {
            console.log("No file selected!");
            return;
        }
        // check if file limit is exceeded
        if (!this.field.checkFileLimit(files.length)) {
            this.resetFileUploadElement();
            return;
        }
        // check file sizes
        if (!this.field.checkFileSize(files)) {
            this.resetFileUploadElement();
            return;
        }
        // upload submitted files
        Array.from(files).forEach((file) => {
            this.doUpload(this.field.getForm().getApp().getBackendUrl() + this.field.url, file)
                .subscribe(event => {
                if (event.type === HttpEventType.UploadProgress) {
                    const percentDone = Math.round(100 * event.loaded / event.total);
                    let uploadFile = this.field.findCurrentUpload(file.name);
                    if (uploadFile == null) {
                        uploadFile = this.addNewPathFile(file);
                    }
                    uploadFile.uploadProgress = percentDone;
                }
                else if (event instanceof HttpResponse) {
                    let uploadFile = this.field.findCurrentUpload(file.name);
                    if (uploadFile == null) {
                        uploadFile = this.addNewPathFile(file);
                    }
                    const key = new PathFileKey(event.body["key"]["key"], event.body["key"]["name"]);
                    uploadFile.key = key;
                    uploadFile.uploadFinished = true;
                    uploadFile.uploadSuccessful = true;
                    this.field.updateRequiredStatus();
                }
            }, (err) => {
                console.log("Upload Error:", err);
                const uploadFile = this.field.findCurrentUpload(file.name);
                if (uploadFile) {
                    uploadFile.sizeString = "Error";
                    uploadFile.uploadFinished = true;
                }
                else {
                    console.log("error: file should exist (" + file.name + ")");
                }
                this.resetFileUploadElement();
            }, () => {
                this.resetFileUploadElement();
            });
        });
    }
    addNewPathFile(file) {
        const uploadFile = new PathFile();
        uploadFile.name = file.name;
        uploadFile.size = file.size;
        uploadFile.sizeString = this.field.getReadableFileSizeString(file.size);
        uploadFile.active = true;
        this.field.value.push(uploadFile);
        this.field.sortValues();
        return uploadFile;
    }
    resetFileUploadElement() {
        const count = this.field.value.reduce((acc, cur) => !cur.uploadFinished ? ++acc : acc, 0);
        if (count === 0) {
            this.fileInputReference.nativeElement.value = "";
        }
    }
    doUpload(url, file) {
        const formData = new FormData();
        formData.append("upload", file);
        const params = new HttpParams();
        const options = {
            params: params,
            reportProgress: true,
        };
        const req = new HttpRequest("POST", url, formData, options);
        return this.http.request(req); // <any> fixes TS2719
    }
};
FileUploadComponent.ctorParameters = () => [
    { type: HttpClient }
];
tslib_1.__decorate([
    Input("field"),
    Output("field")
], FileUploadComponent.prototype, "field", void 0);
tslib_1.__decorate([
    ViewChild("fileInput", { static: true })
], FileUploadComponent.prototype, "fileInputReference", void 0);
FileUploadComponent = tslib_1.__decorate([
    Component({
        selector: "path-file-upload",
        template: "<path-form-field-label [label]=\"field.name\" [required]=\"field.required\"></path-form-field-label>\r\n<div [class.col-md-4]=\"field.width == 1\" [class.col-md-10]=\"field.width == 2\" [class.file-upload-drop]=\"dragActive\"\r\n     (drop)=\"onDropFile($event)\" (dragleave)=\"onDragLeave()\" (dragover)=\"onDragOverFile($event)\">\r\n    <table class=\"table\">\r\n        <thead>\r\n        <tr>\r\n            <td class=\"col-md-7\">File Name</td>\r\n            <td class=\"col-md-2\">Size</td>\r\n            <td class=\"col-md-3\"></td>\r\n        </tr>\r\n        </thead>\r\n        <tbody>\r\n        <ng-container *ngFor=\"let file of field.value; let index = index\">\r\n            <tr *ngIf=\"file.active\">\r\n                <td class=\"col-md-7\"><a href=\"#\" (click)=\"field.download(file.key)\">{{file.name}}</a></td>\r\n                <td class=\"col-md-2\">{{file.sizeString}}</td>\r\n                <td class=\"col-md-3\" align=\"right\">\r\n                    <a *ngIf=\"file.uploadFinished\" href=\"#\" (click)=\"field.remove(index, file.key)\">Remove</a>\r\n                    <div *ngIf=\"!file.uploadFinished\" class=\"progress\">\r\n                        <div class=\"progress-bar\" role=\"progressbar\" [style.width.%]=\"file.uploadProgress\"\r\n                             [attr.aria-valuenow]=\"file.uploadProgress\" aria-valuemin=\"0\" aria-valuemax=\"100\">\r\n                            <span class=\"sr-only\">{{file.uploadProgress}}% Complete</span>\r\n                        </div>\r\n                    </div>\r\n                </td>\r\n            </tr>\r\n        </ng-container>\r\n        </tbody>\r\n    </table>\r\n    <div class=\"form-group\">\r\n        <input type=\"file\" class=\"form-control-file\" (change)=\"selectFile($event)\" placeholder=\"Upload file\"\r\n               [multiple]=\"field.multiple\" accept=\"{{field.acceptedFileTypes.join(', ')}}\"\r\n               [disabled]=\"field.isReadonly()\"\r\n               [required]=\"field.fileUploadRequired\" #fileInput>\r\n    </div>\r\n</div>\r\n"
    })
], FileUploadComponent);
export { FileUploadComponent };
export class FileUploadField extends ValueField {
    constructor(form, translationService) {
        super(form, translationService);
        this._multiple = true;
        this._acceptedFileTypes = [];
        this._fileLimit = 0;
        this._singleFileSizeLimit = 0;
        this._allFilesSizeLimit = 0;
        this.value = [];
        this._acceptedFileTypes.push("*.*");
        this.updateRequiredStatus();
    }
    setValue(value) {
        const files = [];
        for (const item of value) {
            const file = Object.assign(new PathFile(), item);
            file.key = Object.assign(new PathFileKey(null, null), item.key);
            files.push(file);
        }
        this.sortValues();
        super.setValue(files);
        this.updateRequiredStatus();
    }
    sortValues() {
        this.value.sort((a, b) => a.name.localeCompare(b.name));
    }
    get url() {
        return this._url;
    }
    set url(value) {
        this._url = value;
    }
    get multiple() {
        return this._multiple;
    }
    set multiple(value) {
        this._multiple = value;
    }
    get acceptedFileTypes() {
        return this._acceptedFileTypes;
    }
    set acceptedFileTypes(value) {
        this._acceptedFileTypes = value;
    }
    get fileUploadRequired() {
        return this._fileUploadRequired;
    }
    get fileLimit() {
        return this._fileLimit;
    }
    get singleFileSizeLimit() {
        return this._singleFileSizeLimit;
    }
    get allFilesSizeLimit() {
        return this._allFilesSizeLimit;
    }
    remove(index, key) {
        if (key) {
            const file = this.find(key);
            if (file) {
                file.active = false;
            }
            this.updateRequiredStatus();
        }
        else {
            this.value.splice(index, 1);
        }
    }
    find(key) {
        for (const file of this.value) {
            if (file.key.equals(key)) {
                return file;
            }
        }
        return null;
    }
    findCurrentUpload(name) {
        for (const file of this.value) {
            if (file.name === name && !file.uploadFinished) {
                return file;
            }
        }
        return null;
    }
    updateRequiredStatus() {
        let uploadInProgressCount = 0;
        let uploadSuccessfulCount = 0;
        this.value.forEach((file) => {
            if (file.active && !file.uploadFinished) {
                uploadInProgressCount++;
            }
            if (file.active && file.uploadSuccessful) {
                uploadSuccessfulCount++;
            }
        });
        let newStatus = false;
        if (uploadInProgressCount > 0) {
            // always required if upload in progress
            newStatus = true;
        }
        else if (this.required && uploadSuccessfulCount <= 0) {
            newStatus = true;
        }
        this._fileUploadRequired = newStatus;
    }
    checkFileLimit(newFilesLength) {
        let activeFileCount = 0;
        this.value.forEach((file) => {
            if (file.active) {
                activeFileCount++;
            }
        });
        if (this.fileLimit > 0 && ((activeFileCount + newFilesLength) > this.fileLimit)) {
            const message = this.translationService.getText("FileLimitMessage", String(this.fileLimit));
            this.getForm().getApp().yesNo(message, () => { }, () => { });
            return false;
        }
        return true;
    }
    checkFileSize(files) {
        if (this._singleFileSizeLimit || this._allFilesSizeLimit) {
            // check single file limit
            let sizeSum = 0;
            const fileArray = Array.from(files);
            for (const file of fileArray) {
                sizeSum += file.size;
                if (this._singleFileSizeLimit > 0 && file.size > this._singleFileSizeLimit) {
                    const message = this.translationService.getText("FileSingleSizeMessage", this.getReadableFileSizeString(this._singleFileSizeLimit));
                    this.getForm().getApp().yesNo(message, () => { }, () => { });
                    return false;
                }
            }
            // check sum limit
            if (this._allFilesSizeLimit > 0) {
                this.value.forEach((file) => {
                    if (file.active) {
                        sizeSum += file.size;
                    }
                });
                if (this._allFilesSizeLimit > 0 && sizeSum > this._allFilesSizeLimit) {
                    const message = this.translationService.getText("FileAllSizeMessage", this.getReadableFileSizeString(this._allFilesSizeLimit));
                    this.getForm().getApp().yesNo(message, () => { }, () => { });
                    return false;
                }
            }
        }
        return true;
    }
    getReadableFileSizeString(byteSize) {
        let i = -1;
        const byteUnits = [" kB", " MB", " GB", " TB", " PB", " EB", " ZB", " YB"];
        do {
            byteSize = byteSize / 1024;
            i++;
        } while (byteSize > 1024);
        return Math.max(byteSize, 0.1).toFixed(1) + byteUnits[i];
    }
    download(key) {
        window.location.assign(this.getForm().getApp().getBackendUrl() + this.url + "/" + key.key);
    }
    fromJson(modelFormField) {
        super.fromJson(modelFormField);
        this.type = "fileUpload";
        if (modelFormField["url"]) {
            this.url = modelFormField["url"];
        }
        if (modelFormField["multiple"] != null) {
            this.multiple = modelFormField["multiple"];
        }
        if (modelFormField["acceptedFileTypes"]) {
            this.acceptedFileTypes = modelFormField["acceptedFileTypes"];
        }
        if (modelFormField["fileLimit"]) {
            this._fileLimit = modelFormField["fileLimit"];
        }
        if (modelFormField["singleFileSizeLimit"]) {
            this._singleFileSizeLimit = modelFormField["singleFileSizeLimit"];
        }
        if (modelFormField["allFilesSizeLimit"]) {
            this._allFilesSizeLimit = modelFormField["allFilesSizeLimit"];
        }
        this.updateRequiredStatus();
    }
}
export class PathFile {
    constructor() {
        this.uploadFinished = false;
        this.uploadSuccessful = false;
        this.uploadProgress = 0;
        this.size = 0;
    }
}
// TODO unify with list key
// tslint:disable:max-classes-per-file
export class PathFileKey {
    constructor(key, name) {
        this.key = key;
        this.name = name;
    }
    equals(otherKey) {
        if (otherKey != null &&
            otherKey.name &&
            otherKey.key &&
            this.name &&
            this.key &&
            otherKey.name === this.name &&
            otherKey.key === this.key) {
            return true;
        }
        return false;
    }
}
//# sourceMappingURL=data:application/json;base64,