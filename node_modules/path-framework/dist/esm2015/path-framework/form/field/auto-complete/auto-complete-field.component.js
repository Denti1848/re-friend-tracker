import * as tslib_1 from "tslib";
import { Component, Input, Output, ElementRef } from "@angular/core";
import { ValueField } from "../value-field";
import { AutoCompleteFieldEntry } from "./auto-complete-field-entry";
import { Key } from "../../../page/element/page-element";
import { FormFunction } from "../../form-function";
import { KeyUtility } from "../../../utility/key-utility";
let AutoCompleteComponent = class AutoCompleteComponent {
    constructor(myElement) {
        this._elementRef = myElement;
    }
    handleClick(event) {
        if (this.field.isReadonly()) {
            return;
        }
        let clickedComponent = event.target;
        let inside = false;
        do {
            if (clickedComponent === this._elementRef.nativeElement) {
                inside = true;
            }
            clickedComponent = clickedComponent.parentNode;
        } while (clickedComponent);
        if (!inside) {
            this.field.clearFilteredList();
        }
        if (!this.field.valueSet) {
            this.field.query = null;
            this.field.setValue(null);
        }
    }
};
AutoCompleteComponent.ctorParameters = () => [
    { type: ElementRef }
];
tslib_1.__decorate([
    Input("field"),
    Output("field")
], AutoCompleteComponent.prototype, "field", void 0);
AutoCompleteComponent = tslib_1.__decorate([
    Component({
        selector: "path-autocomplete",
        // tslint:disable-next-line
        host: {
            "(document:click)": "handleClick($event)",
        },
        template: "<path-form-field-label [label]=\"field.name\" [required]=\"field.required\"></path-form-field-label>\r\n<div [class.col-md-4]=\"field.width == 1\" [class.col-md-10]=\"field.width == 2\">\r\n    <div class=\"input-group\">\r\n        <input #model=\"ngModel\" [readonly]=\"field.isReadonly()\"\r\n               [class.required-field]=\"(!model.valid &&!model.pristine && field.required)\" [required]=\"field.required\"\r\n               #inputElement type=\"text\" [ngModel]=field.query?.text (keyup)=field.filter(inputElement.value,$event)\r\n               (blur)=\"field.focusLost()\" class=\"form-control\" placeholder=\"\">\r\n        <!-- Auto Complete -->\r\n        <div *ngIf=\"field.filteredList.length > 0 && !field.isReadonly()\">\r\n            <div class=\"path-autocomplete list-group\">\r\n                <a *ngFor=\"let item of field.filteredList\" class=\"list-group-item\" href=\"#\"\r\n                   (click)=\"field.select(item)\"><h5>{{item.text}}</h5></a>\r\n            </div>\r\n        </div>\r\n        <!-- Action -->\r\n        <span *ngIf=\"field.detailForm != null\" class=\"input-group-btn\">\r\n                <button (click)=\"field.showDetailForm()\" class=\"btn btn-default\" type=\"button\">{{field.getDetailButtonName()}}</button>\r\n            </span>\r\n    </div>\r\n</div>\r\n"
    })
], AutoCompleteComponent);
export { AutoCompleteComponent };
export class AutoCompleteField extends ValueField {
    constructor(form, translationService, pathService) {
        super(form, translationService);
        this.form = form;
        this.translationService = translationService;
        this.pathService = pathService;
        this._filteredList = [];
        this._data = [];
        this._dataLoaded = false;
        this._valueSet = false;
    }
    isReadonly() {
        return super.isReadonly() && this.isInitialValueSet;
    }
    filter(query, event) {
        // do not filter readonly fields
        if (this.isReadonly()) {
            return;
        }
        // do not filter on simple tab focus change
        if (event.keyCode === 9) {
            return;
        }
        this._valueSet = false;
        if (query !== null && query.length > 0 && query.replace(/\s/g, "").length === 0) {
            /* space: all */
            this._filteredList = this._data.filter(function (entry) {
                return entry.active;
            }.bind(this));
        }
        else if (query !== null && query !== "") {
            /* search term: filter */
            query = query.trim();
            this._filteredList = this._data.filter(function (entry) {
                if (!entry.active) {
                    return false;
                }
                const entryName = entry.text;
                if (entryName.toLowerCase().indexOf(query.toLowerCase()) > -1) {
                    return true;
                }
                else if (this._wordSearchEnabled) {
                    const tokens = entryName.toLowerCase().split(" ");
                    for (const token of tokens) {
                        if (token.startsWith(query.toLowerCase())) {
                            return true;
                        }
                    }
                }
                return false;
            }.bind(this));
        }
        else {
            /* empty: nothing */
            this.clearFilteredList();
        }
        this._filteredList.sort();
    }
    select(item) {
        this.setValue(item.key);
    }
    focusLost() {
        window.setTimeout(() => {
            if (!this.valueSet) {
                // force angular to update query.text value
                if (this.value == null) {
                    this.resetDisplay(null);
                }
                else {
                    this.resetDisplay(this.value["key"]);
                }
            }
        }, 1);
    }
    setValue(value) {
        const oldValue = this.value;
        // accept key values and complex objects
        if (value != null && value["key"] != null) {
            value = value["key"];
            this._keyType = value["name"];
        }
        this._valueSet = value != null;
        this.clearFilteredList();
        super.setValue(value);
        this.query = null;
        this.resetDisplay(value);
        // reload dependent autocomplete fields
        if (oldValue !== this.value) {
            for (const field of this.getForm().getFields()) {
                if (field instanceof AutoCompleteField) {
                    if (field.id !== this.id) {
                        const autoCompleteField = field;
                        if (KeyUtility.variableExists(autoCompleteField.url, this.id)) {
                            autoCompleteField.load();
                        }
                    }
                }
            }
        }
    }
    load() {
        this.dataLoaded = false;
        let url = this.url;
        for (const field of this.getForm().getFields()) {
            if (field instanceof ValueField) {
                const valueField = field;
                url = KeyUtility.replaceVariable(url, valueField.id, valueField.value);
                console.log(url);
            }
        }
        this.pathService.serverGet(this.getForm().getApp().getBackendUrl(), url, (data) => {
            const dynamicData = [];
            for (const item of data) {
                const entry = new AutoCompleteFieldEntry();
                entry.key = item["key"]["key"];
                entry.text = item["name"];
                if (item["active"] != null) {
                    entry.active = item["active"];
                }
                else {
                    entry.active = true;
                }
                dynamicData.push(entry);
            }
            this.data = dynamicData;
            this.dataLoaded = true;
            this.setValue(this.value); // force display refresh
        }, null);
    }
    getDetailButtonName() {
        if (this.value == null) {
            return this.translationService.getText("New") + "...";
        }
        else {
            return this.translationService.getText("Detail") + "...";
        }
    }
    showDetailForm() {
        let form = null;
        const formFunction = new FormFunction();
        formFunction.save = (data) => {
            this.getForm().getApp().closeCurrentForm();
            if (data["key"] != null) {
                this.setValue(data["key"]);
            }
            this.load();
        };
        formFunction.cancel = () => {
            this.getForm().getApp().closeCurrentForm();
        };
        formFunction.delete = (data) => {
            this.getForm().getApp().closeCurrentForm();
            this.setValue(null);
            this.load();
        };
        if (this.value == null) {
            form = this.getForm().getApp().createForm(this.detailForm, null, null, formFunction, null);
        }
        else {
            form = this.getForm().getApp().createForm(this.detailForm, new Key(this.value, this._keyType), null, formFunction, null);
        }
        this.form.getApp()["_formStack"].push(form); // TODO
    }
    clearFilteredList() {
        this._filteredList = [];
    }
    resetDisplay(value) {
        // must wait with display update until data is loaded
        const displaySetter = () => {
            const keyValue = value;
            if (!this.dataLoaded) {
                console.log("waiting...");
                window.setTimeout(function () {
                    displaySetter();
                }, 250);
            }
            else {
                if (keyValue == null) {
                    window.setTimeout(() => {
                        // check value again, may have changed since reset was triggered
                        if (this.value == null) {
                            this.query = new AutoCompleteFieldEntry();
                        }
                    }, 1);
                }
                else {
                    for (const item of this._data) {
                        // tslint:disable:triple-equals
                        if (item.key == keyValue) {
                            window.setTimeout(() => {
                                this.query = item;
                            }, 1);
                            break;
                        }
                    }
                }
            }
        };
        displaySetter();
    }
    get query() {
        return this._query;
    }
    set query(value) {
        this._query = value;
    }
    set data(value) {
        this._data = value;
    }
    get filteredList() {
        return this._filteredList;
    }
    set wordSearchEnabled(value) {
        this._wordSearchEnabled = value;
    }
    get valueSet() {
        return this._valueSet;
    }
    get dataLoaded() {
        return this._dataLoaded;
    }
    set dataLoaded(value) {
        this._dataLoaded = value;
    }
    get detailForm() {
        return this._detailForm;
    }
    set detailForm(value) {
        this._detailForm = value;
    }
    get url() {
        return this._url;
    }
    set url(value) {
        this._url = value;
    }
}
//# sourceMappingURL=data:application/json;base64,