import * as tslib_1 from "tslib";
import { Component, Input, Output } from "@angular/core";
import { ValueField } from "../value-field";
import * as momentImported from "moment";
const moment = momentImported;
let DateFieldComponent = class DateFieldComponent {
};
tslib_1.__decorate([
    Input("field"),
    Output("field")
], DateFieldComponent.prototype, "field", void 0);
DateFieldComponent = tslib_1.__decorate([
    Component({
        selector: "path-datefield",
        template: "<path-form-field-label [label]=\"field.name\" [required]=\"field.required\"></path-form-field-label>\r\n<div [class.col-md-4]=\"field.width == 1\" [class.col-md-10]=\"field.width == 2\">\r\n    <div class=\"input-group\">\r\n\t    <span class=\"input-group-btn\">\r\n\t\t    <button (click)=\"datepicker.toggle()\" class=\"btn btn-default\" type=\"button\"><i class=\"fa fa-calendar fa-fw\"></i></button>\r\n\t    </span>\r\n\t    <input #datepicker=\"bsDatepicker\" #model=\"ngModel\" bsDatepicker [bsConfig]=\"{ dateInputFormat: field.dateInputFormat, containerClass: 'theme-default' }\" placement=\"bottom left\" [bsValue]=\"field.datePickerInitialValue\" [(ngModel)]=\"field.datePickerValue\" (bsValueChange)=\"field.updateValueFromGui($event)\" [isDisabled]=\"field.isReadonly()\" [readonly]=\"field.isReadonly()\" [class.required-field]=\"(!model.valid &&!model.pristine && field.required)\" [required]=\"field.required\" style=\"display: block; width: 100%\" type=\"text\" class=\"form-control\" placeholder=\"\">\r\n    </div>\r\n</div>\r\n"
    })
], DateFieldComponent);
export { DateFieldComponent };
export class DateField extends ValueField {
    constructor(form, translationService) {
        super(form, translationService);
        this.form = form;
        this.translationService = translationService;
        this._initialValueSet = false;
        this._dateInputFormat = translationService.getUserDateFormat();
    }
    get datePickerValue() {
        return this._datePickerValue;
    }
    set datePickerValue(value) {
        this._datePickerValue = value;
    }
    get initialValueSet() {
        return this._initialValueSet;
    }
    get datePickerInitialValue() {
        return this._datePickerInitialValue;
    }
    get dateInputFormat() {
        return this._dateInputFormat;
    }
    setValue(value) {
        if (typeof value === "string") {
            value = moment(value).toDate();
        }
        if (value != null && Object.prototype.toString.call(value) === "[object Date]") {
            // it is a date
            if (isNaN(value.getTime())) {
                value = null;
            }
            else {
                // cut off local timezone
                value = new Date(value.toDateString() + " 00:00:00 GMT");
            }
        }
        else {
            value = null;
        }
        // update ui
        this._datePickerValue = value;
        super.setValue(value);
        if (!this._initialValueSet) {
            this._datePickerInitialValue = value;
            this._initialValueSet = true;
        }
    }
    updateValueFromGui(value) {
        if (value != null && isNaN(value.getDate())) {
            value = null;
        }
        if (value != null) {
            this.setValue(value);
            this._datePickerValue = this.value;
        }
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGF0ZS1maWVsZC5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9wYXRoLWZyYW1ld29yay8iLCJzb3VyY2VzIjpbInBhdGgtZnJhbWV3b3JrL2Zvcm0vZmllbGQvZGF0ZS9kYXRlLWZpZWxkLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFDLFNBQVMsRUFBRSxLQUFLLEVBQUUsTUFBTSxFQUFDLE1BQU0sZUFBZSxDQUFDO0FBQ3ZELE9BQU8sRUFBQyxVQUFVLEVBQUMsTUFBTSxnQkFBZ0IsQ0FBQztBQUcxQyxPQUFPLEtBQUssY0FBYyxNQUFNLFFBQVEsQ0FBQztBQUV6QyxNQUFNLE1BQU0sR0FBRyxjQUFjLENBQUM7QUFNOUIsSUFBYSxrQkFBa0IsR0FBL0IsTUFBYSxrQkFBa0I7Q0FJOUIsQ0FBQTtBQURHO0lBRkMsS0FBSyxDQUFDLE9BQU8sQ0FBQztJQUNkLE1BQU0sQ0FBQyxPQUFPLENBQUM7aURBQ0M7QUFIUixrQkFBa0I7SUFKOUIsU0FBUyxDQUFDO1FBQ1AsUUFBUSxFQUFFLGdCQUFnQjtRQUMxQixvaUNBQXdDO0tBQzNDLENBQUM7R0FDVyxrQkFBa0IsQ0FJOUI7U0FKWSxrQkFBa0I7QUFNL0IsTUFBTSxPQUFPLFNBQVUsU0FBUSxVQUFnQjtJQU8zQyxZQUFzQixJQUFXLEVBQVksa0JBQXNDO1FBQy9FLEtBQUssQ0FBQyxJQUFJLEVBQUUsa0JBQWtCLENBQUMsQ0FBQztRQURkLFNBQUksR0FBSixJQUFJLENBQU87UUFBWSx1QkFBa0IsR0FBbEIsa0JBQWtCLENBQW9CO1FBSjNFLHFCQUFnQixHQUFHLEtBQUssQ0FBQztRQU03QixJQUFJLENBQUMsZ0JBQWdCLEdBQUcsa0JBQWtCLENBQUMsaUJBQWlCLEVBQUUsQ0FBQztJQUNuRSxDQUFDO0lBRUQsSUFBSSxlQUFlO1FBQ2YsT0FBTyxJQUFJLENBQUMsZ0JBQWdCLENBQUM7SUFDakMsQ0FBQztJQUVELElBQUksZUFBZSxDQUFDLEtBQVc7UUFDM0IsSUFBSSxDQUFDLGdCQUFnQixHQUFHLEtBQUssQ0FBQztJQUNsQyxDQUFDO0lBRUQsSUFBSSxlQUFlO1FBQ2YsT0FBTyxJQUFJLENBQUMsZ0JBQWdCLENBQUM7SUFDakMsQ0FBQztJQUVELElBQUksc0JBQXNCO1FBQ3RCLE9BQU8sSUFBSSxDQUFDLHVCQUF1QixDQUFDO0lBQ3hDLENBQUM7SUFFRCxJQUFJLGVBQWU7UUFDZixPQUFPLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQztJQUNqQyxDQUFDO0lBRU0sUUFBUSxDQUFDLEtBQVc7UUFDdkIsSUFBSSxPQUFPLEtBQUssS0FBSyxRQUFRLEVBQUU7WUFDM0IsS0FBSyxHQUFHLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQyxNQUFNLEVBQUUsQ0FBQztTQUNsQztRQUNELElBQUksS0FBSyxJQUFJLElBQUksSUFBSSxNQUFNLENBQUMsU0FBUyxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLEtBQUssZUFBZSxFQUFFO1lBQzVFLGVBQWU7WUFDZixJQUFJLEtBQUssQ0FBQyxLQUFLLENBQUMsT0FBTyxFQUFFLENBQUMsRUFBRTtnQkFDeEIsS0FBSyxHQUFHLElBQUksQ0FBQzthQUNoQjtpQkFBTTtnQkFDSCx5QkFBeUI7Z0JBQ3pCLEtBQUssR0FBRyxJQUFJLElBQUksQ0FBQyxLQUFLLENBQUMsWUFBWSxFQUFFLEdBQUcsZUFBZSxDQUFDLENBQUM7YUFDNUQ7U0FDSjthQUFNO1lBQ0gsS0FBSyxHQUFHLElBQUksQ0FBQztTQUNoQjtRQUNELFlBQVk7UUFDWixJQUFJLENBQUMsZ0JBQWdCLEdBQUcsS0FBSyxDQUFDO1FBQzlCLEtBQUssQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDdEIsSUFBSSxDQUFDLElBQUksQ0FBQyxnQkFBZ0IsRUFBRTtZQUN4QixJQUFJLENBQUMsdUJBQXVCLEdBQUcsS0FBSyxDQUFDO1lBQ3JDLElBQUksQ0FBQyxnQkFBZ0IsR0FBRyxJQUFJLENBQUM7U0FDaEM7SUFDTCxDQUFDO0lBRU0sa0JBQWtCLENBQUMsS0FBVztRQUNqQyxJQUFJLEtBQUssSUFBSSxJQUFJLElBQUksS0FBSyxDQUFDLEtBQUssQ0FBQyxPQUFPLEVBQUUsQ0FBQyxFQUFFO1lBQ3pDLEtBQUssR0FBRyxJQUFJLENBQUM7U0FDaEI7UUFDRCxJQUFJLEtBQUssSUFBSSxJQUFJLEVBQUU7WUFDZixJQUFJLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxDQUFDO1lBQ3JCLElBQUksQ0FBQyxnQkFBZ0IsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDO1NBQ3RDO0lBQ0wsQ0FBQztDQUNKIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtDb21wb25lbnQsIElucHV0LCBPdXRwdXR9IGZyb20gXCJAYW5ndWxhci9jb3JlXCI7XHJcbmltcG9ydCB7VmFsdWVGaWVsZH0gZnJvbSBcIi4uL3ZhbHVlLWZpZWxkXCI7XHJcbmltcG9ydCB7SUZvcm19IGZyb20gXCIuLi8uLi8uLi9wYXRoaW50ZXJmYWNlXCI7XHJcbmltcG9ydCB7VHJhbnNsYXRpb25TZXJ2aWNlfSBmcm9tIFwiLi4vLi4vLi4vc2VydmljZS90cmFuc2xhdGlvbi5zZXJ2aWNlXCI7XHJcbmltcG9ydCAqIGFzIG1vbWVudEltcG9ydGVkIGZyb20gXCJtb21lbnRcIjtcclxuXHJcbmNvbnN0IG1vbWVudCA9IG1vbWVudEltcG9ydGVkO1xyXG5cclxuQENvbXBvbmVudCh7XHJcbiAgICBzZWxlY3RvcjogXCJwYXRoLWRhdGVmaWVsZFwiLFxyXG4gICAgdGVtcGxhdGVVcmw6IFwiZGF0ZS1maWVsZC5jb21wb25lbnQuaHRtbFwiXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBEYXRlRmllbGRDb21wb25lbnQge1xyXG4gICAgQElucHV0KFwiZmllbGRcIilcclxuICAgIEBPdXRwdXQoXCJmaWVsZFwiKVxyXG4gICAgZmllbGQ6IERhdGVGaWVsZDtcclxufVxyXG5cclxuZXhwb3J0IGNsYXNzIERhdGVGaWVsZCBleHRlbmRzIFZhbHVlRmllbGQ8RGF0ZT4ge1xyXG5cclxuICAgIHByaXZhdGUgX2RhdGVQaWNrZXJWYWx1ZTogRGF0ZTtcclxuICAgIHByaXZhdGUgX2luaXRpYWxWYWx1ZVNldCA9IGZhbHNlO1xyXG4gICAgcHJpdmF0ZSBfZGF0ZVBpY2tlckluaXRpYWxWYWx1ZTogRGF0ZTtcclxuICAgIHByaXZhdGUgX2RhdGVJbnB1dEZvcm1hdDogc3RyaW5nO1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKHByb3RlY3RlZCBmb3JtOiBJRm9ybSwgcHJvdGVjdGVkIHRyYW5zbGF0aW9uU2VydmljZTogVHJhbnNsYXRpb25TZXJ2aWNlKSB7XHJcbiAgICAgICAgc3VwZXIoZm9ybSwgdHJhbnNsYXRpb25TZXJ2aWNlKTtcclxuICAgICAgICB0aGlzLl9kYXRlSW5wdXRGb3JtYXQgPSB0cmFuc2xhdGlvblNlcnZpY2UuZ2V0VXNlckRhdGVGb3JtYXQoKTtcclxuICAgIH1cclxuXHJcbiAgICBnZXQgZGF0ZVBpY2tlclZhbHVlKCk6IERhdGUge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9kYXRlUGlja2VyVmFsdWU7XHJcbiAgICB9XHJcblxyXG4gICAgc2V0IGRhdGVQaWNrZXJWYWx1ZSh2YWx1ZTogRGF0ZSkge1xyXG4gICAgICAgIHRoaXMuX2RhdGVQaWNrZXJWYWx1ZSA9IHZhbHVlO1xyXG4gICAgfVxyXG5cclxuICAgIGdldCBpbml0aWFsVmFsdWVTZXQoKTogYm9vbGVhbiB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2luaXRpYWxWYWx1ZVNldDtcclxuICAgIH1cclxuXHJcbiAgICBnZXQgZGF0ZVBpY2tlckluaXRpYWxWYWx1ZSgpOiBEYXRlIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fZGF0ZVBpY2tlckluaXRpYWxWYWx1ZTtcclxuICAgIH1cclxuXHJcbiAgICBnZXQgZGF0ZUlucHV0Rm9ybWF0KCk6IHN0cmluZyB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2RhdGVJbnB1dEZvcm1hdDtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgc2V0VmFsdWUodmFsdWU6IERhdGUpIHtcclxuICAgICAgICBpZiAodHlwZW9mIHZhbHVlID09PSBcInN0cmluZ1wiKSB7XHJcbiAgICAgICAgICAgIHZhbHVlID0gbW9tZW50KHZhbHVlKS50b0RhdGUoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHZhbHVlICE9IG51bGwgJiYgT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHZhbHVlKSA9PT0gXCJbb2JqZWN0IERhdGVdXCIpIHtcclxuICAgICAgICAgICAgLy8gaXQgaXMgYSBkYXRlXHJcbiAgICAgICAgICAgIGlmIChpc05hTih2YWx1ZS5nZXRUaW1lKCkpKSB7XHJcbiAgICAgICAgICAgICAgICB2YWx1ZSA9IG51bGw7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAvLyBjdXQgb2ZmIGxvY2FsIHRpbWV6b25lXHJcbiAgICAgICAgICAgICAgICB2YWx1ZSA9IG5ldyBEYXRlKHZhbHVlLnRvRGF0ZVN0cmluZygpICsgXCIgMDA6MDA6MDAgR01UXCIpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgdmFsdWUgPSBudWxsO1xyXG4gICAgICAgIH1cclxuICAgICAgICAvLyB1cGRhdGUgdWlcclxuICAgICAgICB0aGlzLl9kYXRlUGlja2VyVmFsdWUgPSB2YWx1ZTtcclxuICAgICAgICBzdXBlci5zZXRWYWx1ZSh2YWx1ZSk7XHJcbiAgICAgICAgaWYgKCF0aGlzLl9pbml0aWFsVmFsdWVTZXQpIHtcclxuICAgICAgICAgICAgdGhpcy5fZGF0ZVBpY2tlckluaXRpYWxWYWx1ZSA9IHZhbHVlO1xyXG4gICAgICAgICAgICB0aGlzLl9pbml0aWFsVmFsdWVTZXQgPSB0cnVlO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgdXBkYXRlVmFsdWVGcm9tR3VpKHZhbHVlOiBEYXRlKSB7XHJcbiAgICAgICAgaWYgKHZhbHVlICE9IG51bGwgJiYgaXNOYU4odmFsdWUuZ2V0RGF0ZSgpKSkge1xyXG4gICAgICAgICAgICB2YWx1ZSA9IG51bGw7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICh2YWx1ZSAhPSBudWxsKSB7XHJcbiAgICAgICAgICAgIHRoaXMuc2V0VmFsdWUodmFsdWUpO1xyXG4gICAgICAgICAgICB0aGlzLl9kYXRlUGlja2VyVmFsdWUgPSB0aGlzLnZhbHVlO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG4iXX0=