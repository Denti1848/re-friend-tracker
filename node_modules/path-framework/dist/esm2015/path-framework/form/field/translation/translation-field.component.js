import * as tslib_1 from "tslib";
import { Component, Input, Output } from "@angular/core";
import { ValueField } from "../value-field";
import { FormFunction } from "../../form-function";
import { Form } from "../../form.component";
import { OkButton } from "../button/ok-button";
import { CancelButton } from "../button/cancel-button";
import { TextField } from "../text/text-field.component";
import { FocusUtility } from "../../focus-utility";
let TranslationFieldComponent = class TranslationFieldComponent {
};
tslib_1.__decorate([
    Input("field"),
    Output("field")
], TranslationFieldComponent.prototype, "field", void 0);
TranslationFieldComponent = tslib_1.__decorate([
    Component({
        selector: "path-translationfield",
        template: "<path-form-field-label [label]=\"field.name\" [required]=\"field.required\"></path-form-field-label>\r\n<div [class.col-md-4]=\"field.width == 1\" [class.col-md-10]=\"field.width == 2\">\r\n    <div class=\"input-group\">\r\n        <input *ngIf=\"field.height == null || field.height <= 1\" #model=\"ngModel\" readonly-with-required (keydown)=\"field.editTranslations()\" (click)=\"field.editTranslations()\" [class.required-field]=\"!model.valid && !model.pristine && field.required\" [required]=\"field.required\" [(ngModel)]=\"field.defaultTranslation\" type=\"text\" class=\"form-control\" placeholder=\"\">\r\n        <textarea *ngIf=\"field.height != null && field.height > 1\" #model=\"ngModel\" readonly-with-required (keydown)=\"field.editTranslations()\" (click)=\"field.editTranslations()\" [class.required-field]=\"(!model.valid &&!model.pristine && field.required)\" [required]=\"field.required\" [(ngModel)]=field.defaultTranslation rows=\"{{field.height}}\" type=\"text\" class=\"form-control\" placeholder=\"\"></textarea>\r\n        <span class=\"input-group-btn\">\r\n                <button [disabled]=\"field.isReadonly()\" (click)=\"field.editTranslations()\" class=\"btn btn-default\" type=\"button\">{{field.translationLabel}}...</button>\r\n        </span>\r\n    </div>\r\n</div>\r\n"
    })
], TranslationFieldComponent);
export { TranslationFieldComponent };
export class TranslationField extends ValueField {
    constructor(form, pathService, translationService) {
        super(form, translationService);
        this.pathService = pathService;
        this.translationService = translationService;
        this._defaultTranslation = null;
        this.userLanguage = translationService.getUserLanguage();
        this.languages = translationService.getSupportedLanguageCodes();
        const initialList = [];
        for (const language of this.languages) {
            initialList.push([{ "key": language }, ""]);
        }
        this.setValue(initialList);
        this._translationLabel = translationService.getText("Translation");
    }
    get defaultTranslation() {
        return this._defaultTranslation;
    }
    set defaultTranslation(value) {
        this._defaultTranslation = value;
    }
    get translationLabel() {
        return this._translationLabel;
    }
    setValue(value) {
        super.setValue(value);
        this._defaultTranslation = this.getDefaultTranslation();
    }
    getDefaultTranslation() {
        if (this.value != null) {
            for (const item of this.value) {
                if (item[0] != null && item[0]["key"] === this.userLanguage) {
                    return item[1];
                }
            }
        }
        return null;
    }
    editTranslations() {
        const form = new Form(this.pathService, this.form.getApp());
        const translationFields = [];
        form.title = this.name + " " + this.translationService.getText("Translations");
        form.formFunction = new FormFunction();
        form.formFunction.save = (data) => {
            const resultList = [];
            for (const field of translationFields) {
                resultList.push([{ "key": field.id }, field.value]);
            }
            this.setValue(resultList);
            this.getForm().getApp().closeCurrentForm();
        };
        form.formFunction.cancel = () => {
            this.getForm().getApp().closeCurrentForm();
        };
        const translations = this.value;
        for (const key of translations) {
            const textField = new TextField(form, this.translationService);
            textField.type = "text";
            textField.id = key[0]["key"];
            textField.name = this.translationService.getText(key[0]["key"]);
            textField.visible = true;
            textField.newRow = true;
            textField.width = 2;
            textField.height = this.height;
            textField.labelVisible = true;
            textField.required = true;
            textField.setValue(key[1]);
            form.fields.push(textField);
            translationFields.push(textField);
        }
        const cancelButton = new CancelButton(form, this.translationService);
        cancelButton.type = "cancelButton";
        cancelButton.name = this.translationService.getText("Cancel");
        cancelButton.visible = true;
        form.fields.push(cancelButton);
        const okButton = new OkButton(form, this.translationService);
        okButton.type = "okButton";
        okButton.name = this.translationService.getText("Ok");
        okButton.visible = true;
        form.fields.push(okButton);
        form.updateRows();
        this.form.getApp()["_formStack"].push(form); // TODO
        FocusUtility.focusFirstField(form);
    }
}
export class TranslationEntry {
    get text() {
        return this._text;
    }
    set text(value) {
        this._text = value;
    }
    get code() {
        return this._code;
    }
    set code(value) {
        this._code = value;
    }
}
//# sourceMappingURL=data:application/json;base64,