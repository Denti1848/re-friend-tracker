import * as tslib_1 from "tslib";
import { Injectable } from "@angular/core";
let TranslationService = class TranslationService {
    constructor() {
        this.translationMap = this.createTranslationMap(this.getTranslations());
    }
    getText(key, ...parameters) {
        if (key == null) {
            return "";
        }
        else if (key[this.getUserLanguage()] != null) {
            return key[this.getUserLanguage()];
        }
        else if (key["default"] != null) {
            return key["default"];
        }
        else if (this.getTranslation(key) == null) {
            return "{" + key + "}";
        }
        let result = this.getTranslation(key);
        let k = 0;
        for (const parameter of parameters) {
            result = result.replace("{" + k + "}", parameter);
            k++;
        }
        return result;
    }
    getTranslation(key) {
        return this.translationMap.get(key);
    }
    createTranslationMap(data) {
        const result = new Map();
        for (const item of Object.keys(data)) {
            result.set(item, data[item]);
        }
        return result;
    }
    getUserLanguage() {
        const languageCode = sessionStorage.getItem("languageCode");
        if (languageCode && this.getSupportedLanguageCodes().indexOf(languageCode) > 0) {
            return languageCode;
        }
        if (this.getSupportedLanguageCodes().length <= 0) {
            console.log("No supported language codes defined. Please check translation service.");
            return "en";
        }
        return this.getSupportedLanguageCodes()[0];
    }
    getUserDateFormat() {
        // TODO: add locale support
        if (this.getUserLanguage() === "de") {
            return "DD.MM.YYYY";
        }
        return "MM/DD/YYYY";
    }
    getSupportedLanguageCodes() {
        return ["en", "de"];
    }
    getTranslations() {
        const languageCode = this.getUserLanguage();
        if (languageCode === "de") {
            return {
                "Back": "Zurück",
                "Cancel": "Abbrechen",
                "Delete": "Löschen",
                "DeleteWarningQuestion": "Wollen Sie diesen Datensatz löschen?",
                "Detail": "Detail",
                "Files": "Dateien",
                "FileLimitMessage": "Die Anzahl Dateien ist auf {0} limitiert. Bitte reduzieren Sie die Anzahl Dateien.",
                "FileSingleSizeMessage": "Die Dateigrösse einer Datei sollte {0} nicht überschreiten.",
                "FileAllSizeMessage": "Die Dateigrösse aller Dateien zusammen sollte {0} nicht überschreiten.",
                "Logout": "Abmelden",
                "MainMenu": "Hauptmenü",
                "New": "Neu",
                "NotSignedIn": "Nicht angemeldet",
                "Ok": "OK",
                "Result": "Resultat",
                "Results": "Resultate",
                "Search": "Suche",
                "SearchInputLabel": "Suchbegriff",
                "SearchTextTooShort": "Suchbegriff zu kurz",
                "SignedInAs": "Angemeldet als",
                "Translation": "Übersetzung",
                "Translations": "Übersetzungen",
                "de": "Deutsch",
                "en": "Englisch",
            };
        }
        else {
            return {
                "Back": "Back",
                "Cancel": "Cancel",
                "Delete": "Delete",
                "DeleteWarningQuestion": "Do you want to delete this item?",
                "Detail": "Detail",
                "Files": "Files",
                "FileLimitMessage": "The number of files is limited to {0}. Please reduce the number of files.",
                "FileSingleSizeMessage": "The file size for a single file is limited to {0}.",
                "FileAllSizeMessage": "The size of all files should not exceed {0}.",
                "Logout": "Logout",
                "MainMenu": "Main Menu",
                "New": "New",
                "NotSignedIn": "Not signed in",
                "Ok": "Ok",
                "Result": "Result",
                "Results": "Results",
                "Search": "Search",
                "SearchInputLabel": "Enter search text",
                "SearchTextTooShort": "Search text too short",
                "SignedInAs": "Signed in as",
                "Translation": "Translation",
                "Translations": "Translations",
                "de": "German",
                "en": "English",
            };
        }
    }
};
TranslationService = tslib_1.__decorate([
    Injectable()
], TranslationService);
export { TranslationService };
//# sourceMappingURL=data:application/json;base64,