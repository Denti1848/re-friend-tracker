import * as tslib_1 from "tslib";
import { Injectable, Inject } from "@angular/core";
import { TranslationService } from "./translation.service";
import { HttpClient, HttpHeaders } from "@angular/common/http";
let PathService = class PathService {
    constructor(http, translationService) {
        this.http = http;
        this.translationService = translationService;
        this._alertStack = [];
        this._requestCount = 0;
    }
    isLoading() {
        return this._requestCount > 0;
    }
    showLoading() {
        window.setTimeout(() => {
            this._requestCount++;
        }, 1);
    }
    hideLoading() {
        window.setTimeout(() => {
            this._requestCount--;
        }, 1);
    }
    serverGet(server, url, processor, errorHandler) {
        if (url != null) {
            // fetch json data from url
            this.showLoading();
            this.http.get(server + url, { observe: "response", headers: this.appendHeaders() })
                .subscribe(data => {
                const jwt = data.headers.get("Authorization");
                if (jwt != null && jwt !== "") {
                    sessionStorage.setItem("pathAppId", data.headers.get("Authorization"));
                }
                else {
                    sessionStorage.removeItem("pathAppId");
                }
                processor(data.body);
            }, err => {
                if (errorHandler == null) {
                    this.handleError(err);
                }
                else {
                    errorHandler(err);
                }
            }, () => {
                this.hideLoading();
                console.log("server GET to " + server + url + " finished");
            });
        }
        else {
            // no url provided, therefore call processor without data
            processor(null);
        }
    }
    serverPost(server, url, data, processor, errorHandler) {
        if (url != null) {
            this.showLoading();
            this.http.post(server + url, data, { observe: "response", headers: this.appendHeaders() })
                .subscribe(responseData => {
                sessionStorage.setItem("pathAppId", responseData.headers.get("Authorization"));
                console.log(responseData);
                processor(responseData.body);
            }, err => {
                if (errorHandler == null) {
                    this.handleError(err);
                }
                else {
                    errorHandler(err);
                }
            }, () => {
                this.hideLoading();
                console.log("server POST to " + server + url + " finished:");
                console.log(data);
            });
        }
        else {
            // no url provided, therefore call processor without data
            processor(null);
        }
    }
    serverPut(server, url, data, processor) {
        if (url != null) {
            this.showLoading();
            this.http.put(server + url, data, { observe: "response", headers: this.appendHeaders() })
                .subscribe(responseData => {
                sessionStorage.setItem("pathAppId", responseData.headers.get("Authorization"));
                console.log(responseData);
                processor(responseData.body);
            }, err => {
                this.handleError(err);
            }, () => {
                this.hideLoading();
                console.log("server PUT to " + server + url + " finished:");
                console.log(data);
            });
        }
        else {
            // no url provided, therefore call processor without data
            processor(null);
        }
    }
    serverDelete(server, url, processor) {
        if (url != null) {
            this.showLoading();
            this.http.delete(server + url, { observe: "response", headers: this.appendHeaders() })
                .subscribe(data => {
                sessionStorage.setItem("pathAppId", data.headers.get("Authorization"));
                console.log(data);
                processor(data.body);
            }, err => {
                this.handleError(err);
            }, () => {
                this.hideLoading();
                console.log("server DELETE to " + server + url + " finished:");
            });
        }
        else {
            // no url provided, therefore call processor without data
            processor(null);
        }
    }
    handleError(err) {
        this.hideLoading();
        if (err.status === 405 && err.error["messageKey"] != null) {
            alert(this.translationService.getText(err.error["messageKey"], err.error["parameters"]));
        }
        else if (err.status === 401) {
            alert("Unauthorized. Please login again.");
            location.reload();
        }
        else {
            // general error
            if (err.error["error"] == null && err.error["title"] == null) {
                this.addAlert("Unkwown Error", "Please check server and internet connection: " + err.error);
            }
            else {
                this.addAlert(err.error["title"], err.error["error"]);
            }
            console.error(err);
        }
    }
    appendHeaders() {
        let headers = new HttpHeaders();
        headers = headers.append("Content-Type", "application/json");
        const jwt = sessionStorage.getItem("pathAppId");
        if (jwt != null) {
            headers = headers.append("Authorization", jwt);
        }
        return headers;
    }
    getAlerts() {
        return this._alertStack;
    }
    addAlert(title, text) {
        const alert = new Alert();
        alert.title = title;
        alert.text = text;
        this._alertStack.push(alert);
    }
    clearAlert(id) {
        for (let i = 0; i < this._alertStack.length; i++) {
            if (this._alertStack[i].id === id) {
                this._alertStack.splice(i, 1);
                break;
            }
        }
    }
};
PathService.ctorParameters = () => [
    { type: HttpClient, decorators: [{ type: Inject, args: [HttpClient,] }] },
    { type: TranslationService }
];
PathService = tslib_1.__decorate([
    Injectable(),
    tslib_1.__param(0, Inject(HttpClient))
], PathService);
export { PathService };
export class Alert {
    constructor() {
        this._id = Date.now();
    }
    get title() {
        return this._title;
    }
    set title(value) {
        this._title = value;
    }
    get text() {
        return this._text;
    }
    set text(value) {
        this._text = value;
    }
    get id() {
        return this._id;
    }
}
//# sourceMappingURL=data:application/json;base64,