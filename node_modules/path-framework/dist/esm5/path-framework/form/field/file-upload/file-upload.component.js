import * as tslib_1 from "tslib";
import { Component, Input, Output, ViewChild } from "@angular/core";
import { ValueField } from "../value-field";
import { HttpClient, HttpEvent, HttpEventType, HttpParams, HttpRequest, HttpResponse } from "@angular/common/http";
var FileUploadComponent = /** @class */ (function () {
    function FileUploadComponent(http) {
        this.http = http;
        this.dragActive = false;
    }
    FileUploadComponent.prototype.onDropFile = function (event) {
        this.dragActive = false;
        event.preventDefault();
        this.uploadFile(event.dataTransfer.files);
    };
    FileUploadComponent.prototype.onDragOverFile = function (event) {
        this.dragActive = true;
        event.stopPropagation();
        event.preventDefault();
    };
    FileUploadComponent.prototype.onDragLeave = function () {
        this.dragActive = false;
    };
    FileUploadComponent.prototype.selectFile = function (event) {
        this.uploadFile(event.target.files);
    };
    FileUploadComponent.prototype.uploadFile = function (files) {
        var _this = this;
        if (files.length === 0) {
            console.log("No file selected!");
            return;
        }
        // check if file limit is exceeded
        if (!this.field.checkFileLimit(files.length)) {
            this.resetFileUploadElement();
            return;
        }
        // check file sizes
        if (!this.field.checkFileSize(files)) {
            this.resetFileUploadElement();
            return;
        }
        // upload submitted files
        Array.from(files).forEach(function (file) {
            _this.doUpload(_this.field.getForm().getApp().getBackendUrl() + _this.field.url, file)
                .subscribe(function (event) {
                if (event.type === HttpEventType.UploadProgress) {
                    var percentDone = Math.round(100 * event.loaded / event.total);
                    var uploadFile = _this.field.findCurrentUpload(file.name);
                    if (uploadFile == null) {
                        uploadFile = _this.addNewPathFile(file);
                    }
                    uploadFile.uploadProgress = percentDone;
                }
                else if (event instanceof HttpResponse) {
                    var uploadFile = _this.field.findCurrentUpload(file.name);
                    if (uploadFile == null) {
                        uploadFile = _this.addNewPathFile(file);
                    }
                    var key = new PathFileKey(event.body["key"]["key"], event.body["key"]["name"]);
                    uploadFile.key = key;
                    uploadFile.uploadFinished = true;
                    uploadFile.uploadSuccessful = true;
                    _this.field.updateRequiredStatus();
                }
            }, function (err) {
                console.log("Upload Error:", err);
                var uploadFile = _this.field.findCurrentUpload(file.name);
                if (uploadFile) {
                    uploadFile.sizeString = "Error";
                    uploadFile.uploadFinished = true;
                }
                else {
                    console.log("error: file should exist (" + file.name + ")");
                }
                _this.resetFileUploadElement();
            }, function () {
                _this.resetFileUploadElement();
            });
        });
    };
    FileUploadComponent.prototype.addNewPathFile = function (file) {
        var uploadFile = new PathFile();
        uploadFile.name = file.name;
        uploadFile.size = file.size;
        uploadFile.sizeString = this.field.getReadableFileSizeString(file.size);
        uploadFile.active = true;
        this.field.value.push(uploadFile);
        this.field.sortValues();
        return uploadFile;
    };
    FileUploadComponent.prototype.resetFileUploadElement = function () {
        var count = this.field.value.reduce(function (acc, cur) { return !cur.uploadFinished ? ++acc : acc; }, 0);
        if (count === 0) {
            this.fileInputReference.nativeElement.value = "";
        }
    };
    FileUploadComponent.prototype.doUpload = function (url, file) {
        var formData = new FormData();
        formData.append("upload", file);
        var params = new HttpParams();
        var options = {
            params: params,
            reportProgress: true,
        };
        var req = new HttpRequest("POST", url, formData, options);
        return this.http.request(req); // <any> fixes TS2719
    };
    FileUploadComponent.ctorParameters = function () { return [
        { type: HttpClient }
    ]; };
    tslib_1.__decorate([
        Input("field"),
        Output("field")
    ], FileUploadComponent.prototype, "field", void 0);
    tslib_1.__decorate([
        ViewChild("fileInput", { static: true })
    ], FileUploadComponent.prototype, "fileInputReference", void 0);
    FileUploadComponent = tslib_1.__decorate([
        Component({
            selector: "path-file-upload",
            template: "<path-form-field-label [label]=\"field.name\" [required]=\"field.required\"></path-form-field-label>\r\n<div [class.col-md-4]=\"field.width == 1\" [class.col-md-10]=\"field.width == 2\" [class.file-upload-drop]=\"dragActive\"\r\n     (drop)=\"onDropFile($event)\" (dragleave)=\"onDragLeave()\" (dragover)=\"onDragOverFile($event)\">\r\n    <table class=\"table\">\r\n        <thead>\r\n        <tr>\r\n            <td class=\"col-md-7\">File Name</td>\r\n            <td class=\"col-md-2\">Size</td>\r\n            <td class=\"col-md-3\"></td>\r\n        </tr>\r\n        </thead>\r\n        <tbody>\r\n        <ng-container *ngFor=\"let file of field.value; let index = index\">\r\n            <tr *ngIf=\"file.active\">\r\n                <td class=\"col-md-7\"><a href=\"#\" (click)=\"field.download(file.key)\">{{file.name}}</a></td>\r\n                <td class=\"col-md-2\">{{file.sizeString}}</td>\r\n                <td class=\"col-md-3\" align=\"right\">\r\n                    <a *ngIf=\"file.uploadFinished\" href=\"#\" (click)=\"field.remove(index, file.key)\">Remove</a>\r\n                    <div *ngIf=\"!file.uploadFinished\" class=\"progress\">\r\n                        <div class=\"progress-bar\" role=\"progressbar\" [style.width.%]=\"file.uploadProgress\"\r\n                             [attr.aria-valuenow]=\"file.uploadProgress\" aria-valuemin=\"0\" aria-valuemax=\"100\">\r\n                            <span class=\"sr-only\">{{file.uploadProgress}}% Complete</span>\r\n                        </div>\r\n                    </div>\r\n                </td>\r\n            </tr>\r\n        </ng-container>\r\n        </tbody>\r\n    </table>\r\n    <div class=\"form-group\">\r\n        <input type=\"file\" class=\"form-control-file\" (change)=\"selectFile($event)\" placeholder=\"Upload file\"\r\n               [multiple]=\"field.multiple\" accept=\"{{field.acceptedFileTypes.join(', ')}}\"\r\n               [disabled]=\"field.isReadonly()\"\r\n               [required]=\"field.fileUploadRequired\" #fileInput>\r\n    </div>\r\n</div>\r\n"
        })
    ], FileUploadComponent);
    return FileUploadComponent;
}());
export { FileUploadComponent };
var FileUploadField = /** @class */ (function (_super) {
    tslib_1.__extends(FileUploadField, _super);
    function FileUploadField(form, translationService) {
        var _this = _super.call(this, form, translationService) || this;
        _this._multiple = true;
        _this._acceptedFileTypes = [];
        _this._fileLimit = 0;
        _this._singleFileSizeLimit = 0;
        _this._allFilesSizeLimit = 0;
        _this.value = [];
        _this._acceptedFileTypes.push("*.*");
        _this.updateRequiredStatus();
        return _this;
    }
    FileUploadField.prototype.setValue = function (value) {
        var e_1, _a;
        var files = [];
        try {
            for (var value_1 = tslib_1.__values(value), value_1_1 = value_1.next(); !value_1_1.done; value_1_1 = value_1.next()) {
                var item = value_1_1.value;
                var file = Object.assign(new PathFile(), item);
                file.key = Object.assign(new PathFileKey(null, null), item.key);
                files.push(file);
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (value_1_1 && !value_1_1.done && (_a = value_1.return)) _a.call(value_1);
            }
            finally { if (e_1) throw e_1.error; }
        }
        this.sortValues();
        _super.prototype.setValue.call(this, files);
        this.updateRequiredStatus();
    };
    FileUploadField.prototype.sortValues = function () {
        this.value.sort(function (a, b) { return a.name.localeCompare(b.name); });
    };
    Object.defineProperty(FileUploadField.prototype, "url", {
        get: function () {
            return this._url;
        },
        set: function (value) {
            this._url = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FileUploadField.prototype, "multiple", {
        get: function () {
            return this._multiple;
        },
        set: function (value) {
            this._multiple = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FileUploadField.prototype, "acceptedFileTypes", {
        get: function () {
            return this._acceptedFileTypes;
        },
        set: function (value) {
            this._acceptedFileTypes = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FileUploadField.prototype, "fileUploadRequired", {
        get: function () {
            return this._fileUploadRequired;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FileUploadField.prototype, "fileLimit", {
        get: function () {
            return this._fileLimit;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FileUploadField.prototype, "singleFileSizeLimit", {
        get: function () {
            return this._singleFileSizeLimit;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FileUploadField.prototype, "allFilesSizeLimit", {
        get: function () {
            return this._allFilesSizeLimit;
        },
        enumerable: true,
        configurable: true
    });
    FileUploadField.prototype.remove = function (index, key) {
        if (key) {
            var file = this.find(key);
            if (file) {
                file.active = false;
            }
            this.updateRequiredStatus();
        }
        else {
            this.value.splice(index, 1);
        }
    };
    FileUploadField.prototype.find = function (key) {
        var e_2, _a;
        try {
            for (var _b = tslib_1.__values(this.value), _c = _b.next(); !_c.done; _c = _b.next()) {
                var file = _c.value;
                if (file.key.equals(key)) {
                    return file;
                }
            }
        }
        catch (e_2_1) { e_2 = { error: e_2_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_2) throw e_2.error; }
        }
        return null;
    };
    FileUploadField.prototype.findCurrentUpload = function (name) {
        var e_3, _a;
        try {
            for (var _b = tslib_1.__values(this.value), _c = _b.next(); !_c.done; _c = _b.next()) {
                var file = _c.value;
                if (file.name === name && !file.uploadFinished) {
                    return file;
                }
            }
        }
        catch (e_3_1) { e_3 = { error: e_3_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_3) throw e_3.error; }
        }
        return null;
    };
    FileUploadField.prototype.updateRequiredStatus = function () {
        var uploadInProgressCount = 0;
        var uploadSuccessfulCount = 0;
        this.value.forEach(function (file) {
            if (file.active && !file.uploadFinished) {
                uploadInProgressCount++;
            }
            if (file.active && file.uploadSuccessful) {
                uploadSuccessfulCount++;
            }
        });
        var newStatus = false;
        if (uploadInProgressCount > 0) {
            // always required if upload in progress
            newStatus = true;
        }
        else if (this.required && uploadSuccessfulCount <= 0) {
            newStatus = true;
        }
        this._fileUploadRequired = newStatus;
    };
    FileUploadField.prototype.checkFileLimit = function (newFilesLength) {
        var activeFileCount = 0;
        this.value.forEach(function (file) {
            if (file.active) {
                activeFileCount++;
            }
        });
        if (this.fileLimit > 0 && ((activeFileCount + newFilesLength) > this.fileLimit)) {
            var message = this.translationService.getText("FileLimitMessage", String(this.fileLimit));
            this.getForm().getApp().yesNo(message, function () { }, function () { });
            return false;
        }
        return true;
    };
    FileUploadField.prototype.checkFileSize = function (files) {
        var e_4, _a;
        if (this._singleFileSizeLimit || this._allFilesSizeLimit) {
            // check single file limit
            var sizeSum_1 = 0;
            var fileArray = Array.from(files);
            try {
                for (var fileArray_1 = tslib_1.__values(fileArray), fileArray_1_1 = fileArray_1.next(); !fileArray_1_1.done; fileArray_1_1 = fileArray_1.next()) {
                    var file = fileArray_1_1.value;
                    sizeSum_1 += file.size;
                    if (this._singleFileSizeLimit > 0 && file.size > this._singleFileSizeLimit) {
                        var message = this.translationService.getText("FileSingleSizeMessage", this.getReadableFileSizeString(this._singleFileSizeLimit));
                        this.getForm().getApp().yesNo(message, function () { }, function () { });
                        return false;
                    }
                }
            }
            catch (e_4_1) { e_4 = { error: e_4_1 }; }
            finally {
                try {
                    if (fileArray_1_1 && !fileArray_1_1.done && (_a = fileArray_1.return)) _a.call(fileArray_1);
                }
                finally { if (e_4) throw e_4.error; }
            }
            // check sum limit
            if (this._allFilesSizeLimit > 0) {
                this.value.forEach(function (file) {
                    if (file.active) {
                        sizeSum_1 += file.size;
                    }
                });
                if (this._allFilesSizeLimit > 0 && sizeSum_1 > this._allFilesSizeLimit) {
                    var message = this.translationService.getText("FileAllSizeMessage", this.getReadableFileSizeString(this._allFilesSizeLimit));
                    this.getForm().getApp().yesNo(message, function () { }, function () { });
                    return false;
                }
            }
        }
        return true;
    };
    FileUploadField.prototype.getReadableFileSizeString = function (byteSize) {
        var i = -1;
        var byteUnits = [" kB", " MB", " GB", " TB", " PB", " EB", " ZB", " YB"];
        do {
            byteSize = byteSize / 1024;
            i++;
        } while (byteSize > 1024);
        return Math.max(byteSize, 0.1).toFixed(1) + byteUnits[i];
    };
    FileUploadField.prototype.download = function (key) {
        window.location.assign(this.getForm().getApp().getBackendUrl() + this.url + "/" + key.key);
    };
    FileUploadField.prototype.fromJson = function (modelFormField) {
        _super.prototype.fromJson.call(this, modelFormField);
        this.type = "fileUpload";
        if (modelFormField["url"]) {
            this.url = modelFormField["url"];
        }
        if (modelFormField["multiple"] != null) {
            this.multiple = modelFormField["multiple"];
        }
        if (modelFormField["acceptedFileTypes"]) {
            this.acceptedFileTypes = modelFormField["acceptedFileTypes"];
        }
        if (modelFormField["fileLimit"]) {
            this._fileLimit = modelFormField["fileLimit"];
        }
        if (modelFormField["singleFileSizeLimit"]) {
            this._singleFileSizeLimit = modelFormField["singleFileSizeLimit"];
        }
        if (modelFormField["allFilesSizeLimit"]) {
            this._allFilesSizeLimit = modelFormField["allFilesSizeLimit"];
        }
        this.updateRequiredStatus();
    };
    return FileUploadField;
}(ValueField));
export { FileUploadField };
var PathFile = /** @class */ (function () {
    function PathFile() {
        this.uploadFinished = false;
        this.uploadSuccessful = false;
        this.uploadProgress = 0;
        this.size = 0;
    }
    return PathFile;
}());
export { PathFile };
// TODO unify with list key
// tslint:disable:max-classes-per-file
var PathFileKey = /** @class */ (function () {
    function PathFileKey(key, name) {
        this.key = key;
        this.name = name;
    }
    PathFileKey.prototype.equals = function (otherKey) {
        if (otherKey != null &&
            otherKey.name &&
            otherKey.key &&
            this.name &&
            this.key &&
            otherKey.name === this.name &&
            otherKey.key === this.key) {
            return true;
        }
        return false;
    };
    return PathFileKey;
}());
export { PathFileKey };
//# sourceMappingURL=data:application/json;base64,