import * as tslib_1 from "tslib";
import { FormField } from "./form-field";
var ValueField = /** @class */ (function (_super) {
    tslib_1.__extends(ValueField, _super);
    function ValueField() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this._isInitialValueSet = false;
        _this._created = false;
        return _this;
    }
    Object.defineProperty(ValueField.prototype, "value", {
        get: function () {
            return this._value;
        },
        set: function (value) {
            this._value = value;
        },
        enumerable: true,
        configurable: true
    });
    ValueField.prototype.setValue = function (value) {
        this._value = value;
    };
    Object.defineProperty(ValueField.prototype, "created", {
        get: function () {
            return this._created;
        },
        set: function (value) {
            this._created = value;
        },
        enumerable: true,
        configurable: true
    });
    ValueField.prototype.isReadonly = function () {
        return this.readonly;
    };
    Object.defineProperty(ValueField.prototype, "isInitialValueSet", {
        get: function () {
            return this._isInitialValueSet;
        },
        set: function (value) {
            this._isInitialValueSet = value;
        },
        enumerable: true,
        configurable: true
    });
    ValueField.prototype.fromJson = function (modelFormField) {
        _super.prototype.fromJson.call(this, modelFormField);
        if (modelFormField["value"] != null) {
            this.setValue(modelFormField["value"]);
        }
    };
    return ValueField;
}(FormField));
export { ValueField };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidmFsdWUtZmllbGQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9wYXRoLWZyYW1ld29yay8iLCJzb3VyY2VzIjpbInBhdGgtZnJhbWV3b3JrL2Zvcm0vZmllbGQvdmFsdWUtZmllbGQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBQyxTQUFTLEVBQUMsTUFBTSxjQUFjLENBQUM7QUFFdkM7SUFBbUMsc0NBQVM7SUFBNUM7UUFBQSxxRUEyQ0M7UUF6Q1csd0JBQWtCLEdBQUcsS0FBSyxDQUFDO1FBQzNCLGNBQVEsR0FBRyxLQUFLLENBQUM7O0lBd0M3QixDQUFDO0lBdENHLHNCQUFJLDZCQUFLO2FBQVQ7WUFDSSxPQUFPLElBQUksQ0FBQyxNQUFNLENBQUM7UUFDdkIsQ0FBQzthQUVELFVBQVUsS0FBUTtZQUNkLElBQUksQ0FBQyxNQUFNLEdBQUcsS0FBSyxDQUFDO1FBQ3hCLENBQUM7OztPQUpBO0lBTU0sNkJBQVEsR0FBZixVQUFnQixLQUFRO1FBQ3BCLElBQUksQ0FBQyxNQUFNLEdBQUcsS0FBSyxDQUFDO0lBQ3hCLENBQUM7SUFFRCxzQkFBSSwrQkFBTzthQUFYO1lBQ0ksT0FBTyxJQUFJLENBQUMsUUFBUSxDQUFDO1FBQ3pCLENBQUM7YUFFRCxVQUFZLEtBQWM7WUFDdEIsSUFBSSxDQUFDLFFBQVEsR0FBRyxLQUFLLENBQUM7UUFDMUIsQ0FBQzs7O09BSkE7SUFNTSwrQkFBVSxHQUFqQjtRQUNJLE9BQU8sSUFBSSxDQUFDLFFBQVEsQ0FBQztJQUN6QixDQUFDO0lBRUQsc0JBQUkseUNBQWlCO2FBQXJCO1lBQ0ksT0FBTyxJQUFJLENBQUMsa0JBQWtCLENBQUM7UUFDbkMsQ0FBQzthQUVELFVBQXNCLEtBQWM7WUFDaEMsSUFBSSxDQUFDLGtCQUFrQixHQUFHLEtBQUssQ0FBQztRQUNwQyxDQUFDOzs7T0FKQTtJQU1NLDZCQUFRLEdBQWYsVUFBZ0IsY0FBYztRQUMxQixpQkFBTSxRQUFRLFlBQUMsY0FBYyxDQUFDLENBQUM7UUFDL0IsSUFBSSxjQUFjLENBQUMsT0FBTyxDQUFDLElBQUksSUFBSSxFQUFFO1lBQ2pDLElBQUksQ0FBQyxRQUFRLENBQUMsY0FBYyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUM7U0FDMUM7SUFDTCxDQUFDO0lBQ0wsaUJBQUM7QUFBRCxDQUFDLEFBM0NELENBQW1DLFNBQVMsR0EyQzNDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtGb3JtRmllbGR9IGZyb20gXCIuL2Zvcm0tZmllbGRcIjtcclxuXHJcbmV4cG9ydCBjbGFzcyBWYWx1ZUZpZWxkPFQ+IGV4dGVuZHMgRm9ybUZpZWxkIHtcclxuICAgIHByaXZhdGUgX3ZhbHVlOiBUO1xyXG4gICAgcHJpdmF0ZSBfaXNJbml0aWFsVmFsdWVTZXQgPSBmYWxzZTtcclxuICAgIHByaXZhdGUgX2NyZWF0ZWQgPSBmYWxzZTtcclxuXHJcbiAgICBnZXQgdmFsdWUoKTogVCB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX3ZhbHVlO1xyXG4gICAgfVxyXG5cclxuICAgIHNldCB2YWx1ZSh2YWx1ZTogVCkge1xyXG4gICAgICAgIHRoaXMuX3ZhbHVlID0gdmFsdWU7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIHNldFZhbHVlKHZhbHVlOiBUKSB7XHJcbiAgICAgICAgdGhpcy5fdmFsdWUgPSB2YWx1ZTtcclxuICAgIH1cclxuXHJcbiAgICBnZXQgY3JlYXRlZCgpOiBib29sZWFuIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fY3JlYXRlZDtcclxuICAgIH1cclxuXHJcbiAgICBzZXQgY3JlYXRlZCh2YWx1ZTogYm9vbGVhbikge1xyXG4gICAgICAgIHRoaXMuX2NyZWF0ZWQgPSB2YWx1ZTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgaXNSZWFkb25seSgpOiBib29sZWFuIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5yZWFkb25seTtcclxuICAgIH1cclxuXHJcbiAgICBnZXQgaXNJbml0aWFsVmFsdWVTZXQoKTogYm9vbGVhbiB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2lzSW5pdGlhbFZhbHVlU2V0O1xyXG4gICAgfVxyXG5cclxuICAgIHNldCBpc0luaXRpYWxWYWx1ZVNldCh2YWx1ZTogYm9vbGVhbikge1xyXG4gICAgICAgIHRoaXMuX2lzSW5pdGlhbFZhbHVlU2V0ID0gdmFsdWU7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGZyb21Kc29uKG1vZGVsRm9ybUZpZWxkKSB7XHJcbiAgICAgICAgc3VwZXIuZnJvbUpzb24obW9kZWxGb3JtRmllbGQpO1xyXG4gICAgICAgIGlmIChtb2RlbEZvcm1GaWVsZFtcInZhbHVlXCJdICE9IG51bGwpIHtcclxuICAgICAgICAgICAgdGhpcy5zZXRWYWx1ZShtb2RlbEZvcm1GaWVsZFtcInZhbHVlXCJdKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuIl19