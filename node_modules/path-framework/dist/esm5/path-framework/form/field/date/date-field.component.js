import * as tslib_1 from "tslib";
import { Component, Input, Output } from "@angular/core";
import { ValueField } from "../value-field";
import * as momentImported from "moment";
var moment = momentImported;
var DateFieldComponent = /** @class */ (function () {
    function DateFieldComponent() {
    }
    tslib_1.__decorate([
        Input("field"),
        Output("field")
    ], DateFieldComponent.prototype, "field", void 0);
    DateFieldComponent = tslib_1.__decorate([
        Component({
            selector: "path-datefield",
            template: "<path-form-field-label [label]=\"field.name\" [required]=\"field.required\"></path-form-field-label>\r\n<div [class.col-md-4]=\"field.width == 1\" [class.col-md-10]=\"field.width == 2\">\r\n    <div class=\"input-group\">\r\n\t    <span class=\"input-group-btn\">\r\n\t\t    <button (click)=\"datepicker.toggle()\" class=\"btn btn-default\" type=\"button\"><i class=\"fa fa-calendar fa-fw\"></i></button>\r\n\t    </span>\r\n\t    <input #datepicker=\"bsDatepicker\" #model=\"ngModel\" bsDatepicker [bsConfig]=\"{ dateInputFormat: field.dateInputFormat, containerClass: 'theme-default' }\" placement=\"bottom left\" [bsValue]=\"field.datePickerInitialValue\" [(ngModel)]=\"field.datePickerValue\" (bsValueChange)=\"field.updateValueFromGui($event)\" [isDisabled]=\"field.isReadonly()\" [readonly]=\"field.isReadonly()\" [class.required-field]=\"(!model.valid &&!model.pristine && field.required)\" [required]=\"field.required\" style=\"display: block; width: 100%\" type=\"text\" class=\"form-control\" placeholder=\"\">\r\n    </div>\r\n</div>\r\n"
        })
    ], DateFieldComponent);
    return DateFieldComponent;
}());
export { DateFieldComponent };
var DateField = /** @class */ (function (_super) {
    tslib_1.__extends(DateField, _super);
    function DateField(form, translationService) {
        var _this = _super.call(this, form, translationService) || this;
        _this.form = form;
        _this.translationService = translationService;
        _this._initialValueSet = false;
        _this._dateInputFormat = translationService.getUserDateFormat();
        return _this;
    }
    Object.defineProperty(DateField.prototype, "datePickerValue", {
        get: function () {
            return this._datePickerValue;
        },
        set: function (value) {
            this._datePickerValue = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DateField.prototype, "initialValueSet", {
        get: function () {
            return this._initialValueSet;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DateField.prototype, "datePickerInitialValue", {
        get: function () {
            return this._datePickerInitialValue;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DateField.prototype, "dateInputFormat", {
        get: function () {
            return this._dateInputFormat;
        },
        enumerable: true,
        configurable: true
    });
    DateField.prototype.setValue = function (value) {
        if (typeof value === "string") {
            value = moment(value).toDate();
        }
        if (value != null && Object.prototype.toString.call(value) === "[object Date]") {
            // it is a date
            if (isNaN(value.getTime())) {
                value = null;
            }
            else {
                // cut off local timezone
                value = new Date(value.toDateString() + " 00:00:00 GMT");
            }
        }
        else {
            value = null;
        }
        // update ui
        this._datePickerValue = value;
        _super.prototype.setValue.call(this, value);
        if (!this._initialValueSet) {
            this._datePickerInitialValue = value;
            this._initialValueSet = true;
        }
    };
    DateField.prototype.updateValueFromGui = function (value) {
        if (value != null && isNaN(value.getDate())) {
            value = null;
        }
        if (value != null) {
            this.setValue(value);
            this._datePickerValue = this.value;
        }
    };
    return DateField;
}(ValueField));
export { DateField };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGF0ZS1maWVsZC5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9wYXRoLWZyYW1ld29yay8iLCJzb3VyY2VzIjpbInBhdGgtZnJhbWV3b3JrL2Zvcm0vZmllbGQvZGF0ZS9kYXRlLWZpZWxkLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFDLFNBQVMsRUFBRSxLQUFLLEVBQUUsTUFBTSxFQUFDLE1BQU0sZUFBZSxDQUFDO0FBQ3ZELE9BQU8sRUFBQyxVQUFVLEVBQUMsTUFBTSxnQkFBZ0IsQ0FBQztBQUcxQyxPQUFPLEtBQUssY0FBYyxNQUFNLFFBQVEsQ0FBQztBQUV6QyxJQUFNLE1BQU0sR0FBRyxjQUFjLENBQUM7QUFNOUI7SUFBQTtJQUlBLENBQUM7SUFERztRQUZDLEtBQUssQ0FBQyxPQUFPLENBQUM7UUFDZCxNQUFNLENBQUMsT0FBTyxDQUFDO3FEQUNDO0lBSFIsa0JBQWtCO1FBSjlCLFNBQVMsQ0FBQztZQUNQLFFBQVEsRUFBRSxnQkFBZ0I7WUFDMUIsb2lDQUF3QztTQUMzQyxDQUFDO09BQ1csa0JBQWtCLENBSTlCO0lBQUQseUJBQUM7Q0FBQSxBQUpELElBSUM7U0FKWSxrQkFBa0I7QUFNL0I7SUFBK0IscUNBQWdCO0lBTzNDLG1CQUFzQixJQUFXLEVBQVksa0JBQXNDO1FBQW5GLFlBQ0ksa0JBQU0sSUFBSSxFQUFFLGtCQUFrQixDQUFDLFNBRWxDO1FBSHFCLFVBQUksR0FBSixJQUFJLENBQU87UUFBWSx3QkFBa0IsR0FBbEIsa0JBQWtCLENBQW9CO1FBSjNFLHNCQUFnQixHQUFHLEtBQUssQ0FBQztRQU03QixLQUFJLENBQUMsZ0JBQWdCLEdBQUcsa0JBQWtCLENBQUMsaUJBQWlCLEVBQUUsQ0FBQzs7SUFDbkUsQ0FBQztJQUVELHNCQUFJLHNDQUFlO2FBQW5CO1lBQ0ksT0FBTyxJQUFJLENBQUMsZ0JBQWdCLENBQUM7UUFDakMsQ0FBQzthQUVELFVBQW9CLEtBQVc7WUFDM0IsSUFBSSxDQUFDLGdCQUFnQixHQUFHLEtBQUssQ0FBQztRQUNsQyxDQUFDOzs7T0FKQTtJQU1ELHNCQUFJLHNDQUFlO2FBQW5CO1lBQ0ksT0FBTyxJQUFJLENBQUMsZ0JBQWdCLENBQUM7UUFDakMsQ0FBQzs7O09BQUE7SUFFRCxzQkFBSSw2Q0FBc0I7YUFBMUI7WUFDSSxPQUFPLElBQUksQ0FBQyx1QkFBdUIsQ0FBQztRQUN4QyxDQUFDOzs7T0FBQTtJQUVELHNCQUFJLHNDQUFlO2FBQW5CO1lBQ0ksT0FBTyxJQUFJLENBQUMsZ0JBQWdCLENBQUM7UUFDakMsQ0FBQzs7O09BQUE7SUFFTSw0QkFBUSxHQUFmLFVBQWdCLEtBQVc7UUFDdkIsSUFBSSxPQUFPLEtBQUssS0FBSyxRQUFRLEVBQUU7WUFDM0IsS0FBSyxHQUFHLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQyxNQUFNLEVBQUUsQ0FBQztTQUNsQztRQUNELElBQUksS0FBSyxJQUFJLElBQUksSUFBSSxNQUFNLENBQUMsU0FBUyxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLEtBQUssZUFBZSxFQUFFO1lBQzVFLGVBQWU7WUFDZixJQUFJLEtBQUssQ0FBQyxLQUFLLENBQUMsT0FBTyxFQUFFLENBQUMsRUFBRTtnQkFDeEIsS0FBSyxHQUFHLElBQUksQ0FBQzthQUNoQjtpQkFBTTtnQkFDSCx5QkFBeUI7Z0JBQ3pCLEtBQUssR0FBRyxJQUFJLElBQUksQ0FBQyxLQUFLLENBQUMsWUFBWSxFQUFFLEdBQUcsZUFBZSxDQUFDLENBQUM7YUFDNUQ7U0FDSjthQUFNO1lBQ0gsS0FBSyxHQUFHLElBQUksQ0FBQztTQUNoQjtRQUNELFlBQVk7UUFDWixJQUFJLENBQUMsZ0JBQWdCLEdBQUcsS0FBSyxDQUFDO1FBQzlCLGlCQUFNLFFBQVEsWUFBQyxLQUFLLENBQUMsQ0FBQztRQUN0QixJQUFJLENBQUMsSUFBSSxDQUFDLGdCQUFnQixFQUFFO1lBQ3hCLElBQUksQ0FBQyx1QkFBdUIsR0FBRyxLQUFLLENBQUM7WUFDckMsSUFBSSxDQUFDLGdCQUFnQixHQUFHLElBQUksQ0FBQztTQUNoQztJQUNMLENBQUM7SUFFTSxzQ0FBa0IsR0FBekIsVUFBMEIsS0FBVztRQUNqQyxJQUFJLEtBQUssSUFBSSxJQUFJLElBQUksS0FBSyxDQUFDLEtBQUssQ0FBQyxPQUFPLEVBQUUsQ0FBQyxFQUFFO1lBQ3pDLEtBQUssR0FBRyxJQUFJLENBQUM7U0FDaEI7UUFDRCxJQUFJLEtBQUssSUFBSSxJQUFJLEVBQUU7WUFDZixJQUFJLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxDQUFDO1lBQ3JCLElBQUksQ0FBQyxnQkFBZ0IsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDO1NBQ3RDO0lBQ0wsQ0FBQztJQUNMLGdCQUFDO0FBQUQsQ0FBQyxBQWpFRCxDQUErQixVQUFVLEdBaUV4QyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7Q29tcG9uZW50LCBJbnB1dCwgT3V0cHV0fSBmcm9tIFwiQGFuZ3VsYXIvY29yZVwiO1xyXG5pbXBvcnQge1ZhbHVlRmllbGR9IGZyb20gXCIuLi92YWx1ZS1maWVsZFwiO1xyXG5pbXBvcnQge0lGb3JtfSBmcm9tIFwiLi4vLi4vLi4vcGF0aGludGVyZmFjZVwiO1xyXG5pbXBvcnQge1RyYW5zbGF0aW9uU2VydmljZX0gZnJvbSBcIi4uLy4uLy4uL3NlcnZpY2UvdHJhbnNsYXRpb24uc2VydmljZVwiO1xyXG5pbXBvcnQgKiBhcyBtb21lbnRJbXBvcnRlZCBmcm9tIFwibW9tZW50XCI7XHJcblxyXG5jb25zdCBtb21lbnQgPSBtb21lbnRJbXBvcnRlZDtcclxuXHJcbkBDb21wb25lbnQoe1xyXG4gICAgc2VsZWN0b3I6IFwicGF0aC1kYXRlZmllbGRcIixcclxuICAgIHRlbXBsYXRlVXJsOiBcImRhdGUtZmllbGQuY29tcG9uZW50Lmh0bWxcIlxyXG59KVxyXG5leHBvcnQgY2xhc3MgRGF0ZUZpZWxkQ29tcG9uZW50IHtcclxuICAgIEBJbnB1dChcImZpZWxkXCIpXHJcbiAgICBAT3V0cHV0KFwiZmllbGRcIilcclxuICAgIGZpZWxkOiBEYXRlRmllbGQ7XHJcbn1cclxuXHJcbmV4cG9ydCBjbGFzcyBEYXRlRmllbGQgZXh0ZW5kcyBWYWx1ZUZpZWxkPERhdGU+IHtcclxuXHJcbiAgICBwcml2YXRlIF9kYXRlUGlja2VyVmFsdWU6IERhdGU7XHJcbiAgICBwcml2YXRlIF9pbml0aWFsVmFsdWVTZXQgPSBmYWxzZTtcclxuICAgIHByaXZhdGUgX2RhdGVQaWNrZXJJbml0aWFsVmFsdWU6IERhdGU7XHJcbiAgICBwcml2YXRlIF9kYXRlSW5wdXRGb3JtYXQ6IHN0cmluZztcclxuXHJcbiAgICBjb25zdHJ1Y3Rvcihwcm90ZWN0ZWQgZm9ybTogSUZvcm0sIHByb3RlY3RlZCB0cmFuc2xhdGlvblNlcnZpY2U6IFRyYW5zbGF0aW9uU2VydmljZSkge1xyXG4gICAgICAgIHN1cGVyKGZvcm0sIHRyYW5zbGF0aW9uU2VydmljZSk7XHJcbiAgICAgICAgdGhpcy5fZGF0ZUlucHV0Rm9ybWF0ID0gdHJhbnNsYXRpb25TZXJ2aWNlLmdldFVzZXJEYXRlRm9ybWF0KCk7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0IGRhdGVQaWNrZXJWYWx1ZSgpOiBEYXRlIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fZGF0ZVBpY2tlclZhbHVlO1xyXG4gICAgfVxyXG5cclxuICAgIHNldCBkYXRlUGlja2VyVmFsdWUodmFsdWU6IERhdGUpIHtcclxuICAgICAgICB0aGlzLl9kYXRlUGlja2VyVmFsdWUgPSB2YWx1ZTtcclxuICAgIH1cclxuXHJcbiAgICBnZXQgaW5pdGlhbFZhbHVlU2V0KCk6IGJvb2xlYW4ge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9pbml0aWFsVmFsdWVTZXQ7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0IGRhdGVQaWNrZXJJbml0aWFsVmFsdWUoKTogRGF0ZSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2RhdGVQaWNrZXJJbml0aWFsVmFsdWU7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0IGRhdGVJbnB1dEZvcm1hdCgpOiBzdHJpbmcge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9kYXRlSW5wdXRGb3JtYXQ7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIHNldFZhbHVlKHZhbHVlOiBEYXRlKSB7XHJcbiAgICAgICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gXCJzdHJpbmdcIikge1xyXG4gICAgICAgICAgICB2YWx1ZSA9IG1vbWVudCh2YWx1ZSkudG9EYXRlKCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICh2YWx1ZSAhPSBudWxsICYmIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbCh2YWx1ZSkgPT09IFwiW29iamVjdCBEYXRlXVwiKSB7XHJcbiAgICAgICAgICAgIC8vIGl0IGlzIGEgZGF0ZVxyXG4gICAgICAgICAgICBpZiAoaXNOYU4odmFsdWUuZ2V0VGltZSgpKSkge1xyXG4gICAgICAgICAgICAgICAgdmFsdWUgPSBudWxsO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgLy8gY3V0IG9mZiBsb2NhbCB0aW1lem9uZVxyXG4gICAgICAgICAgICAgICAgdmFsdWUgPSBuZXcgRGF0ZSh2YWx1ZS50b0RhdGVTdHJpbmcoKSArIFwiIDAwOjAwOjAwIEdNVFwiKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHZhbHVlID0gbnVsbDtcclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gdXBkYXRlIHVpXHJcbiAgICAgICAgdGhpcy5fZGF0ZVBpY2tlclZhbHVlID0gdmFsdWU7XHJcbiAgICAgICAgc3VwZXIuc2V0VmFsdWUodmFsdWUpO1xyXG4gICAgICAgIGlmICghdGhpcy5faW5pdGlhbFZhbHVlU2V0KSB7XHJcbiAgICAgICAgICAgIHRoaXMuX2RhdGVQaWNrZXJJbml0aWFsVmFsdWUgPSB2YWx1ZTtcclxuICAgICAgICAgICAgdGhpcy5faW5pdGlhbFZhbHVlU2V0ID0gdHJ1ZTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIHVwZGF0ZVZhbHVlRnJvbUd1aSh2YWx1ZTogRGF0ZSkge1xyXG4gICAgICAgIGlmICh2YWx1ZSAhPSBudWxsICYmIGlzTmFOKHZhbHVlLmdldERhdGUoKSkpIHtcclxuICAgICAgICAgICAgdmFsdWUgPSBudWxsO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAodmFsdWUgIT0gbnVsbCkge1xyXG4gICAgICAgICAgICB0aGlzLnNldFZhbHVlKHZhbHVlKTtcclxuICAgICAgICAgICAgdGhpcy5fZGF0ZVBpY2tlclZhbHVlID0gdGhpcy52YWx1ZTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuIl19