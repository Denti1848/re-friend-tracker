import * as tslib_1 from "tslib";
import { Component, Input, Output, ElementRef } from "@angular/core";
import { ValueField } from "../value-field";
import { AutoCompleteFieldEntry } from "./auto-complete-field-entry";
import { Key } from "../../../page/element/page-element";
import { FormFunction } from "../../form-function";
import { KeyUtility } from "../../../utility/key-utility";
var AutoCompleteComponent = /** @class */ (function () {
    function AutoCompleteComponent(myElement) {
        this._elementRef = myElement;
    }
    AutoCompleteComponent.prototype.handleClick = function (event) {
        if (this.field.isReadonly()) {
            return;
        }
        var clickedComponent = event.target;
        var inside = false;
        do {
            if (clickedComponent === this._elementRef.nativeElement) {
                inside = true;
            }
            clickedComponent = clickedComponent.parentNode;
        } while (clickedComponent);
        if (!inside) {
            this.field.clearFilteredList();
        }
        if (!this.field.valueSet) {
            this.field.query = null;
            this.field.setValue(null);
        }
    };
    AutoCompleteComponent.ctorParameters = function () { return [
        { type: ElementRef }
    ]; };
    tslib_1.__decorate([
        Input("field"),
        Output("field")
    ], AutoCompleteComponent.prototype, "field", void 0);
    AutoCompleteComponent = tslib_1.__decorate([
        Component({
            selector: "path-autocomplete",
            // tslint:disable-next-line
            host: {
                "(document:click)": "handleClick($event)",
            },
            template: "<path-form-field-label [label]=\"field.name\" [required]=\"field.required\"></path-form-field-label>\r\n<div [class.col-md-4]=\"field.width == 1\" [class.col-md-10]=\"field.width == 2\">\r\n    <div class=\"input-group\">\r\n        <input #model=\"ngModel\" [readonly]=\"field.isReadonly()\"\r\n               [class.required-field]=\"(!model.valid &&!model.pristine && field.required)\" [required]=\"field.required\"\r\n               #inputElement type=\"text\" [ngModel]=field.query?.text (keyup)=field.filter(inputElement.value,$event)\r\n               (blur)=\"field.focusLost()\" class=\"form-control\" placeholder=\"\">\r\n        <!-- Auto Complete -->\r\n        <div *ngIf=\"field.filteredList.length > 0 && !field.isReadonly()\">\r\n            <div class=\"path-autocomplete list-group\">\r\n                <a *ngFor=\"let item of field.filteredList\" class=\"list-group-item\" href=\"#\"\r\n                   (click)=\"field.select(item)\"><h5>{{item.text}}</h5></a>\r\n            </div>\r\n        </div>\r\n        <!-- Action -->\r\n        <span *ngIf=\"field.detailForm != null\" class=\"input-group-btn\">\r\n                <button (click)=\"field.showDetailForm()\" class=\"btn btn-default\" type=\"button\">{{field.getDetailButtonName()}}</button>\r\n            </span>\r\n    </div>\r\n</div>\r\n"
        })
    ], AutoCompleteComponent);
    return AutoCompleteComponent;
}());
export { AutoCompleteComponent };
var AutoCompleteField = /** @class */ (function (_super) {
    tslib_1.__extends(AutoCompleteField, _super);
    function AutoCompleteField(form, translationService, pathService) {
        var _this = _super.call(this, form, translationService) || this;
        _this.form = form;
        _this.translationService = translationService;
        _this.pathService = pathService;
        _this._filteredList = [];
        _this._data = [];
        _this._dataLoaded = false;
        _this._valueSet = false;
        return _this;
    }
    AutoCompleteField.prototype.isReadonly = function () {
        return _super.prototype.isReadonly.call(this) && this.isInitialValueSet;
    };
    AutoCompleteField.prototype.filter = function (query, event) {
        // do not filter readonly fields
        if (this.isReadonly()) {
            return;
        }
        // do not filter on simple tab focus change
        if (event.keyCode === 9) {
            return;
        }
        this._valueSet = false;
        if (query !== null && query.length > 0 && query.replace(/\s/g, "").length === 0) {
            /* space: all */
            this._filteredList = this._data.filter(function (entry) {
                return entry.active;
            }.bind(this));
        }
        else if (query !== null && query !== "") {
            /* search term: filter */
            query = query.trim();
            this._filteredList = this._data.filter(function (entry) {
                var e_1, _a;
                if (!entry.active) {
                    return false;
                }
                var entryName = entry.text;
                if (entryName.toLowerCase().indexOf(query.toLowerCase()) > -1) {
                    return true;
                }
                else if (this._wordSearchEnabled) {
                    var tokens = entryName.toLowerCase().split(" ");
                    try {
                        for (var tokens_1 = tslib_1.__values(tokens), tokens_1_1 = tokens_1.next(); !tokens_1_1.done; tokens_1_1 = tokens_1.next()) {
                            var token = tokens_1_1.value;
                            if (token.startsWith(query.toLowerCase())) {
                                return true;
                            }
                        }
                    }
                    catch (e_1_1) { e_1 = { error: e_1_1 }; }
                    finally {
                        try {
                            if (tokens_1_1 && !tokens_1_1.done && (_a = tokens_1.return)) _a.call(tokens_1);
                        }
                        finally { if (e_1) throw e_1.error; }
                    }
                }
                return false;
            }.bind(this));
        }
        else {
            /* empty: nothing */
            this.clearFilteredList();
        }
        this._filteredList.sort();
    };
    AutoCompleteField.prototype.select = function (item) {
        this.setValue(item.key);
    };
    AutoCompleteField.prototype.focusLost = function () {
        var _this = this;
        window.setTimeout(function () {
            if (!_this.valueSet) {
                // force angular to update query.text value
                if (_this.value == null) {
                    _this.resetDisplay(null);
                }
                else {
                    _this.resetDisplay(_this.value["key"]);
                }
            }
        }, 1);
    };
    AutoCompleteField.prototype.setValue = function (value) {
        var e_2, _a;
        var oldValue = this.value;
        // accept key values and complex objects
        if (value != null && value["key"] != null) {
            value = value["key"];
            this._keyType = value["name"];
        }
        this._valueSet = value != null;
        this.clearFilteredList();
        _super.prototype.setValue.call(this, value);
        this.query = null;
        this.resetDisplay(value);
        // reload dependent autocomplete fields
        if (oldValue !== this.value) {
            try {
                for (var _b = tslib_1.__values(this.getForm().getFields()), _c = _b.next(); !_c.done; _c = _b.next()) {
                    var field = _c.value;
                    if (field instanceof AutoCompleteField) {
                        if (field.id !== this.id) {
                            var autoCompleteField = field;
                            if (KeyUtility.variableExists(autoCompleteField.url, this.id)) {
                                autoCompleteField.load();
                            }
                        }
                    }
                }
            }
            catch (e_2_1) { e_2 = { error: e_2_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                }
                finally { if (e_2) throw e_2.error; }
            }
        }
    };
    AutoCompleteField.prototype.load = function () {
        var e_3, _a;
        var _this = this;
        this.dataLoaded = false;
        var url = this.url;
        try {
            for (var _b = tslib_1.__values(this.getForm().getFields()), _c = _b.next(); !_c.done; _c = _b.next()) {
                var field = _c.value;
                if (field instanceof ValueField) {
                    var valueField = field;
                    url = KeyUtility.replaceVariable(url, valueField.id, valueField.value);
                    console.log(url);
                }
            }
        }
        catch (e_3_1) { e_3 = { error: e_3_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_3) throw e_3.error; }
        }
        this.pathService.serverGet(this.getForm().getApp().getBackendUrl(), url, function (data) {
            var e_4, _a;
            var dynamicData = [];
            try {
                for (var data_1 = tslib_1.__values(data), data_1_1 = data_1.next(); !data_1_1.done; data_1_1 = data_1.next()) {
                    var item = data_1_1.value;
                    var entry = new AutoCompleteFieldEntry();
                    entry.key = item["key"]["key"];
                    entry.text = item["name"];
                    if (item["active"] != null) {
                        entry.active = item["active"];
                    }
                    else {
                        entry.active = true;
                    }
                    dynamicData.push(entry);
                }
            }
            catch (e_4_1) { e_4 = { error: e_4_1 }; }
            finally {
                try {
                    if (data_1_1 && !data_1_1.done && (_a = data_1.return)) _a.call(data_1);
                }
                finally { if (e_4) throw e_4.error; }
            }
            _this.data = dynamicData;
            _this.dataLoaded = true;
            _this.setValue(_this.value); // force display refresh
        }, null);
    };
    AutoCompleteField.prototype.getDetailButtonName = function () {
        if (this.value == null) {
            return this.translationService.getText("New") + "...";
        }
        else {
            return this.translationService.getText("Detail") + "...";
        }
    };
    AutoCompleteField.prototype.showDetailForm = function () {
        var _this = this;
        var form = null;
        var formFunction = new FormFunction();
        formFunction.save = function (data) {
            _this.getForm().getApp().closeCurrentForm();
            if (data["key"] != null) {
                _this.setValue(data["key"]);
            }
            _this.load();
        };
        formFunction.cancel = function () {
            _this.getForm().getApp().closeCurrentForm();
        };
        formFunction.delete = function (data) {
            _this.getForm().getApp().closeCurrentForm();
            _this.setValue(null);
            _this.load();
        };
        if (this.value == null) {
            form = this.getForm().getApp().createForm(this.detailForm, null, null, formFunction, null);
        }
        else {
            form = this.getForm().getApp().createForm(this.detailForm, new Key(this.value, this._keyType), null, formFunction, null);
        }
        this.form.getApp()["_formStack"].push(form); // TODO
    };
    AutoCompleteField.prototype.clearFilteredList = function () {
        this._filteredList = [];
    };
    AutoCompleteField.prototype.resetDisplay = function (value) {
        var _this = this;
        // must wait with display update until data is loaded
        var displaySetter = function () {
            var e_5, _a;
            var keyValue = value;
            if (!_this.dataLoaded) {
                console.log("waiting...");
                window.setTimeout(function () {
                    displaySetter();
                }, 250);
            }
            else {
                if (keyValue == null) {
                    window.setTimeout(function () {
                        // check value again, may have changed since reset was triggered
                        if (_this.value == null) {
                            _this.query = new AutoCompleteFieldEntry();
                        }
                    }, 1);
                }
                else {
                    var _loop_1 = function (item) {
                        // tslint:disable:triple-equals
                        if (item.key == keyValue) {
                            window.setTimeout(function () {
                                _this.query = item;
                            }, 1);
                            return "break";
                        }
                    };
                    try {
                        for (var _b = tslib_1.__values(_this._data), _c = _b.next(); !_c.done; _c = _b.next()) {
                            var item = _c.value;
                            var state_1 = _loop_1(item);
                            if (state_1 === "break")
                                break;
                        }
                    }
                    catch (e_5_1) { e_5 = { error: e_5_1 }; }
                    finally {
                        try {
                            if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                        }
                        finally { if (e_5) throw e_5.error; }
                    }
                }
            }
        };
        displaySetter();
    };
    Object.defineProperty(AutoCompleteField.prototype, "query", {
        get: function () {
            return this._query;
        },
        set: function (value) {
            this._query = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AutoCompleteField.prototype, "data", {
        set: function (value) {
            this._data = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AutoCompleteField.prototype, "filteredList", {
        get: function () {
            return this._filteredList;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AutoCompleteField.prototype, "wordSearchEnabled", {
        set: function (value) {
            this._wordSearchEnabled = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AutoCompleteField.prototype, "valueSet", {
        get: function () {
            return this._valueSet;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AutoCompleteField.prototype, "dataLoaded", {
        get: function () {
            return this._dataLoaded;
        },
        set: function (value) {
            this._dataLoaded = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AutoCompleteField.prototype, "detailForm", {
        get: function () {
            return this._detailForm;
        },
        set: function (value) {
            this._detailForm = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AutoCompleteField.prototype, "url", {
        get: function () {
            return this._url;
        },
        set: function (value) {
            this._url = value;
        },
        enumerable: true,
        configurable: true
    });
    return AutoCompleteField;
}(ValueField));
export { AutoCompleteField };
//# sourceMappingURL=data:application/json;base64,