import * as tslib_1 from "tslib";
import { Component, Input, Output } from "@angular/core";
import { Radio } from "./radio";
import { ValueField } from "../value-field";
var RadioGroupComponent = /** @class */ (function () {
    function RadioGroupComponent() {
    }
    tslib_1.__decorate([
        Input("field"),
        Output("field")
    ], RadioGroupComponent.prototype, "field", void 0);
    RadioGroupComponent = tslib_1.__decorate([
        Component({
            selector: "path-radio-group",
            template: "<path-form-field-label [label]=\"field.name\" [required]=\"field.required\"></path-form-field-label>\r\n<div [class.col-md-4]=\"field.width == 1\" [class.col-md-10]=\"field.width == 2\">\r\n\t<div [ngClass]=\"{'radio': field.horizontal}\">\r\n        <span *ngFor='let radioElement of field.radios' [ngClass]=\"{'radio': !field.horizontal}\">\r\n            <label>\r\n                <input #radio name=\"{{field.id}}\" [(ngModel)]=\"field.value\" (click)=\"field.updateValueFromGui(radioElement.key)\" [value]=\"radioElement.key.toString()\" [disabled]=\"field.isReadonly()\" type=\"radio\">\r\n                <span> {{radioElement.name}}&nbsp;&nbsp;</span>\r\n            </label>\r\n        </span>\r\n\t</div>\r\n</div>\r\n"
        })
    ], RadioGroupComponent);
    return RadioGroupComponent;
}());
export { RadioGroupComponent };
var RadioGroupField = /** @class */ (function (_super) {
    tslib_1.__extends(RadioGroupField, _super);
    function RadioGroupField() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this._radios = [];
        return _this;
    }
    Object.defineProperty(RadioGroupField.prototype, "radios", {
        get: function () {
            return this._radios;
        },
        set: function (value) {
            this._radios = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(RadioGroupField.prototype, "horizontal", {
        get: function () {
            return this._horizontal;
        },
        set: function (value) {
            this._horizontal = value;
        },
        enumerable: true,
        configurable: true
    });
    RadioGroupField.prototype.setValue = function (value) {
        if (value != null) {
            value = value.toString();
        }
        _super.prototype.setValue.call(this, value);
    };
    RadioGroupField.prototype.updateValueFromGui = function (value) {
        this.setValue(value.toString());
    };
    RadioGroupField.prototype.isReadonly = function () {
        return _super.prototype.isReadonly.call(this) && this.isInitialValueSet;
    };
    RadioGroupField.prototype.fromJson = function (modelFormField) {
        var e_1, _a;
        _super.prototype.fromJson.call(this, modelFormField);
        this._horizontal = true;
        if (modelFormField["alignment"] != null) {
            if (modelFormField["alignment"] === "vertical") {
                this._horizontal = false;
            }
        }
        if (modelFormField["radios"] != null) {
            try {
                for (var _b = tslib_1.__values(modelFormField["radios"]), _c = _b.next(); !_c.done; _c = _b.next()) {
                    var radioModel = _c.value;
                    var radio = new Radio(this.getForm(), this.translationService);
                    radio.name = radioModel.name;
                    radio.key = radioModel.key;
                    if (radio.key === modelFormField["defaultKey"]) {
                        this.setValue(radio.key);
                    }
                    this.radios.push(radio);
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                }
                finally { if (e_1) throw e_1.error; }
            }
        }
    };
    return RadioGroupField;
}(ValueField));
export { RadioGroupField };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmFkaW8tZ3JvdXAuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vcGF0aC1mcmFtZXdvcmsvIiwic291cmNlcyI6WyJwYXRoLWZyYW1ld29yay9mb3JtL2ZpZWxkL3JhZGlvL3JhZGlvLWdyb3VwLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFDLFNBQVMsRUFBRSxLQUFLLEVBQUUsTUFBTSxFQUFDLE1BQU0sZUFBZSxDQUFDO0FBQ3ZELE9BQU8sRUFBQyxLQUFLLEVBQUMsTUFBTSxTQUFTLENBQUM7QUFDOUIsT0FBTyxFQUFDLFVBQVUsRUFBQyxNQUFNLGdCQUFnQixDQUFDO0FBTTFDO0lBQUE7SUFJQSxDQUFDO0lBREc7UUFGQyxLQUFLLENBQUMsT0FBTyxDQUFDO1FBQ2QsTUFBTSxDQUFDLE9BQU8sQ0FBQztzREFDTztJQUhkLG1CQUFtQjtRQUovQixTQUFTLENBQUM7WUFDUCxRQUFRLEVBQUUsa0JBQWtCO1lBQzVCLHF1QkFBeUM7U0FDNUMsQ0FBQztPQUNXLG1CQUFtQixDQUkvQjtJQUFELDBCQUFDO0NBQUEsQUFKRCxJQUlDO1NBSlksbUJBQW1CO0FBTWhDO0lBQXFDLDJDQUFrQjtJQUF2RDtRQUFBLHFFQXVEQztRQXREVyxhQUFPLEdBQVksRUFBRSxDQUFDOztJQXNEbEMsQ0FBQztJQW5ERyxzQkFBSSxtQ0FBTTthQUFWO1lBQ0ksT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDO1FBQ3hCLENBQUM7YUFFRCxVQUFXLEtBQWM7WUFDckIsSUFBSSxDQUFDLE9BQU8sR0FBRyxLQUFLLENBQUM7UUFDekIsQ0FBQzs7O09BSkE7SUFNRCxzQkFBSSx1Q0FBVTthQUFkO1lBQ0ksT0FBTyxJQUFJLENBQUMsV0FBVyxDQUFDO1FBQzVCLENBQUM7YUFFRCxVQUFlLEtBQWM7WUFDekIsSUFBSSxDQUFDLFdBQVcsR0FBRyxLQUFLLENBQUM7UUFDN0IsQ0FBQzs7O09BSkE7SUFNTSxrQ0FBUSxHQUFmLFVBQWdCLEtBQWE7UUFDekIsSUFBSSxLQUFLLElBQUksSUFBSSxFQUFFO1lBQ2YsS0FBSyxHQUFHLEtBQUssQ0FBQyxRQUFRLEVBQUUsQ0FBQztTQUM1QjtRQUNELGlCQUFNLFFBQVEsWUFBQyxLQUFLLENBQUMsQ0FBQztJQUMxQixDQUFDO0lBRU0sNENBQWtCLEdBQXpCLFVBQTBCLEtBQWE7UUFDbkMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztJQUNwQyxDQUFDO0lBRU0sb0NBQVUsR0FBakI7UUFDSSxPQUFPLGlCQUFNLFVBQVUsV0FBRSxJQUFJLElBQUksQ0FBQyxpQkFBaUIsQ0FBQztJQUN4RCxDQUFDO0lBRU0sa0NBQVEsR0FBZixVQUFnQixjQUFjOztRQUMxQixpQkFBTSxRQUFRLFlBQUMsY0FBYyxDQUFDLENBQUM7UUFDL0IsSUFBSSxDQUFDLFdBQVcsR0FBRyxJQUFJLENBQUM7UUFDeEIsSUFBSSxjQUFjLENBQUMsV0FBVyxDQUFDLElBQUksSUFBSSxFQUFFO1lBQ3JDLElBQUksY0FBYyxDQUFDLFdBQVcsQ0FBQyxLQUFLLFVBQVUsRUFBRTtnQkFDNUMsSUFBSSxDQUFDLFdBQVcsR0FBRyxLQUFLLENBQUM7YUFDNUI7U0FDSjtRQUNELElBQUksY0FBYyxDQUFDLFFBQVEsQ0FBQyxJQUFJLElBQUksRUFBRTs7Z0JBQ2xDLEtBQXlCLElBQUEsS0FBQSxpQkFBQSxjQUFjLENBQUMsUUFBUSxDQUFDLENBQUEsZ0JBQUEsNEJBQUU7b0JBQTlDLElBQU0sVUFBVSxXQUFBO29CQUNqQixJQUFNLEtBQUssR0FBRyxJQUFJLEtBQUssQ0FBQyxJQUFJLENBQUMsT0FBTyxFQUFFLEVBQUUsSUFBSSxDQUFDLGtCQUFrQixDQUFDLENBQUM7b0JBQ2pFLEtBQUssQ0FBQyxJQUFJLEdBQUcsVUFBVSxDQUFDLElBQUksQ0FBQztvQkFDN0IsS0FBSyxDQUFDLEdBQUcsR0FBRyxVQUFVLENBQUMsR0FBRyxDQUFDO29CQUMzQixJQUFJLEtBQUssQ0FBQyxHQUFHLEtBQUssY0FBYyxDQUFDLFlBQVksQ0FBQyxFQUFFO3dCQUM1QyxJQUFJLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQztxQkFDNUI7b0JBQ0QsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7aUJBQzNCOzs7Ozs7Ozs7U0FDSjtJQUNMLENBQUM7SUFDTCxzQkFBQztBQUFELENBQUMsQUF2REQsQ0FBcUMsVUFBVSxHQXVEOUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0NvbXBvbmVudCwgSW5wdXQsIE91dHB1dH0gZnJvbSBcIkBhbmd1bGFyL2NvcmVcIjtcclxuaW1wb3J0IHtSYWRpb30gZnJvbSBcIi4vcmFkaW9cIjtcclxuaW1wb3J0IHtWYWx1ZUZpZWxkfSBmcm9tIFwiLi4vdmFsdWUtZmllbGRcIjtcclxuXHJcbkBDb21wb25lbnQoe1xyXG4gICAgc2VsZWN0b3I6IFwicGF0aC1yYWRpby1ncm91cFwiLFxyXG4gICAgdGVtcGxhdGVVcmw6IFwicmFkaW8tZ3JvdXAuY29tcG9uZW50Lmh0bWxcIlxyXG59KVxyXG5leHBvcnQgY2xhc3MgUmFkaW9Hcm91cENvbXBvbmVudCB7XHJcbiAgICBASW5wdXQoXCJmaWVsZFwiKVxyXG4gICAgQE91dHB1dChcImZpZWxkXCIpXHJcbiAgICBmaWVsZDogUmFkaW9Hcm91cEZpZWxkO1xyXG59XHJcblxyXG5leHBvcnQgY2xhc3MgUmFkaW9Hcm91cEZpZWxkIGV4dGVuZHMgVmFsdWVGaWVsZDxzdHJpbmc+IHtcclxuICAgIHByaXZhdGUgX3JhZGlvczogUmFkaW9bXSA9IFtdO1xyXG4gICAgcHJpdmF0ZSBfaG9yaXpvbnRhbDogYm9vbGVhbjtcclxuXHJcbiAgICBnZXQgcmFkaW9zKCk6IFJhZGlvW10ge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9yYWRpb3M7XHJcbiAgICB9XHJcblxyXG4gICAgc2V0IHJhZGlvcyh2YWx1ZTogUmFkaW9bXSkge1xyXG4gICAgICAgIHRoaXMuX3JhZGlvcyA9IHZhbHVlO1xyXG4gICAgfVxyXG5cclxuICAgIGdldCBob3Jpem9udGFsKCk6IGJvb2xlYW4ge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9ob3Jpem9udGFsO1xyXG4gICAgfVxyXG5cclxuICAgIHNldCBob3Jpem9udGFsKHZhbHVlOiBib29sZWFuKSB7XHJcbiAgICAgICAgdGhpcy5faG9yaXpvbnRhbCA9IHZhbHVlO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBzZXRWYWx1ZSh2YWx1ZTogc3RyaW5nKSB7XHJcbiAgICAgICAgaWYgKHZhbHVlICE9IG51bGwpIHtcclxuICAgICAgICAgICAgdmFsdWUgPSB2YWx1ZS50b1N0cmluZygpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBzdXBlci5zZXRWYWx1ZSh2YWx1ZSk7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIHVwZGF0ZVZhbHVlRnJvbUd1aSh2YWx1ZTogc3RyaW5nKSB7XHJcbiAgICAgICAgdGhpcy5zZXRWYWx1ZSh2YWx1ZS50b1N0cmluZygpKTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgaXNSZWFkb25seSgpIHtcclxuICAgICAgICByZXR1cm4gc3VwZXIuaXNSZWFkb25seSgpICYmIHRoaXMuaXNJbml0aWFsVmFsdWVTZXQ7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGZyb21Kc29uKG1vZGVsRm9ybUZpZWxkKSB7XHJcbiAgICAgICAgc3VwZXIuZnJvbUpzb24obW9kZWxGb3JtRmllbGQpO1xyXG4gICAgICAgIHRoaXMuX2hvcml6b250YWwgPSB0cnVlO1xyXG4gICAgICAgIGlmIChtb2RlbEZvcm1GaWVsZFtcImFsaWdubWVudFwiXSAhPSBudWxsKSB7XHJcbiAgICAgICAgICAgIGlmIChtb2RlbEZvcm1GaWVsZFtcImFsaWdubWVudFwiXSA9PT0gXCJ2ZXJ0aWNhbFwiKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9ob3Jpem9udGFsID0gZmFsc2U7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKG1vZGVsRm9ybUZpZWxkW1wicmFkaW9zXCJdICE9IG51bGwpIHtcclxuICAgICAgICAgICAgZm9yIChjb25zdCByYWRpb01vZGVsIG9mIG1vZGVsRm9ybUZpZWxkW1wicmFkaW9zXCJdKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCByYWRpbyA9IG5ldyBSYWRpbyh0aGlzLmdldEZvcm0oKSwgdGhpcy50cmFuc2xhdGlvblNlcnZpY2UpO1xyXG4gICAgICAgICAgICAgICAgcmFkaW8ubmFtZSA9IHJhZGlvTW9kZWwubmFtZTtcclxuICAgICAgICAgICAgICAgIHJhZGlvLmtleSA9IHJhZGlvTW9kZWwua2V5O1xyXG4gICAgICAgICAgICAgICAgaWYgKHJhZGlvLmtleSA9PT0gbW9kZWxGb3JtRmllbGRbXCJkZWZhdWx0S2V5XCJdKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zZXRWYWx1ZShyYWRpby5rZXkpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgdGhpcy5yYWRpb3MucHVzaChyYWRpbyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuIl19