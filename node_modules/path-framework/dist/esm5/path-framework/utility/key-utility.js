var KeyUtility = /** @class */ (function () {
    function KeyUtility() {
    }
    KeyUtility.translateUrl = function (url, formKey, crudFormUrl, parentPageElement) {
        var translatedUrl = url;
        if (translatedUrl != null) {
            if (formKey != null && !(translatedUrl.indexOf(formKey.getName()) > 0) && crudFormUrl) {
                translatedUrl = translatedUrl + "/" + formKey.getKey();
            }
            if (formKey != null) {
                translatedUrl = translatedUrl.replace(":" + formKey.getName(), formKey.getKey());
            }
            var pageElement = parentPageElement;
            while (pageElement != null) {
                if (pageElement.getKey() != null) {
                    translatedUrl = translatedUrl.replace(":" + pageElement.getKey().getName(), pageElement.getKey().getKey());
                }
                pageElement = pageElement.getParent();
            }
        }
        return translatedUrl;
    };
    KeyUtility.findKey = function (pageElement, name) {
        var searchKeyName = name;
        if (searchKeyName) {
            searchKeyName = searchKeyName.replace(":", "");
            while (pageElement != null) {
                if (pageElement.getKey() != null && pageElement.getKey().getName() === searchKeyName) {
                    return pageElement.getKey();
                }
                pageElement = pageElement.getParent();
            }
        }
        return null;
    };
    KeyUtility.replaceVariable = function (url, variable, value) {
        // replace variables at line end
        var regExp = new RegExp(":" + variable + "$", "g");
        url = url.replace(regExp, value);
        // replace variables in middle of line
        regExp = new RegExp(":" + variable + "\/", "g");
        url = url.replace(regExp, value + "/");
        return url;
    };
    KeyUtility.variableExists = function (url, variable) {
        var regExp = new RegExp(":" + variable + "$", "g");
        var regExp2 = new RegExp(":" + variable + "\/", "g");
        return url.search(regExp) !== -1 || url.search(regExp2) !== -1;
    };
    return KeyUtility;
}());
export { KeyUtility };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoia2V5LXV0aWxpdHkuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9wYXRoLWZyYW1ld29yay8iLCJzb3VyY2VzIjpbInBhdGgtZnJhbWV3b3JrL3V0aWxpdHkva2V5LXV0aWxpdHkudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBR0E7SUFBQTtJQXNEQSxDQUFDO0lBcERpQix1QkFBWSxHQUExQixVQUEyQixHQUFXLEVBQUUsT0FBYSxFQUFFLFdBQW9CLEVBQUUsaUJBQStCO1FBQ3hHLElBQUksYUFBYSxHQUFRLEdBQUcsQ0FBQztRQUU3QixJQUFJLGFBQWEsSUFBSSxJQUFJLEVBQUU7WUFDdkIsSUFBSSxPQUFPLElBQUksSUFBSSxJQUFJLENBQUMsQ0FBQyxhQUFhLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxPQUFPLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJLFdBQVcsRUFBRTtnQkFDbkYsYUFBYSxHQUFHLGFBQWEsR0FBRyxHQUFHLEdBQUcsT0FBTyxDQUFDLE1BQU0sRUFBRSxDQUFDO2FBQzFEO1lBQ0QsSUFBSSxPQUFPLElBQUksSUFBSSxFQUFFO2dCQUNqQixhQUFhLEdBQUcsYUFBYSxDQUFDLE9BQU8sQ0FBQyxHQUFHLEdBQUcsT0FBTyxDQUFDLE9BQU8sRUFBRSxFQUFFLE9BQU8sQ0FBQyxNQUFNLEVBQUUsQ0FBQyxDQUFDO2FBQ3BGO1lBQ0QsSUFBSSxXQUFXLEdBQUcsaUJBQWlCLENBQUM7WUFDcEMsT0FBTyxXQUFXLElBQUksSUFBSSxFQUFFO2dCQUN4QixJQUFJLFdBQVcsQ0FBQyxNQUFNLEVBQUUsSUFBSSxJQUFJLEVBQUU7b0JBQzlCLGFBQWEsR0FBRyxhQUFhLENBQUMsT0FBTyxDQUFDLEdBQUcsR0FBRyxXQUFXLENBQUMsTUFBTSxFQUFFLENBQUMsT0FBTyxFQUFFLEVBQUUsV0FBVyxDQUFDLE1BQU0sRUFBRSxDQUFDLE1BQU0sRUFBRSxDQUFDLENBQUM7aUJBQzlHO2dCQUNELFdBQVcsR0FBRyxXQUFXLENBQUMsU0FBUyxFQUFFLENBQUM7YUFDekM7U0FDSjtRQUVELE9BQU8sYUFBYSxDQUFDO0lBQ3pCLENBQUM7SUFFYSxrQkFBTyxHQUFyQixVQUFzQixXQUF5QixFQUFFLElBQVk7UUFDekQsSUFBSSxhQUFhLEdBQUcsSUFBSSxDQUFDO1FBQ3pCLElBQUksYUFBYSxFQUFFO1lBQ2YsYUFBYSxHQUFHLGFBQWEsQ0FBQyxPQUFPLENBQUMsR0FBRyxFQUFFLEVBQUUsQ0FBQyxDQUFDO1lBQy9DLE9BQU8sV0FBVyxJQUFJLElBQUksRUFBRTtnQkFDeEIsSUFBSSxXQUFXLENBQUMsTUFBTSxFQUFFLElBQUksSUFBSSxJQUFJLFdBQVcsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxPQUFPLEVBQUUsS0FBSyxhQUFhLEVBQUU7b0JBQ2xGLE9BQVksV0FBVyxDQUFDLE1BQU0sRUFBRSxDQUFDO2lCQUNwQztnQkFDRCxXQUFXLEdBQUcsV0FBVyxDQUFDLFNBQVMsRUFBRSxDQUFDO2FBQ3pDO1NBQ0o7UUFDRCxPQUFPLElBQUksQ0FBQztJQUNoQixDQUFDO0lBRWEsMEJBQWUsR0FBN0IsVUFBOEIsR0FBVyxFQUFFLFFBQWdCLEVBQUUsS0FBYTtRQUN0RSxnQ0FBZ0M7UUFDaEMsSUFBSSxNQUFNLEdBQUcsSUFBSSxNQUFNLENBQUMsR0FBRyxHQUFHLFFBQVEsR0FBRyxHQUFHLEVBQUUsR0FBRyxDQUFDLENBQUM7UUFDbkQsR0FBRyxHQUFHLEdBQUcsQ0FBQyxPQUFPLENBQUMsTUFBTSxFQUFFLEtBQUssQ0FBQyxDQUFDO1FBQ2pDLHNDQUFzQztRQUN0QyxNQUFNLEdBQUcsSUFBSSxNQUFNLENBQUMsR0FBRyxHQUFHLFFBQVEsR0FBRyxJQUFJLEVBQUUsR0FBRyxDQUFDLENBQUM7UUFDaEQsR0FBRyxHQUFHLEdBQUcsQ0FBQyxPQUFPLENBQUMsTUFBTSxFQUFFLEtBQUssR0FBRyxHQUFHLENBQUMsQ0FBQztRQUN2QyxPQUFPLEdBQUcsQ0FBQztJQUNmLENBQUM7SUFFYSx5QkFBYyxHQUE1QixVQUE2QixHQUFXLEVBQUUsUUFBZ0I7UUFDdEQsSUFBTSxNQUFNLEdBQUcsSUFBSSxNQUFNLENBQUMsR0FBRyxHQUFHLFFBQVEsR0FBRyxHQUFHLEVBQUUsR0FBRyxDQUFDLENBQUM7UUFDckQsSUFBTSxPQUFPLEdBQUcsSUFBSSxNQUFNLENBQUMsR0FBRyxHQUFHLFFBQVEsR0FBRyxJQUFJLEVBQUUsR0FBRyxDQUFDLENBQUM7UUFDdkQsT0FBTyxHQUFHLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQyxJQUFJLEdBQUcsQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUM7SUFDbkUsQ0FBQztJQUVMLGlCQUFDO0FBQUQsQ0FBQyxBQXRERCxJQXNEQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7SVBhZ2VFbGVtZW50LCBJS2V5fSBmcm9tIFwiLi4vcGF0aGludGVyZmFjZVwiO1xyXG5pbXBvcnQge0tleX0gZnJvbSBcIi4uL3BhZ2UvZWxlbWVudC9wYWdlLWVsZW1lbnRcIjtcclxuXHJcbmV4cG9ydCBjbGFzcyBLZXlVdGlsaXR5IHtcclxuXHJcbiAgICBwdWJsaWMgc3RhdGljIHRyYW5zbGF0ZVVybCh1cmw6IHN0cmluZywgZm9ybUtleTogSUtleSwgY3J1ZEZvcm1Vcmw6IGJvb2xlYW4sIHBhcmVudFBhZ2VFbGVtZW50OiBJUGFnZUVsZW1lbnQpOiBzdHJpbmcge1xyXG4gICAgICAgIGxldCB0cmFuc2xhdGVkVXJsOiBhbnkgPSB1cmw7XHJcblxyXG4gICAgICAgIGlmICh0cmFuc2xhdGVkVXJsICE9IG51bGwpIHtcclxuICAgICAgICAgICAgaWYgKGZvcm1LZXkgIT0gbnVsbCAmJiAhKHRyYW5zbGF0ZWRVcmwuaW5kZXhPZihmb3JtS2V5LmdldE5hbWUoKSkgPiAwKSAmJiBjcnVkRm9ybVVybCkge1xyXG4gICAgICAgICAgICAgICAgdHJhbnNsYXRlZFVybCA9IHRyYW5zbGF0ZWRVcmwgKyBcIi9cIiArIGZvcm1LZXkuZ2V0S2V5KCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKGZvcm1LZXkgIT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgdHJhbnNsYXRlZFVybCA9IHRyYW5zbGF0ZWRVcmwucmVwbGFjZShcIjpcIiArIGZvcm1LZXkuZ2V0TmFtZSgpLCBmb3JtS2V5LmdldEtleSgpKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBsZXQgcGFnZUVsZW1lbnQgPSBwYXJlbnRQYWdlRWxlbWVudDtcclxuICAgICAgICAgICAgd2hpbGUgKHBhZ2VFbGVtZW50ICE9IG51bGwpIHtcclxuICAgICAgICAgICAgICAgIGlmIChwYWdlRWxlbWVudC5nZXRLZXkoKSAhPSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdHJhbnNsYXRlZFVybCA9IHRyYW5zbGF0ZWRVcmwucmVwbGFjZShcIjpcIiArIHBhZ2VFbGVtZW50LmdldEtleSgpLmdldE5hbWUoKSwgcGFnZUVsZW1lbnQuZ2V0S2V5KCkuZ2V0S2V5KCkpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgcGFnZUVsZW1lbnQgPSBwYWdlRWxlbWVudC5nZXRQYXJlbnQoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIHRyYW5zbGF0ZWRVcmw7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIHN0YXRpYyBmaW5kS2V5KHBhZ2VFbGVtZW50OiBJUGFnZUVsZW1lbnQsIG5hbWU6IHN0cmluZyk6IEtleSB7XHJcbiAgICAgICAgbGV0IHNlYXJjaEtleU5hbWUgPSBuYW1lO1xyXG4gICAgICAgIGlmIChzZWFyY2hLZXlOYW1lKSB7XHJcbiAgICAgICAgICAgIHNlYXJjaEtleU5hbWUgPSBzZWFyY2hLZXlOYW1lLnJlcGxhY2UoXCI6XCIsIFwiXCIpO1xyXG4gICAgICAgICAgICB3aGlsZSAocGFnZUVsZW1lbnQgIT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgaWYgKHBhZ2VFbGVtZW50LmdldEtleSgpICE9IG51bGwgJiYgcGFnZUVsZW1lbnQuZ2V0S2V5KCkuZ2V0TmFtZSgpID09PSBzZWFyY2hLZXlOYW1lKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIDxLZXk+cGFnZUVsZW1lbnQuZ2V0S2V5KCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBwYWdlRWxlbWVudCA9IHBhZ2VFbGVtZW50LmdldFBhcmVudCgpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBzdGF0aWMgcmVwbGFjZVZhcmlhYmxlKHVybDogc3RyaW5nLCB2YXJpYWJsZTogc3RyaW5nLCB2YWx1ZTogc3RyaW5nKTogc3RyaW5nIHtcclxuICAgICAgICAvLyByZXBsYWNlIHZhcmlhYmxlcyBhdCBsaW5lIGVuZFxyXG4gICAgICAgIGxldCByZWdFeHAgPSBuZXcgUmVnRXhwKFwiOlwiICsgdmFyaWFibGUgKyBcIiRcIiwgXCJnXCIpO1xyXG4gICAgICAgIHVybCA9IHVybC5yZXBsYWNlKHJlZ0V4cCwgdmFsdWUpO1xyXG4gICAgICAgIC8vIHJlcGxhY2UgdmFyaWFibGVzIGluIG1pZGRsZSBvZiBsaW5lXHJcbiAgICAgICAgcmVnRXhwID0gbmV3IFJlZ0V4cChcIjpcIiArIHZhcmlhYmxlICsgXCJcXC9cIiwgXCJnXCIpO1xyXG4gICAgICAgIHVybCA9IHVybC5yZXBsYWNlKHJlZ0V4cCwgdmFsdWUgKyBcIi9cIik7XHJcbiAgICAgICAgcmV0dXJuIHVybDtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgc3RhdGljIHZhcmlhYmxlRXhpc3RzKHVybDogc3RyaW5nLCB2YXJpYWJsZTogc3RyaW5nKTogYm9vbGVhbiB7XHJcbiAgICAgICAgY29uc3QgcmVnRXhwID0gbmV3IFJlZ0V4cChcIjpcIiArIHZhcmlhYmxlICsgXCIkXCIsIFwiZ1wiKTtcclxuICAgICAgICBjb25zdCByZWdFeHAyID0gbmV3IFJlZ0V4cChcIjpcIiArIHZhcmlhYmxlICsgXCJcXC9cIiwgXCJnXCIpO1xyXG4gICAgICAgIHJldHVybiB1cmwuc2VhcmNoKHJlZ0V4cCkgIT09IC0xIHx8IHVybC5zZWFyY2gocmVnRXhwMikgIT09IC0xO1xyXG4gICAgfVxyXG5cclxufVxyXG4iXX0=