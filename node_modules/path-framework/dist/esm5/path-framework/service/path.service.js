import * as tslib_1 from "tslib";
import { Injectable, Inject } from "@angular/core";
import { TranslationService } from "./translation.service";
import { HttpClient, HttpHeaders } from "@angular/common/http";
var PathService = /** @class */ (function () {
    function PathService(http, translationService) {
        this.http = http;
        this.translationService = translationService;
        this._alertStack = [];
        this._requestCount = 0;
    }
    PathService.prototype.isLoading = function () {
        return this._requestCount > 0;
    };
    PathService.prototype.showLoading = function () {
        var _this = this;
        window.setTimeout(function () {
            _this._requestCount++;
        }, 1);
    };
    PathService.prototype.hideLoading = function () {
        var _this = this;
        window.setTimeout(function () {
            _this._requestCount--;
        }, 1);
    };
    PathService.prototype.serverGet = function (server, url, processor, errorHandler) {
        var _this = this;
        if (url != null) {
            // fetch json data from url
            this.showLoading();
            this.http.get(server + url, { observe: "response", headers: this.appendHeaders() })
                .subscribe(function (data) {
                var jwt = data.headers.get("Authorization");
                if (jwt != null && jwt !== "") {
                    sessionStorage.setItem("pathAppId", data.headers.get("Authorization"));
                }
                else {
                    sessionStorage.removeItem("pathAppId");
                }
                processor(data.body);
            }, function (err) {
                if (errorHandler == null) {
                    _this.handleError(err);
                }
                else {
                    errorHandler(err);
                }
            }, function () {
                _this.hideLoading();
                console.log("server GET to " + server + url + " finished");
            });
        }
        else {
            // no url provided, therefore call processor without data
            processor(null);
        }
    };
    PathService.prototype.serverPost = function (server, url, data, processor, errorHandler) {
        var _this = this;
        if (url != null) {
            this.showLoading();
            this.http.post(server + url, data, { observe: "response", headers: this.appendHeaders() })
                .subscribe(function (responseData) {
                sessionStorage.setItem("pathAppId", responseData.headers.get("Authorization"));
                console.log(responseData);
                processor(responseData.body);
            }, function (err) {
                if (errorHandler == null) {
                    _this.handleError(err);
                }
                else {
                    errorHandler(err);
                }
            }, function () {
                _this.hideLoading();
                console.log("server POST to " + server + url + " finished:");
                console.log(data);
            });
        }
        else {
            // no url provided, therefore call processor without data
            processor(null);
        }
    };
    PathService.prototype.serverPut = function (server, url, data, processor) {
        var _this = this;
        if (url != null) {
            this.showLoading();
            this.http.put(server + url, data, { observe: "response", headers: this.appendHeaders() })
                .subscribe(function (responseData) {
                sessionStorage.setItem("pathAppId", responseData.headers.get("Authorization"));
                console.log(responseData);
                processor(responseData.body);
            }, function (err) {
                _this.handleError(err);
            }, function () {
                _this.hideLoading();
                console.log("server PUT to " + server + url + " finished:");
                console.log(data);
            });
        }
        else {
            // no url provided, therefore call processor without data
            processor(null);
        }
    };
    PathService.prototype.serverDelete = function (server, url, processor) {
        var _this = this;
        if (url != null) {
            this.showLoading();
            this.http.delete(server + url, { observe: "response", headers: this.appendHeaders() })
                .subscribe(function (data) {
                sessionStorage.setItem("pathAppId", data.headers.get("Authorization"));
                console.log(data);
                processor(data.body);
            }, function (err) {
                _this.handleError(err);
            }, function () {
                _this.hideLoading();
                console.log("server DELETE to " + server + url + " finished:");
            });
        }
        else {
            // no url provided, therefore call processor without data
            processor(null);
        }
    };
    PathService.prototype.handleError = function (err) {
        this.hideLoading();
        if (err.status === 405 && err.error["messageKey"] != null) {
            alert(this.translationService.getText(err.error["messageKey"], err.error["parameters"]));
        }
        else if (err.status === 401) {
            alert("Unauthorized. Please login again.");
            location.reload();
        }
        else {
            // general error
            if (err.error["error"] == null && err.error["title"] == null) {
                this.addAlert("Unkwown Error", "Please check server and internet connection: " + err.error);
            }
            else {
                this.addAlert(err.error["title"], err.error["error"]);
            }
            console.error(err);
        }
    };
    PathService.prototype.appendHeaders = function () {
        var headers = new HttpHeaders();
        headers = headers.append("Content-Type", "application/json");
        var jwt = sessionStorage.getItem("pathAppId");
        if (jwt != null) {
            headers = headers.append("Authorization", jwt);
        }
        return headers;
    };
    PathService.prototype.getAlerts = function () {
        return this._alertStack;
    };
    PathService.prototype.addAlert = function (title, text) {
        var alert = new Alert();
        alert.title = title;
        alert.text = text;
        this._alertStack.push(alert);
    };
    PathService.prototype.clearAlert = function (id) {
        for (var i = 0; i < this._alertStack.length; i++) {
            if (this._alertStack[i].id === id) {
                this._alertStack.splice(i, 1);
                break;
            }
        }
    };
    PathService.ctorParameters = function () { return [
        { type: HttpClient, decorators: [{ type: Inject, args: [HttpClient,] }] },
        { type: TranslationService }
    ]; };
    PathService = tslib_1.__decorate([
        Injectable(),
        tslib_1.__param(0, Inject(HttpClient))
    ], PathService);
    return PathService;
}());
export { PathService };
var Alert = /** @class */ (function () {
    function Alert() {
        this._id = Date.now();
    }
    Object.defineProperty(Alert.prototype, "title", {
        get: function () {
            return this._title;
        },
        set: function (value) {
            this._title = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Alert.prototype, "text", {
        get: function () {
            return this._text;
        },
        set: function (value) {
            this._text = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Alert.prototype, "id", {
        get: function () {
            return this._id;
        },
        enumerable: true,
        configurable: true
    });
    return Alert;
}());
export { Alert };
//# sourceMappingURL=data:application/json;base64,