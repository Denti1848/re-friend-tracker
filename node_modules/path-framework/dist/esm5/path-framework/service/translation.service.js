import * as tslib_1 from "tslib";
import { Injectable } from "@angular/core";
var TranslationService = /** @class */ (function () {
    function TranslationService() {
        this.translationMap = this.createTranslationMap(this.getTranslations());
    }
    TranslationService.prototype.getText = function (key) {
        var e_1, _a;
        var parameters = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            parameters[_i - 1] = arguments[_i];
        }
        if (key == null) {
            return "";
        }
        else if (key[this.getUserLanguage()] != null) {
            return key[this.getUserLanguage()];
        }
        else if (key["default"] != null) {
            return key["default"];
        }
        else if (this.getTranslation(key) == null) {
            return "{" + key + "}";
        }
        var result = this.getTranslation(key);
        var k = 0;
        try {
            for (var parameters_1 = tslib_1.__values(parameters), parameters_1_1 = parameters_1.next(); !parameters_1_1.done; parameters_1_1 = parameters_1.next()) {
                var parameter = parameters_1_1.value;
                result = result.replace("{" + k + "}", parameter);
                k++;
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (parameters_1_1 && !parameters_1_1.done && (_a = parameters_1.return)) _a.call(parameters_1);
            }
            finally { if (e_1) throw e_1.error; }
        }
        return result;
    };
    TranslationService.prototype.getTranslation = function (key) {
        return this.translationMap.get(key);
    };
    TranslationService.prototype.createTranslationMap = function (data) {
        var e_2, _a;
        var result = new Map();
        try {
            for (var _b = tslib_1.__values(Object.keys(data)), _c = _b.next(); !_c.done; _c = _b.next()) {
                var item = _c.value;
                result.set(item, data[item]);
            }
        }
        catch (e_2_1) { e_2 = { error: e_2_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_2) throw e_2.error; }
        }
        return result;
    };
    TranslationService.prototype.getUserLanguage = function () {
        var languageCode = sessionStorage.getItem("languageCode");
        if (languageCode && this.getSupportedLanguageCodes().indexOf(languageCode) > 0) {
            return languageCode;
        }
        if (this.getSupportedLanguageCodes().length <= 0) {
            console.log("No supported language codes defined. Please check translation service.");
            return "en";
        }
        return this.getSupportedLanguageCodes()[0];
    };
    TranslationService.prototype.getUserDateFormat = function () {
        // TODO: add locale support
        if (this.getUserLanguage() === "de") {
            return "DD.MM.YYYY";
        }
        return "MM/DD/YYYY";
    };
    TranslationService.prototype.getSupportedLanguageCodes = function () {
        return ["en", "de"];
    };
    TranslationService.prototype.getTranslations = function () {
        var languageCode = this.getUserLanguage();
        if (languageCode === "de") {
            return {
                "Back": "Zurück",
                "Cancel": "Abbrechen",
                "Delete": "Löschen",
                "DeleteWarningQuestion": "Wollen Sie diesen Datensatz löschen?",
                "Detail": "Detail",
                "Files": "Dateien",
                "FileLimitMessage": "Die Anzahl Dateien ist auf {0} limitiert. Bitte reduzieren Sie die Anzahl Dateien.",
                "FileSingleSizeMessage": "Die Dateigrösse einer Datei sollte {0} nicht überschreiten.",
                "FileAllSizeMessage": "Die Dateigrösse aller Dateien zusammen sollte {0} nicht überschreiten.",
                "Logout": "Abmelden",
                "MainMenu": "Hauptmenü",
                "New": "Neu",
                "NotSignedIn": "Nicht angemeldet",
                "Ok": "OK",
                "Result": "Resultat",
                "Results": "Resultate",
                "Search": "Suche",
                "SearchInputLabel": "Suchbegriff",
                "SearchTextTooShort": "Suchbegriff zu kurz",
                "SignedInAs": "Angemeldet als",
                "Translation": "Übersetzung",
                "Translations": "Übersetzungen",
                "de": "Deutsch",
                "en": "Englisch",
            };
        }
        else {
            return {
                "Back": "Back",
                "Cancel": "Cancel",
                "Delete": "Delete",
                "DeleteWarningQuestion": "Do you want to delete this item?",
                "Detail": "Detail",
                "Files": "Files",
                "FileLimitMessage": "The number of files is limited to {0}. Please reduce the number of files.",
                "FileSingleSizeMessage": "The file size for a single file is limited to {0}.",
                "FileAllSizeMessage": "The size of all files should not exceed {0}.",
                "Logout": "Logout",
                "MainMenu": "Main Menu",
                "New": "New",
                "NotSignedIn": "Not signed in",
                "Ok": "Ok",
                "Result": "Result",
                "Results": "Results",
                "Search": "Search",
                "SearchInputLabel": "Enter search text",
                "SearchTextTooShort": "Search text too short",
                "SignedInAs": "Signed in as",
                "Translation": "Translation",
                "Translations": "Translations",
                "de": "German",
                "en": "English",
            };
        }
    };
    TranslationService = tslib_1.__decorate([
        Injectable()
    ], TranslationService);
    return TranslationService;
}());
export { TranslationService };
//# sourceMappingURL=data:application/json;base64,