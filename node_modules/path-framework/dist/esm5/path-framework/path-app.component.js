import * as tslib_1 from "tslib";
import { AutoCompleteFieldEntry } from "./form/field/auto-complete/auto-complete-field-entry";
import { AutoCompleteField } from "./form/field/auto-complete/auto-complete-field.component";
import { CancelButton } from "./form/field/button/cancel-button";
import { FormDeleteButton } from "./form/field/button/form-delete-button";
import { OkButton } from "./form/field/button/ok-button";
import { PreviousButton } from "./form/field/button/previous-button";
import { CheckboxGroupField } from "./form/field/checkbox/checkbox-group.component";
import { DateField } from "./form/field/date/date-field.component";
import { FieldListField } from "./form/field/fieldList/field-list-field.component";
import { FileUploadField } from "./form/field/file-upload/file-upload.component";
import { FormField } from "./form/field/form-field";
import { LabelField } from "./form/field/label/label-field.component";
import { NumberField } from "./form/field/number/number-field.component";
import { ProgressBarField } from "./form/field/progress-bar/progress-bar.component";
import { Radio } from "./form/field/radio/radio";
import { RadioGroupField } from "./form/field/radio/radio-group.component";
import { TextField } from "./form/field/text/text-field.component";
import { TranslationField } from "./form/field/translation/translation-field.component";
import { ValueField } from "./form/field/value-field";
import { FormFunction } from "./form/form-function";
import { Form } from "./form/form.component";
import { ButtonGroup } from "./page/element/button-group/button-group.component";
import { BackButton } from "./page/element/button/back-button.component";
import { Button } from "./page/element/button/button.component";
import { LinkButton } from "./page/element/button/link-button.component";
import { PageDeleteButton } from "./page/element/button/page-delete-button.component";
import { ChartElement } from "./page/element/chart/chart.component";
import { CustomContainerPageElement } from "./page/element/custom/custom-container-page-element";
import { ElementList } from "./page/element/element-list/element-list.component";
import { InlineForm } from "./page/element/inline-form/inline-form";
import { PageLabel } from "./page/element/label/page-label.component";
import { List } from "./page/element/list/list.component";
import { Key, PageElement } from "./page/element/page-element";
import { Page } from "./page/page";
import { KeyUtility } from "./utility/key-utility";
import { Breadcrumb } from "./page/element/breadcrumb/breadcrumb.component";
var PathAppComponent = /** @class */ (function () {
    function PathAppComponent(pathService, translationService) {
        var _this = this;
        this.pathService = pathService;
        this.translationService = translationService;
        this._pageStack = [];
        this._formStack = [];
        this._texts = [];
        /* toggle navigation
        inspired by: https://angularfirebase.com/lessons/bootstrap-4-collapsable-navbar-work-with-angular */
        this.show = false;
        if (this.getBackendUrl() && this.getBackendUrl().length > 0) {
            this.pathService.serverGet(this.getBackendUrl(), "/ping", function (data) {
                var backendVersion = data["version"];
                if (backendVersion !== _this.getFrontendVersion()) {
                    backendVersion = "Version mismatch: Backend (" + backendVersion + "), Frontend (" + _this.getFrontendVersion() + "). " +
                        "Please clear cache or check server installation.";
                    window.alert(backendVersion);
                }
                _this._version = backendVersion;
                if (data["userId"] !== null && data["userId"] !== "") {
                    _this._userId = data["userId"];
                    _this.setCurrentPage(_this.getStartPage(), null);
                }
                if (data["languageCode"] !== null && data["languageCode"] !== "") {
                    sessionStorage.setItem("languageCode", data["languageCode"]);
                }
            }, function (err) {
                console.error(err);
            });
        }
        this.loadApplicationTexts();
    }
    PathAppComponent.prototype.getApplicationLogo = function () {
        return null;
    };
    PathAppComponent.prototype.isLoading = function () {
        return this.pathService.isLoading();
    };
    PathAppComponent.prototype.loadApplicationTexts = function () {
        this._texts["Logout"] = this.translationService.getText("Logout");
        this._texts["NotSignedIn"] = this.translationService.getText("NotSignedIn");
        this._texts["SignedInAs"] = this.translationService.getText("SignedInAs");
    };
    PathAppComponent.prototype.getUserId = function () {
        return this._userId;
    };
    PathAppComponent.prototype.login = function (event, userId, password) {
        var _this = this;
        var credentials = {};
        credentials["username"] = userId;
        credentials["password"] = password;
        this.pathService.serverPost(this.getBackendUrl(), "/login", credentials, function (data) {
            console.log("login ok, language code: " + data["languageCode"] + ", jwt:" + data["jwt"]);
            sessionStorage.setItem("languageCode", data["languageCode"]);
            _this._userId = userId;
            _this.loadApplicationTexts();
            _this.setCurrentPage(_this.getStartPage(), null); // set start page
        }, function (err) {
            _this.pathService.hideLoading();
            alert("Login failed.");
            console.error("failed login");
        });
    };
    PathAppComponent.prototype.logout = function () {
        sessionStorage.clear();
        console.log("logout user " + this._userId);
        this._userId = null;
        location.reload();
    };
    PathAppComponent.prototype.showUserForm = function () {
        this.setCurrentForm(this.getOwnUserForm(), new Key(0, "userId"), null, null); // TODO set correct key
    };
    PathAppComponent.prototype.closeCurrentForm = function () {
        this._formStack.pop();
    };
    PathAppComponent.prototype.refreshCurrentPage = function () {
        var pageStack = this._pageStack;
        var afterRefreshHandler = function () {
            var e_1, _a, e_2, _b, e_3, _c;
            // refresh all breadcrumb texts
            for (var k = 1; k < pageStack.length; k++) {
                var page = pageStack[k];
                // only if page name is derived from parent button
                if (page.parentPageElement && page.parentPageElement.getKey()) {
                    var parentPage = pageStack[k - 1]; // the parent page contains a button that defines the page name
                    try {
                        for (var _d = (e_1 = void 0, tslib_1.__values(parentPage.content)), _e = _d.next(); !_e.done; _e = _d.next()) {
                            var element = _e.value;
                            // search all lists of parent page
                            if (element instanceof List) {
                                var list = element;
                                // check if all buttons have unique keys
                                var keys = new Set();
                                var buttonCount = 0;
                                try {
                                    for (var _f = (e_2 = void 0, tslib_1.__values(list.getContent())), _g = _f.next(); !_g.done; _g = _f.next()) {
                                        var button = _g.value;
                                        buttonCount++;
                                        keys.add(button.getKey().getName() + "-" + button.getKey().getKey());
                                        if (keys.size !== buttonCount) {
                                            break;
                                        }
                                    }
                                }
                                catch (e_2_1) { e_2 = { error: e_2_1 }; }
                                finally {
                                    try {
                                        if (_g && !_g.done && (_b = _f.return)) _b.call(_f);
                                    }
                                    finally { if (e_2) throw e_2.error; }
                                }
                                // only update page name if list has unique keys
                                if (keys.size === buttonCount) {
                                    try {
                                        for (var _h = (e_3 = void 0, tslib_1.__values(list.getContent())), _j = _h.next(); !_j.done; _j = _h.next()) {
                                            var button = _j.value;
                                            // compare key value and name and update page name
                                            if (page.parentPageElement.getKey().getKey() === button.getKey().getKey() &&
                                                page.parentPageElement.getKey().getName() === button.getKey().getName()) {
                                                page.name = PageElement.buildShortName(button.getName());
                                                break;
                                            }
                                        }
                                    }
                                    catch (e_3_1) { e_3 = { error: e_3_1 }; }
                                    finally {
                                        try {
                                            if (_j && !_j.done && (_c = _h.return)) _c.call(_h);
                                        }
                                        finally { if (e_3) throw e_3.error; }
                                    }
                                }
                            }
                        }
                    }
                    catch (e_1_1) { e_1 = { error: e_1_1 }; }
                    finally {
                        try {
                            if (_e && !_e.done && (_a = _d.return)) _a.call(_d);
                        }
                        finally { if (e_1) throw e_1.error; }
                    }
                }
            }
        };
        this.refreshPageStack(this._pageStack.length - 1, false, afterRefreshHandler);
    };
    PathAppComponent.prototype.refreshPageStack = function (index, clearSearch, afterRefreshHandler) {
        var e_4, _a, e_5, _b;
        var refresh;
        if (this._pageStack[index].id === this.getStartPage() && clearSearch) {
            // refresh clean, without search text
            refresh = function (element) {
                var list = element;
                list.filterChanged(null);
                list.refresh(null, afterRefreshHandler);
            };
        }
        else {
            // refresh with search text
            refresh = function (element) {
                var list = element;
                list.refresh(list.searchText, afterRefreshHandler);
            };
        }
        var pageHasList = false;
        try {
            for (var _c = tslib_1.__values(this._pageStack[index].content), _d = _c.next(); !_d.done; _d = _c.next()) {
                var element = _d.value;
                if (element instanceof List) {
                    refresh(element);
                    pageHasList = true;
                }
            }
        }
        catch (e_4_1) { e_4 = { error: e_4_1 }; }
        finally {
            try {
                if (_d && !_d.done && (_a = _c.return)) _a.call(_c);
            }
            finally { if (e_4) throw e_4.error; }
        }
        if (!pageHasList && afterRefreshHandler) {
            afterRefreshHandler();
        }
        // breadcrumbs
        for (var k = index - 1; k > 0; k--) {
            var currentPage = this._pageStack[k];
            if (currentPage) {
                try {
                    for (var _e = (e_5 = void 0, tslib_1.__values(currentPage.content)), _f = _e.next(); !_f.done; _f = _e.next()) {
                        var element = _f.value;
                        if (element instanceof List) {
                            refresh(element);
                        }
                    }
                }
                catch (e_5_1) { e_5 = { error: e_5_1 }; }
                finally {
                    try {
                        if (_f && !_f.done && (_b = _e.return)) _b.call(_e);
                    }
                    finally { if (e_5) throw e_5.error; }
                }
            }
        }
    };
    PathAppComponent.prototype.navigateBack = function (clearSearch) {
        var _this = this;
        if (clearSearch === void 0) { clearSearch = false; }
        var currentPageLength = this._pageStack.length;
        var afterRefreshHandler = function () {
            if (_this._pageStack.length === currentPageLength) {
                _this._pageStack.pop();
            }
        };
        this.refreshPageStack(this._pageStack.length - 2, clearSearch, afterRefreshHandler);
    };
    PathAppComponent.prototype.navigateToPage = function (pageNumber) {
        for (var k = this._pageStack.length - 1; k > pageNumber + 1; k--) {
            this._pageStack.pop();
        }
        this.navigateBack(true);
    };
    PathAppComponent.prototype.yesNo = function (text, yesHandler, noHandler) {
        var _this = this;
        var form = new Form(this.pathService, this);
        form.formFunction = new FormFunction();
        form.formFunction.save = function (data) {
            _this.closeCurrentForm();
            _this.refreshCurrentPage();
        };
        form.formFunction.cancel = function () {
            _this.closeCurrentForm();
        };
        var message = new TextField(form, this.translationService);
        message.type = "label";
        message.visible = true;
        message.labelVisible = false;
        message.setValue(text);
        form.fields.push(message);
        var cancelButton = new CancelButton(form, this.translationService);
        cancelButton.type = "cancelButton";
        cancelButton.name = this.translationService.getText("Cancel");
        cancelButton.visible = true;
        form.fields.push(cancelButton);
        var okButton = new OkButton(form, this.translationService);
        okButton.type = "okButton";
        okButton.name = this.translationService.getText("Ok");
        okButton.visible = true;
        okButton.handler = {
            doClick: function (button) {
                yesHandler();
            }
        };
        form.fields.push(okButton);
        form.updateRows();
        this._formStack.push(form);
    };
    PathAppComponent.prototype.getCustomComponentClass = function (componentType) {
        console.log("Please define a type mapping for " + componentType + " in your App-Component.");
        return null;
    };
    PathAppComponent.prototype.setCurrentPage = function (pageId, parentPageElement) {
        var e_6, _a, e_7, _b;
        var page = null;
        try {
            for (var _c = tslib_1.__values(this.getGuiModel().application.pageList), _d = _c.next(); !_d.done; _d = _c.next()) {
                var modelPage = _d.value;
                if (modelPage.id === pageId) {
                    page = new Page(parentPageElement);
                    page.id = pageId;
                    page.name = this.translationService.getText(modelPage.name);
                    if (parentPageElement != null) {
                        page.name = parentPageElement.name;
                    }
                    try {
                        for (var _e = (e_7 = void 0, tslib_1.__values(modelPage.elementList)), _f = _e.next(); !_f.done; _f = _e.next()) {
                            var modelElement = _f.value;
                            this.createPageElement(modelElement, parentPageElement, page);
                        }
                    }
                    catch (e_7_1) { e_7 = { error: e_7_1 }; }
                    finally {
                        try {
                            if (_f && !_f.done && (_b = _e.return)) _b.call(_e);
                        }
                        finally { if (e_7) throw e_7.error; }
                    }
                }
            }
        }
        catch (e_6_1) { e_6 = { error: e_6_1 }; }
        finally {
            try {
                if (_d && !_d.done && (_a = _c.return)) _a.call(_c);
            }
            finally { if (e_6) throw e_6.error; }
        }
        if (page == null && pageId != null) {
            this.pathService.addAlert("Missing page", pageId);
        }
        else {
            this._pageStack.push(page);
        }
    };
    PathAppComponent.prototype.createPageElement = function (modelElement, parentPageElement, page) {
        var e_8, _a, e_9, _b, e_10, _c, _d;
        var _this = this;
        var elements = [];
        switch (modelElement.type) {
            case "button":
            case "newButton":
                var button = new Button(this, this.pathService, this.translationService);
                button.parentPageElement = parentPageElement;
                button.fromJson(modelElement);
                if (modelElement["buttonhandler"] != null) {
                    button.handler = new (this.getHandlers()[modelElement["buttonhandler"]]);
                }
                elements.push(this.wrapSingleButton(button));
                break;
            case "deleteButton":
                var deleteButton = new PageDeleteButton(this, this.pathService, this.translationService);
                deleteButton.parentPageElement = parentPageElement;
                deleteButton.fromJson(modelElement);
                elements.push(this.wrapSingleButton(deleteButton));
                break;
            case "downloadButton": // deprecated
            case "linkButton":
                var linkButton = new LinkButton(this, this.pathService, this.translationService);
                linkButton.parentPageElement = parentPageElement;
                linkButton.fromJson(modelElement);
                elements.push(this.wrapSingleButton(linkButton));
                break;
            case "backbutton":
                var backButton = new BackButton(this, this.pathService, this.translationService);
                backButton.fromJson(modelElement);
                elements.push(this.wrapSingleButton(backButton));
                break;
            case "inlineForm":
                var inlineForm = new InlineForm(this, this.pathService, this.translationService);
                inlineForm.fromJson(modelElement);
                inlineForm.url = KeyUtility.translateUrl(modelElement["url"], inlineForm.getKey(), true, parentPageElement);
                inlineForm.loadNextForm(true);
                elements.push(inlineForm);
                break;
            case "list":
                var dynamicList = new List(this, this.pathService, this.translationService);
                dynamicList.parentPageElement = parentPageElement;
                dynamicList.fromJson(modelElement);
                // handler
                if (modelElement["handler"] != null) {
                    dynamicList.handler = new (this.getHandlers()[modelElement["handler"]]);
                }
                if (modelElement["buttonhandler"] != null) {
                    dynamicList.buttonHandler = new (this.getHandlers()[modelElement["buttonhandler"]]);
                }
                if (!dynamicList.searchRequired) {
                    dynamicList.refresh(null, null);
                }
                elements.push(dynamicList);
                break;
            case "ChartElement":
                var chart = new ChartElement(this, this.pathService, this.translationService);
                chart.fromJson(modelElement);
                chart.url = KeyUtility.translateUrl(modelElement["url"], null, false, parentPageElement);
                elements.push(chart);
                break;
            case "pageLabel":
                var pageLabel = new PageLabel(this, this.pathService, this.translationService);
                pageLabel.fromJson(modelElement);
                elements.push(pageLabel);
                break;
            case "elementList":
                var elementList = new ElementList(this, this.pathService, this.translationService);
                elementList.fromJson(modelElement);
                var elementListUrl = KeyUtility.translateUrl(modelElement["url"], null, false, parentPageElement);
                this.pathService.serverGet(this.getBackendUrl(), elementListUrl, function (data) {
                    var e_11, _a;
                    try {
                        for (var data_1 = tslib_1.__values(data), data_1_1 = data_1.next(); !data_1_1.done; data_1_1 = data_1.next()) {
                            var dynamicElement = data_1_1.value;
                            elements.push.apply(elements, tslib_1.__spread(_this.createPageElement(dynamicElement, parentPageElement, page)));
                        }
                    }
                    catch (e_11_1) { e_11 = { error: e_11_1 }; }
                    finally {
                        try {
                            if (data_1_1 && !data_1_1.done && (_a = data_1.return)) _a.call(data_1);
                        }
                        finally { if (e_11) throw e_11.error; }
                    }
                }, null);
                elements.push(elementList);
                break;
            case "buttonGroup":
                var buttonGroup = new ButtonGroup(this);
                buttonGroup.fromJson(modelElement);
                if (modelElement["buttons"]) {
                    try {
                        for (var _e = tslib_1.__values(modelElement["buttons"]), _f = _e.next(); !_f.done; _f = _e.next()) {
                            var buttonItem = _f.value;
                            var buttonGroups = this.createPageElement(buttonItem, parentPageElement, null);
                            if (buttonGroups.length > 0) {
                                try {
                                    for (var _g = (e_9 = void 0, tslib_1.__values(buttonGroups[0].buttons)), _h = _g.next(); !_h.done; _h = _g.next()) {
                                        var item = _h.value;
                                        buttonGroup.addButton(item);
                                    }
                                }
                                catch (e_9_1) { e_9 = { error: e_9_1 }; }
                                finally {
                                    try {
                                        if (_h && !_h.done && (_b = _g.return)) _b.call(_g);
                                    }
                                    finally { if (e_9) throw e_9.error; }
                                }
                            }
                        }
                    }
                    catch (e_8_1) { e_8 = { error: e_8_1 }; }
                    finally {
                        try {
                            if (_f && !_f.done && (_a = _e.return)) _a.call(_e);
                        }
                        finally { if (e_8) throw e_8.error; }
                    }
                    buttonGroup.updateButtonBorders();
                }
                elements.push(buttonGroup);
                break;
            case "breadcrumb":
                var breadcrumb = new Breadcrumb(this);
                breadcrumb.fromJson(modelElement);
                elements.push(breadcrumb);
                break;
            default: {
                // call method to get custom component class
                var customContainerPageElement = new CustomContainerPageElement(this);
                customContainerPageElement.fromJson(modelElement);
                customContainerPageElement.typeClass = this.getCustomComponentClass(modelElement.type);
                elements.push(customContainerPageElement);
            }
        }
        try {
            for (var elements_1 = tslib_1.__values(elements), elements_1_1 = elements_1.next(); !elements_1_1.done; elements_1_1 = elements_1.next()) {
                var element = elements_1_1.value;
                if (modelElement["permissionUrl"] != null) {
                    element.visible = false;
                    var permissionUrl = KeyUtility.translateUrl(modelElement["permissionUrl"], null, false, parentPageElement);
                    var permissionHandler = function (permissionElement) { return function (data) {
                        permissionElement.visible = data["permission"];
                    }; };
                    this.pathService.serverGet(this.getBackendUrl(), permissionUrl, permissionHandler(element), null);
                }
                if (!element.type) {
                    element.type = modelElement.type;
                }
                element.parentPageElement = parentPageElement;
            }
        }
        catch (e_10_1) { e_10 = { error: e_10_1 }; }
        finally {
            try {
                if (elements_1_1 && !elements_1_1.done && (_c = elements_1.return)) _c.call(elements_1);
            }
            finally { if (e_10) throw e_10.error; }
        }
        if (page && elements) {
            (_d = page.content).push.apply(_d, tslib_1.__spread(elements));
            page.updateRows();
        }
        return elements;
    };
    PathAppComponent.prototype.wrapSingleButton = function (button) {
        var buttonGroup = new ButtonGroup(this);
        buttonGroup.type = "buttonGroup";
        buttonGroup.addButton(button);
        buttonGroup.updateButtonBorders();
        buttonGroup.newRow = button.newRow;
        return buttonGroup;
    };
    PathAppComponent.prototype.setCurrentForm = function (formId, key, handler, parentPageElement) {
        var _this = this;
        var setCurrentForm = function () {
            // build form function
            var formFunction = new FormFunction();
            formFunction.save = function () {
                _this.closeCurrentForm();
                _this.refreshCurrentPage();
            };
            formFunction.cancel = function () {
                _this.closeCurrentForm();
            };
            formFunction.delete = function () {
                _this.closeCurrentForm();
                var parent = parentPageElement;
                if (parent != null && parent instanceof PageElement && parent.listElement) {
                    _this.refreshCurrentPage();
                }
                else {
                    _this.navigateBack();
                    _this.refreshCurrentPage();
                }
            };
            var form = _this.createForm(formId, key, handler, formFunction, parentPageElement);
            if (form != null) {
                _this._formStack.push(form);
            }
        };
        // check permission
        var modelForm = this.getModelForm(formId);
        if (modelForm != null && modelForm["permissionUrl"] != null) {
            var suffix = "/update";
            if (key == null) {
                suffix = "/create";
            }
            var permissionUrl = KeyUtility.translateUrl(modelForm["permissionUrl"] + suffix, key, false, parentPageElement);
            this.pathService.serverGet(this.getBackendUrl(), permissionUrl, function (data) {
                if (!data["permission"]) {
                    window.alert(_this.translationService.getText("NoPermissionError"));
                }
                else {
                    setCurrentForm();
                }
            }, null);
        }
        else {
            setCurrentForm();
        }
    };
    PathAppComponent.prototype.getModelForm = function (formId) {
        var e_12, _a;
        var result = null;
        try {
            for (var _b = tslib_1.__values(this.getGuiModel().application.formList), _c = _b.next(); !_c.done; _c = _b.next()) {
                var modelForm = _c.value;
                if (modelForm.id === formId) {
                    result = modelForm;
                }
            }
        }
        catch (e_12_1) { e_12 = { error: e_12_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_12) throw e_12.error; }
        }
        if (result == null && formId != null) {
            this.pathService.addAlert("Missing form", formId);
        }
        return result;
    };
    PathAppComponent.prototype.createForm = function (formId, key, handler, formFunction, parentPageElement) {
        var e_13, _a;
        var form = null;
        var modelForm = this.getModelForm(formId);
        if (modelForm != null) {
            // create form
            form = new Form(this.pathService, this);
            form.fromJson(modelForm);
            form.key = key;
            form.formFunction = formFunction;
            form.title = this.translationService.getText(modelForm.title);
            try {
                for (var _b = tslib_1.__values(modelForm.formFieldList), _c = _b.next(); !_c.done; _c = _b.next()) {
                    var modelFormField = _c.value;
                    // create form field
                    var formField = this.createFormField(modelFormField, form, parentPageElement);
                    form.fields.push(formField);
                }
            }
            catch (e_13_1) { e_13 = { error: e_13_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                }
                finally { if (e_13) throw e_13.error; }
            }
            form.updateRows();
            // fetch data from backend
            if (form.url && form.key) {
                // button set a key on form, update mode, ignore urlDefaults
                this.populateForm(form, form.getKey(), parentPageElement);
            }
            else if (form.urlDefaults) {
                // no key, create mode
                var nullKey = new Key("null", "nullKey");
                this.populateForm(form, nullKey, parentPageElement);
            }
            if (form.url) {
                form.url = KeyUtility.translateUrl(form.url, key, true, parentPageElement);
            }
            // execute handler
            var handlerName = handler;
            if (handlerName == null) {
                handlerName = formId + "Handler";
            }
            if (this.getBeans()[formId] != null && this.getHandlers()[handlerName] != null) {
                var formBean = new (this.getBeans()[formId]);
                var formHandler = new (this.getHandlers()[handlerName]);
                for (var a = 0; a < form.fields.length; a++) {
                    if (form.fields[a].id != null) {
                        formBean[form.fields[a].id] = form.fields[a];
                    }
                }
                form.bean = formBean;
                formHandler.doLoad(form.bean);
                form.handler = formHandler;
            }
        }
        return form;
    };
    PathAppComponent.prototype.populateForm = function (form, key, parentPageElement) {
        var url = KeyUtility.translateUrl(form.url, key, true, parentPageElement);
        this.pathService.serverGet(this.getBackendUrl(), url, function (data) {
            var e_14, _a;
            var _loop_1 = function (field) {
                if (data[field.id] != null && field instanceof ValueField) {
                    if (field instanceof RadioGroupField) {
                        // TODO general solution
                        var setValueOfRadioGroupFieldContextWrapper_1 = function () {
                            var f = field;
                            var v = data[field.id];
                            //noinspection TypeScriptUnresolvedFunction
                            setValueOfRadioGroupField_1(f, v);
                        };
                        var setValueOfRadioGroupField_1 = function (radioGroupField, value) {
                            if (!radioGroupField.created) {
                                console.log("Waiting for RadioGroupField " + radioGroupField.id);
                                console.log(radioGroupField.created);
                                window.setTimeout(setValueOfRadioGroupFieldContextWrapper_1, 50); // wait then try again
                                return;
                            }
                            console.log("setting radiogroupfield value");
                            if (value != null) {
                                value = value.toString(); // force radio key type string for angular2
                            }
                            radioGroupField.setValue(value);
                            radioGroupField.isInitialValueSet = true;
                        };
                        setValueOfRadioGroupFieldContextWrapper_1();
                    }
                    else {
                        field.setValue(data[field.id]);
                        field.isInitialValueSet = true;
                    }
                }
                if (field instanceof FieldListField) {
                    var setValueOfFieldListFieldContextWrapper_1 = function () {
                        var f = field;
                        var d = data;
                        //noinspection TypeScriptUnresolvedFunction
                        setValueOfFieldListField_1(f, d);
                    };
                    var setValueOfFieldListField_1 = function (fieldListField, value) {
                        var e_15, _a;
                        if (!field.created) {
                            console.log("Waiting for FieldListField... ");
                            setTimeout(setValueOfFieldListFieldContextWrapper_1, 50); // wait then try again
                            return;
                        }
                        try {
                            // update fields
                            for (var _b = (e_15 = void 0, tslib_1.__values(field.subfields)), _c = _b.next(); !_c.done; _c = _b.next()) {
                                var subfield = _c.value;
                                if (data[subfield.id] != null) {
                                    subfield.setValue(data[subfield.id]);
                                    subfield.isInitialValueSet = true;
                                }
                            }
                        }
                        catch (e_15_1) { e_15 = { error: e_15_1 }; }
                        finally {
                            try {
                                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                            }
                            finally { if (e_15) throw e_15.error; }
                        }
                    };
                    setValueOfFieldListFieldContextWrapper_1();
                }
            };
            try {
                for (var _b = tslib_1.__values(form.fields), _c = _b.next(); !_c.done; _c = _b.next()) {
                    var field = _c.value;
                    _loop_1(field);
                }
            }
            catch (e_14_1) { e_14 = { error: e_14_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                }
                finally { if (e_14) throw e_14.error; }
            }
        }, null);
    };
    PathAppComponent.prototype.createFormField = function (modelFormField, form, parentPageElement) {
        var e_16, _a;
        var _this = this;
        var formField = null;
        switch (modelFormField.type) {
            case "text": {
                formField = new TextField(form, this.translationService);
                formField.fromJson(modelFormField);
                break;
            }
            case "translation": {
                formField = new TranslationField(form, this.pathService, this.translationService);
                formField.fromJson(modelFormField);
                break;
            }
            case "number": {
                formField = new NumberField(form, this.translationService);
                formField.fromJson(modelFormField);
                break;
            }
            case "label": {
                formField = new LabelField(form, this.translationService);
                formField.fromJson(modelFormField);
                break;
            }
            case "fieldList": {
                formField = new FieldListField(form, this.translationService);
                formField.name = "list";
                formField.fromJson(modelFormField);
                if (modelFormField["url"] != null) {
                    var fieldListUrl = KeyUtility.translateUrl(modelFormField["url"], form.getKey(), false, parentPageElement);
                    var modelId_1 = modelFormField["id"];
                    this.pathService.serverGet(this.getBackendUrl(), fieldListUrl, function (data) {
                        var e_17, _a;
                        var counter = 1;
                        try {
                            for (var data_2 = tslib_1.__values(data), data_2_1 = data_2.next(); !data_2_1.done; data_2_1 = data_2.next()) {
                                var item = data_2_1.value;
                                var dynamicField = _this.createFormField(item, form, parentPageElement);
                                dynamicField.name = item["name"]; // do not use translation service
                                dynamicField.id = modelId_1 + counter;
                                formField.subfields.push(dynamicField);
                                counter++;
                            }
                        }
                        catch (e_17_1) { e_17 = { error: e_17_1 }; }
                        finally {
                            try {
                                if (data_2_1 && !data_2_1.done && (_a = data_2.return)) _a.call(data_2);
                            }
                            finally { if (e_17) throw e_17.error; }
                        }
                        form.updateRows();
                        formField.created = true;
                    }, null);
                }
                break;
            }
            case "date": {
                formField = new DateField(form, this.translationService);
                formField.fromJson(modelFormField);
                break;
            }
            case "autocomplete": {
                var autoCompleteFormField = new AutoCompleteField(form, this.translationService, this.pathService);
                autoCompleteFormField.detailForm = modelFormField["form"];
                autoCompleteFormField.wordSearchEnabled = modelFormField["wordSearchEnabled"];
                if (modelFormField["data"] != null) {
                    var data = [];
                    var k = 0;
                    try {
                        for (var _b = tslib_1.__values(modelFormField["data"]), _c = _b.next(); !_c.done; _c = _b.next()) {
                            var item = _c.value;
                            var entry = new AutoCompleteFieldEntry();
                            entry.text = item;
                            entry.key = k;
                            data.push(entry);
                            k++;
                        }
                    }
                    catch (e_16_1) { e_16 = { error: e_16_1 }; }
                    finally {
                        try {
                            if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                        }
                        finally { if (e_16) throw e_16.error; }
                    }
                    autoCompleteFormField.data = data;
                    autoCompleteFormField.dataLoaded = true;
                }
                else if (modelFormField["url"] != null) {
                    var autoCompleteFormFieldUrl = KeyUtility.translateUrl(modelFormField["url"], form.key, false, parentPageElement);
                    autoCompleteFormField.url = autoCompleteFormFieldUrl;
                    autoCompleteFormField.load();
                }
                else {
                    autoCompleteFormField.dataLoaded = true;
                }
                formField = autoCompleteFormField;
                formField.fromJson(modelFormField);
                break;
            }
            case "RadioGroupField": {
                var radioGroupFormField = new RadioGroupField(form, this.translationService);
                if (modelFormField["url"] != null) {
                    var radiosUrl = KeyUtility.translateUrl(modelFormField["url"], form.getKey(), false, parentPageElement);
                    var radioLoader = function (rgField) { return function (data) {
                        var e_18, _a;
                        try {
                            for (var data_3 = tslib_1.__values(data), data_3_1 = data_3.next(); !data_3_1.done; data_3_1 = data_3.next()) {
                                var item = data_3_1.value;
                                var radio = new Radio(form, _this.translationService);
                                radio.name = item["name"];
                                radio.key = item["key"]["key"].toString(); // force radio key type string for angular2
                                if (radio.key === item["defaultKey"]) {
                                    rgField.setValue(radio.key);
                                }
                                rgField.radios.push(radio);
                            }
                        }
                        catch (e_18_1) { e_18 = { error: e_18_1 }; }
                        finally {
                            try {
                                if (data_3_1 && !data_3_1.done && (_a = data_3.return)) _a.call(data_3);
                            }
                            finally { if (e_18) throw e_18.error; }
                        }
                        rgField.created = true;
                        console.log("radio group field created: " + rgField.id);
                    }; };
                    var radioLoaderForField = radioLoader(radioGroupFormField);
                    this.pathService.serverGet(this.getBackendUrl(), radiosUrl, radioLoaderForField, null);
                }
                else {
                    radioGroupFormField.created = true;
                }
                radioGroupFormField.fromJson(modelFormField);
                formField = radioGroupFormField;
                break;
            }
            case "CheckboxGroupField": {
                var checkboxGroupField = new CheckboxGroupField(form, this.translationService);
                checkboxGroupField.fromJson(modelFormField);
                formField = checkboxGroupField;
                break;
            }
            case "ProgressBarField": {
                var progressBarField = new ProgressBarField(form, this.translationService);
                progressBarField.fromJson(modelFormField);
                formField = progressBarField;
                break;
            }
            case "okButton": {
                formField = new OkButton(form, this.translationService);
                formField.fromJson(modelFormField);
                break;
            }
            case "cancelButton": {
                formField = new CancelButton(form, this.translationService);
                formField.fromJson(modelFormField);
                break;
            }
            case "deleteButton": {
                formField = new FormDeleteButton(form, this.translationService);
                formField.fromJson(modelFormField);
                if (form.key == null) {
                    formField.visible = false;
                }
                break;
            }
            case "previousButton": {
                formField = new PreviousButton(form, this.translationService);
                formField.fromJson(modelFormField);
                if (form.key == null) {
                    formField.visible = false;
                }
                break;
            }
            case "fileUpload": {
                formField = new FileUploadField(form, this.translationService);
                modelFormField["url"] = KeyUtility.translateUrl(modelFormField["url"], form.getKey(), false, parentPageElement);
                formField.fromJson(modelFormField);
                break;
            }
            default: {
                formField = new FormField(form, this.translationService);
                formField.fromJson(modelFormField);
            }
        }
        // Field permission (move code to FormField)
        if (modelFormField["permissionUrl"] != null) {
            formField.readonly = false;
            var permissionUrl = KeyUtility.translateUrl(modelFormField["permissionUrl"], formField.getForm().getKey(), false, parentPageElement);
            var permissionHandler = function (permissionElement) { return function (data) {
                permissionElement.readonly = !data["permission"];
            }; };
            this.pathService.serverGet(formField.getForm().getApp().getBackendUrl(), permissionUrl, permissionHandler(formField), null);
        }
        // search parents for defaultKey
        if (formField instanceof ValueField && modelFormField["defaultKey"] != null) {
            var pageElement = parentPageElement;
            while (pageElement != null) {
                if (pageElement.getKey() != null && pageElement.getKey().getName() === modelFormField["defaultKey"]) {
                    formField.setValue(pageElement.getKey().getKey());
                    formField.isInitialValueSet = true;
                    pageElement = null;
                }
                else {
                    pageElement = pageElement.getParent();
                }
            }
        }
        return formField;
    };
    PathAppComponent.prototype.toggleCollapse = function () {
        this.show = !this.show;
    };
    return PathAppComponent;
}());
export { PathAppComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGF0aC1hcHAuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vcGF0aC1mcmFtZXdvcmsvIiwic291cmNlcyI6WyJwYXRoLWZyYW1ld29yay9wYXRoLWFwcC5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUNBLE9BQU8sRUFBQyxzQkFBc0IsRUFBQyxNQUFNLHNEQUFzRCxDQUFDO0FBQzVGLE9BQU8sRUFBQyxpQkFBaUIsRUFBQyxNQUFNLDBEQUEwRCxDQUFDO0FBQzNGLE9BQU8sRUFBQyxZQUFZLEVBQUMsTUFBTSxtQ0FBbUMsQ0FBQztBQUMvRCxPQUFPLEVBQUMsZ0JBQWdCLEVBQUMsTUFBTSx3Q0FBd0MsQ0FBQztBQUN4RSxPQUFPLEVBQUMsUUFBUSxFQUFDLE1BQU0sK0JBQStCLENBQUM7QUFDdkQsT0FBTyxFQUFDLGNBQWMsRUFBQyxNQUFNLHFDQUFxQyxDQUFDO0FBQ25FLE9BQU8sRUFBQyxrQkFBa0IsRUFBQyxNQUFNLGdEQUFnRCxDQUFDO0FBQ2xGLE9BQU8sRUFBQyxTQUFTLEVBQUMsTUFBTSx3Q0FBd0MsQ0FBQztBQUNqRSxPQUFPLEVBQUMsY0FBYyxFQUFDLE1BQU0sbURBQW1ELENBQUM7QUFDakYsT0FBTyxFQUFDLGVBQWUsRUFBQyxNQUFNLGdEQUFnRCxDQUFDO0FBQy9FLE9BQU8sRUFBQyxTQUFTLEVBQUMsTUFBTSx5QkFBeUIsQ0FBQztBQUNsRCxPQUFPLEVBQUMsVUFBVSxFQUFDLE1BQU0sMENBQTBDLENBQUM7QUFDcEUsT0FBTyxFQUFDLFdBQVcsRUFBQyxNQUFNLDRDQUE0QyxDQUFDO0FBQ3ZFLE9BQU8sRUFBQyxnQkFBZ0IsRUFBQyxNQUFNLGtEQUFrRCxDQUFDO0FBQ2xGLE9BQU8sRUFBQyxLQUFLLEVBQUMsTUFBTSwwQkFBMEIsQ0FBQztBQUMvQyxPQUFPLEVBQUMsZUFBZSxFQUFDLE1BQU0sMENBQTBDLENBQUM7QUFDekUsT0FBTyxFQUFDLFNBQVMsRUFBQyxNQUFNLHdDQUF3QyxDQUFDO0FBQ2pF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Q0FBQyxJQUFJLEdBQUcsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDO0lBQzNCLENBQUM7SUFFTCx1QkFBQztBQUFELENBQUMsQUE1dkJELElBNHZCQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7VHlwZX0gZnJvbSBcIkBhbmd1bGFyL2NvcmVcIjtcclxuaW1wb3J0IHtBdXRvQ29tcGxldGVGaWVsZEVudHJ5fSBmcm9tIFwiLi9mb3JtL2ZpZWxkL2F1dG8tY29tcGxldGUvYXV0by1jb21wbGV0ZS1maWVsZC1lbnRyeVwiO1xyXG5pbXBvcnQge0F1dG9Db21wbGV0ZUZpZWxkfSBmcm9tIFwiLi9mb3JtL2ZpZWxkL2F1dG8tY29tcGxldGUvYXV0by1jb21wbGV0ZS1maWVsZC5jb21wb25lbnRcIjtcclxuaW1wb3J0IHtDYW5jZWxCdXR0b259IGZyb20gXCIuL2Zvcm0vZmllbGQvYnV0dG9uL2NhbmNlbC1idXR0b25cIjtcclxuaW1wb3J0IHtGb3JtRGVsZXRlQnV0dG9ufSBmcm9tIFwiLi9mb3JtL2ZpZWxkL2J1dHRvbi9mb3JtLWRlbGV0ZS1idXR0b25cIjtcclxuaW1wb3J0IHtPa0J1dHRvbn0gZnJvbSBcIi4vZm9ybS9maWVsZC9idXR0b24vb2stYnV0dG9uXCI7XHJcbmltcG9ydCB7UHJldmlvdXNCdXR0b259IGZyb20gXCIuL2Zvcm0vZmllbGQvYnV0dG9uL3ByZXZpb3VzLWJ1dHRvblwiO1xyXG5pbXBvcnQge0NoZWNrYm94R3JvdXBGaWVsZH0gZnJvbSBcIi4vZm9ybS9maWVsZC9jaGVja2JveC9jaGVja2JveC1ncm91cC5jb21wb25lbnRcIjtcclxuaW1wb3J0IHtEYXRlRmllbGR9IGZyb20gXCIuL2Zvcm0vZmllbGQvZGF0ZS9kYXRlLWZpZWxkLmNvbXBvbmVudFwiO1xyXG5pbXBvcnQge0ZpZWxkTGlzdEZpZWxkfSBmcm9tIFwiLi9mb3JtL2ZpZWxkL2ZpZWxkTGlzdC9maWVsZC1saXN0LWZpZWxkLmNvbXBvbmVudFwiO1xyXG5pbXBvcnQge0ZpbGVVcGxvYWRGaWVsZH0gZnJvbSBcIi4vZm9ybS9maWVsZC9maWxlLXVwbG9hZC9maWxlLXVwbG9hZC5jb21wb25lbnRcIjtcclxuaW1wb3J0IHtGb3JtRmllbGR9IGZyb20gXCIuL2Zvcm0vZmllbGQvZm9ybS1maWVsZFwiO1xyXG5pbXBvcnQge0xhYmVsRmllbGR9IGZyb20gXCIuL2Zvcm0vZmllbGQvbGFiZWwvbGFiZWwtZmllbGQuY29tcG9uZW50XCI7XHJcbmltcG9ydCB7TnVtYmVyRmllbGR9IGZyb20gXCIuL2Zvcm0vZmllbGQvbnVtYmVyL251bWJlci1maWVsZC5jb21wb25lbnRcIjtcclxuaW1wb3J0IHtQcm9ncmVzc0JhckZpZWxkfSBmcm9tIFwiLi9mb3JtL2ZpZWxkL3Byb2dyZXNzLWJhci9wcm9ncmVzcy1iYXIuY29tcG9uZW50XCI7XHJcbmltcG9ydCB7UmFkaW99IGZyb20gXCIuL2Zvcm0vZmllbGQvcmFkaW8vcmFkaW9cIjtcclxuaW1wb3J0IHtSYWRpb0dyb3VwRmllbGR9IGZyb20gXCIuL2Zvcm0vZmllbGQvcmFkaW8vcmFkaW8tZ3JvdXAuY29tcG9uZW50XCI7XHJcbmltcG9ydCB7VGV4dEZpZWxkfSBmcm9tIFwiLi9mb3JtL2ZpZWxkL3RleHQvdGV4dC1maWVsZC5jb21wb25lbnRcIjtcclxuaW1wb3J0IHtUcmFuc2xhdGlvbkZpZWxkfSBmcm9tIFwiLi9mb3JtL2ZpZWxkL3RyYW5zbGF0aW9uL3RyYW5zbGF0aW9uLWZpZWxkLmNvbXBvbmVudFwiO1xyXG5pbXBvcnQge1ZhbHVlRmllbGR9IGZyb20gXCIuL2Zvcm0vZmllbGQvdmFsdWUtZmllbGRcIjtcclxuaW1wb3J0IHtGb3JtRnVuY3Rpb259IGZyb20gXCIuL2Zvcm0vZm9ybS1mdW5jdGlvblwiO1xyXG5pbXBvcnQge0Zvcm19IGZyb20gXCIuL2Zvcm0vZm9ybS5jb21wb25lbnRcIjtcclxuaW1wb3J0IHtCdXR0b25Hcm91cH0gZnJvbSBcIi4vcGFnZS9lbGVtZW50L2J1dHRvbi1ncm91cC9idXR0b24tZ3JvdXAuY29tcG9uZW50XCI7XHJcbmltcG9ydCB7QmFja0J1dHRvbn0gZnJvbSBcIi4vcGFnZS9lbGVtZW50L2J1dHRvbi9iYWNrLWJ1dHRvbi5jb21wb25lbnRcIjtcclxuaW1wb3J0IHtCdXR0b259IGZyb20gXCIuL3BhZ2UvZWxlbWVudC9idXR0b24vYnV0dG9uLmNvbXBvbmVudFwiO1xyXG5pbXBvcnQge0xpbmtCdXR0b259IGZyb20gXCIuL3BhZ2UvZWxlbWVudC9idXR0b24vbGluay1idXR0b24uY29tcG9uZW50XCI7XHJcbmltcG9ydCB7UGFnZURlbGV0ZUJ1dHRvbn0gZnJvbSBcIi4vcGFnZS9lbGVtZW50L2J1dHRvbi9wYWdlLWRlbGV0ZS1idXR0b24uY29tcG9uZW50XCI7XHJcbmltcG9ydCB7Q2hhcnRFbGVtZW50fSBmcm9tIFwiLi9wYWdlL2VsZW1lbnQvY2hhcnQvY2hhcnQuY29tcG9uZW50XCI7XHJcbmltcG9ydCB7Q3VzdG9tQ29udGFpbmVyUGFnZUVsZW1lbnR9IGZyb20gXCIuL3BhZ2UvZWxlbWVudC9jdXN0b20vY3VzdG9tLWNvbnRhaW5lci1wYWdlLWVsZW1lbnRcIjtcclxuaW1wb3J0IHtDdXN0b21QYWdlRWxlbWVudH0gZnJvbSBcIi4vcGFnZS9lbGVtZW50L2N1c3RvbS9jdXN0b20tY29udGFpbmVyLmNvbXBvbmVudFwiO1xyXG5pbXBvcnQge0VsZW1lbnRMaXN0fSBmcm9tIFwiLi9wYWdlL2VsZW1lbnQvZWxlbWVudC1saXN0L2VsZW1lbnQtbGlzdC5jb21wb25lbnRcIjtcclxuaW1wb3J0IHtJbmxpbmVGb3JtfSBmcm9tIFwiLi9wYWdlL2VsZW1lbnQvaW5saW5lLWZvcm0vaW5saW5lLWZvcm1cIjtcclxuaW1wb3J0IHtQYWdlTGFiZWx9IGZyb20gXCIuL3BhZ2UvZWxlbWVudC9sYWJlbC9wYWdlLWxhYmVsLmNvbXBvbmVudFwiO1xyXG5pbXBvcnQge0xpc3R9IGZyb20gXCIuL3BhZ2UvZWxlbWVudC9saXN0L2xpc3QuY29tcG9uZW50XCI7XHJcbmltcG9ydCB7S2V5LCBQYWdlRWxlbWVudH0gZnJvbSBcIi4vcGFnZS9lbGVtZW50L3BhZ2UtZWxlbWVudFwiO1xyXG5pbXBvcnQge1BhZ2V9IGZyb20gXCIuL3BhZ2UvcGFnZVwiO1xyXG5pbXBvcnQge0lCdXR0b24sIElGb3JtLCBJRm9ybUhhbmRsZXIsIElQYWdlRWxlbWVudCwgSVBhdGhBcHB9IGZyb20gXCIuL3BhdGhpbnRlcmZhY2VcIjtcclxuaW1wb3J0IHtQYXRoU2VydmljZX0gZnJvbSBcIi4vc2VydmljZS9wYXRoLnNlcnZpY2VcIjtcclxuaW1wb3J0IHtUcmFuc2xhdGlvblNlcnZpY2V9IGZyb20gXCIuL3NlcnZpY2UvdHJhbnNsYXRpb24uc2VydmljZVwiO1xyXG5pbXBvcnQge0tleVV0aWxpdHl9IGZyb20gXCIuL3V0aWxpdHkva2V5LXV0aWxpdHlcIjtcclxuaW1wb3J0IHtCcmVhZGNydW1ifSBmcm9tIFwiLi9wYWdlL2VsZW1lbnQvYnJlYWRjcnVtYi9icmVhZGNydW1iLmNvbXBvbmVudFwiO1xyXG5cclxuZXhwb3J0IGFic3RyYWN0IGNsYXNzIFBhdGhBcHBDb21wb25lbnQgaW1wbGVtZW50cyBJUGF0aEFwcCB7XHJcblxyXG5cclxuICAgIHByaXZhdGUgX3BhZ2VTdGFjazogUGFnZVtdID0gW107XHJcbiAgICBwcml2YXRlIF9mb3JtU3RhY2s6IEZvcm1bXSA9IFtdO1xyXG4gICAgcHJpdmF0ZSBfdXNlcklkOiBzdHJpbmc7XHJcbiAgICBwcml2YXRlIF90ZXh0czogc3RyaW5nW10gPSBbXTtcclxuICAgIHByaXZhdGUgX3ZlcnNpb246IHN0cmluZztcclxuICAgIC8qIHRvZ2dsZSBuYXZpZ2F0aW9uXHJcbiAgICBpbnNwaXJlZCBieTogaHR0cHM6Ly9hbmd1bGFyZmlyZWJhc2UuY29tL2xlc3NvbnMvYm9vdHN0cmFwLTQtY29sbGFwc2FibGUtbmF2YmFyLXdvcmstd2l0aC1hbmd1bGFyICovXHJcbiAgICBzaG93ID0gZmFsc2U7XHJcblxyXG4gICAgY29uc3RydWN0b3IocHJpdmF0ZSBwYXRoU2VydmljZTogUGF0aFNlcnZpY2UsIHByaXZhdGUgdHJhbnNsYXRpb25TZXJ2aWNlOiBUcmFuc2xhdGlvblNlcnZpY2UpIHtcclxuICAgICAgICBpZiAodGhpcy5nZXRCYWNrZW5kVXJsKCkgJiYgdGhpcy5nZXRCYWNrZW5kVXJsKCkubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICB0aGlzLnBhdGhTZXJ2aWNlLnNlcnZlckdldCh0aGlzLmdldEJhY2tlbmRVcmwoKSwgXCIvcGluZ1wiLCAoZGF0YTogYW55KSA9PiB7XHJcbiAgICAgICAgICAgICAgICBsZXQgYmFja2VuZFZlcnNpb24gPSBkYXRhW1widmVyc2lvblwiXTtcclxuICAgICAgICAgICAgICAgIGlmIChiYWNrZW5kVmVyc2lvbiAhPT0gdGhpcy5nZXRGcm9udGVuZFZlcnNpb24oKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGJhY2tlbmRWZXJzaW9uID0gXCJWZXJzaW9uIG1pc21hdGNoOiBCYWNrZW5kIChcIiArIGJhY2tlbmRWZXJzaW9uICsgXCIpLCBGcm9udGVuZCAoXCIgKyB0aGlzLmdldEZyb250ZW5kVmVyc2lvbigpICsgXCIpLiBcIiArXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIFwiUGxlYXNlIGNsZWFyIGNhY2hlIG9yIGNoZWNrIHNlcnZlciBpbnN0YWxsYXRpb24uXCI7XHJcbiAgICAgICAgICAgICAgICAgICAgd2luZG93LmFsZXJ0KGJhY2tlbmRWZXJzaW9uKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHRoaXMuX3ZlcnNpb24gPSBiYWNrZW5kVmVyc2lvbjtcclxuICAgICAgICAgICAgICAgIGlmIChkYXRhW1widXNlcklkXCJdICE9PSBudWxsICYmIGRhdGFbXCJ1c2VySWRcIl0gIT09IFwiXCIpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLl91c2VySWQgPSBkYXRhW1widXNlcklkXCJdO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc2V0Q3VycmVudFBhZ2UodGhpcy5nZXRTdGFydFBhZ2UoKSwgbnVsbCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpZiAoZGF0YVtcImxhbmd1YWdlQ29kZVwiXSAhPT0gbnVsbCAmJiBkYXRhW1wibGFuZ3VhZ2VDb2RlXCJdICE9PSBcIlwiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgc2Vzc2lvblN0b3JhZ2Uuc2V0SXRlbShcImxhbmd1YWdlQ29kZVwiLCBkYXRhW1wibGFuZ3VhZ2VDb2RlXCJdKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSwgKGVycjogYW55KSA9PiB7XHJcbiAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKGVycik7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLmxvYWRBcHBsaWNhdGlvblRleHRzKCk7XHJcbiAgICB9XHJcblxyXG4gICAgcHJvdGVjdGVkIGFic3RyYWN0IGdldFN0YXJ0UGFnZSgpOiBzdHJpbmc7XHJcblxyXG4gICAgcHJvdGVjdGVkIGdldEFwcGxpY2F0aW9uTG9nbygpOiBzdHJpbmcge1xyXG4gICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgfVxyXG5cclxuICAgIHByb3RlY3RlZCBhYnN0cmFjdCBnZXRPd25Vc2VyRm9ybSgpOiBzdHJpbmc7XHJcblxyXG4gICAgcHJvdGVjdGVkIGFic3RyYWN0IGdldEd1aU1vZGVsKCk7XHJcblxyXG4gICAgcHJvdGVjdGVkIGFic3RyYWN0IGdldEJlYW5zKCk7XHJcblxyXG4gICAgcHJvdGVjdGVkIGFic3RyYWN0IGdldEhhbmRsZXJzKCk7XHJcblxyXG4gICAgcHVibGljIGFic3RyYWN0IGdldEJhY2tlbmRVcmwoKTogc3RyaW5nO1xyXG5cclxuICAgIHByb3RlY3RlZCBhYnN0cmFjdCBnZXRGcm9udGVuZFZlcnNpb24oKTogc3RyaW5nO1xyXG5cclxuICAgIHB1YmxpYyBpc0xvYWRpbmcoKTogYm9vbGVhbiB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMucGF0aFNlcnZpY2UuaXNMb2FkaW5nKCk7XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBsb2FkQXBwbGljYXRpb25UZXh0cygpIHtcclxuICAgICAgICB0aGlzLl90ZXh0c1tcIkxvZ291dFwiXSA9IHRoaXMudHJhbnNsYXRpb25TZXJ2aWNlLmdldFRleHQoXCJMb2dvdXRcIik7XHJcbiAgICAgICAgdGhpcy5fdGV4dHNbXCJOb3RTaWduZWRJblwiXSA9IHRoaXMudHJhbnNsYXRpb25TZXJ2aWNlLmdldFRleHQoXCJOb3RTaWduZWRJblwiKTtcclxuICAgICAgICB0aGlzLl90ZXh0c1tcIlNpZ25lZEluQXNcIl0gPSB0aGlzLnRyYW5zbGF0aW9uU2VydmljZS5nZXRUZXh0KFwiU2lnbmVkSW5Bc1wiKTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgZ2V0VXNlcklkKCk6IHN0cmluZyB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX3VzZXJJZDtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgbG9naW4oZXZlbnQsIHVzZXJJZDogc3RyaW5nLCBwYXNzd29yZDogc3RyaW5nKSB7XHJcbiAgICAgICAgY29uc3QgY3JlZGVudGlhbHM6IGFueSA9IHt9O1xyXG4gICAgICAgIGNyZWRlbnRpYWxzW1widXNlcm5hbWVcIl0gPSB1c2VySWQ7XHJcbiAgICAgICAgY3JlZGVudGlhbHNbXCJwYXNzd29yZFwiXSA9IHBhc3N3b3JkO1xyXG4gICAgICAgIHRoaXMucGF0aFNlcnZpY2Uuc2VydmVyUG9zdCh0aGlzLmdldEJhY2tlbmRVcmwoKSwgXCIvbG9naW5cIiwgY3JlZGVudGlhbHMsIChkYXRhOiBhbnkpID0+IHtcclxuICAgICAgICAgICAgY29uc29sZS5sb2coXCJsb2dpbiBvaywgbGFuZ3VhZ2UgY29kZTogXCIgKyBkYXRhW1wibGFuZ3VhZ2VDb2RlXCJdICsgXCIsIGp3dDpcIiArIGRhdGFbXCJqd3RcIl0pO1xyXG4gICAgICAgICAgICBzZXNzaW9uU3RvcmFnZS5zZXRJdGVtKFwibGFuZ3VhZ2VDb2RlXCIsIGRhdGFbXCJsYW5ndWFnZUNvZGVcIl0pO1xyXG4gICAgICAgICAgICB0aGlzLl91c2VySWQgPSB1c2VySWQ7XHJcbiAgICAgICAgICAgIHRoaXMubG9hZEFwcGxpY2F0aW9uVGV4dHMoKTtcclxuICAgICAgICAgICAgdGhpcy5zZXRDdXJyZW50UGFnZSh0aGlzLmdldFN0YXJ0UGFnZSgpLCBudWxsKTsgLy8gc2V0IHN0YXJ0IHBhZ2VcclxuICAgICAgICB9LCAoZXJyOiBhbnkpID0+IHtcclxuICAgICAgICAgICAgdGhpcy5wYXRoU2VydmljZS5oaWRlTG9hZGluZygpO1xyXG4gICAgICAgICAgICBhbGVydChcIkxvZ2luIGZhaWxlZC5cIik7XHJcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoXCJmYWlsZWQgbG9naW5cIik7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGxvZ291dCgpIHtcclxuICAgICAgICBzZXNzaW9uU3RvcmFnZS5jbGVhcigpO1xyXG4gICAgICAgIGNvbnNvbGUubG9nKFwibG9nb3V0IHVzZXIgXCIgKyB0aGlzLl91c2VySWQpO1xyXG4gICAgICAgIHRoaXMuX3VzZXJJZCA9IG51bGw7XHJcbiAgICAgICAgbG9jYXRpb24ucmVsb2FkKCk7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIHNob3dVc2VyRm9ybSgpIHtcclxuICAgICAgICB0aGlzLnNldEN1cnJlbnRGb3JtKHRoaXMuZ2V0T3duVXNlckZvcm0oKSwgbmV3IEtleSgwLCBcInVzZXJJZFwiKSwgbnVsbCwgbnVsbCk7IC8vIFRPRE8gc2V0IGNvcnJlY3Qga2V5XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGNsb3NlQ3VycmVudEZvcm0oKSB7XHJcbiAgICAgICAgdGhpcy5fZm9ybVN0YWNrLnBvcCgpO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyByZWZyZXNoQ3VycmVudFBhZ2UoKSB7XHJcbiAgICAgICAgY29uc3QgcGFnZVN0YWNrID0gdGhpcy5fcGFnZVN0YWNrO1xyXG4gICAgICAgIGNvbnN0IGFmdGVyUmVmcmVzaEhhbmRsZXIgPSAoKSA9PiB7XHJcbiAgICAgICAgICAgIC8vIHJlZnJlc2ggYWxsIGJyZWFkY3J1bWIgdGV4dHNcclxuICAgICAgICAgICAgZm9yIChsZXQgayA9IDE7IGsgPCBwYWdlU3RhY2subGVuZ3RoOyBrKyspIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHBhZ2UgPSBwYWdlU3RhY2tba107XHJcbiAgICAgICAgICAgICAgICAvLyBvbmx5IGlmIHBhZ2UgbmFtZSBpcyBkZXJpdmVkIGZyb20gcGFyZW50IGJ1dHRvblxyXG4gICAgICAgICAgICAgICAgaWYgKHBhZ2UucGFyZW50UGFnZUVsZW1lbnQgJiYgcGFnZS5wYXJlbnRQYWdlRWxlbWVudC5nZXRLZXkoKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHBhcmVudFBhZ2UgPSBwYWdlU3RhY2tbayAtIDFdOyAvLyB0aGUgcGFyZW50IHBhZ2UgY29udGFpbnMgYSBidXR0b24gdGhhdCBkZWZpbmVzIHRoZSBwYWdlIG5hbWVcclxuICAgICAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IGVsZW1lbnQgb2YgcGFyZW50UGFnZS5jb250ZW50KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIHNlYXJjaCBhbGwgbGlzdHMgb2YgcGFyZW50IHBhZ2VcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGVsZW1lbnQgaW5zdGFuY2VvZiBMaXN0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBsaXN0ID0gPExpc3Q+ZWxlbWVudDtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBjaGVjayBpZiBhbGwgYnV0dG9ucyBoYXZlIHVuaXF1ZSBrZXlzXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBrZXlzID0gbmV3IFNldCgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGJ1dHRvbkNvdW50ID0gMDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAoY29uc3QgYnV0dG9uIG9mIGxpc3QuZ2V0Q29udGVudCgpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnV0dG9uQ291bnQrKztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBrZXlzLmFkZChidXR0b24uZ2V0S2V5KCkuZ2V0TmFtZSgpICsgXCItXCIgKyBidXR0b24uZ2V0S2V5KCkuZ2V0S2V5KCkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChrZXlzLnNpemUgIT09IGJ1dHRvbkNvdW50KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBvbmx5IHVwZGF0ZSBwYWdlIG5hbWUgaWYgbGlzdCBoYXMgdW5pcXVlIGtleXNcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChrZXlzLnNpemUgPT09IGJ1dHRvbkNvdW50KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChjb25zdCBidXR0b24gb2YgbGlzdC5nZXRDb250ZW50KCkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gY29tcGFyZSBrZXkgdmFsdWUgYW5kIG5hbWUgYW5kIHVwZGF0ZSBwYWdlIG5hbWVcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHBhZ2UucGFyZW50UGFnZUVsZW1lbnQuZ2V0S2V5KCkuZ2V0S2V5KCkgPT09IGJ1dHRvbi5nZXRLZXkoKS5nZXRLZXkoKSAmJlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGFnZS5wYXJlbnRQYWdlRWxlbWVudC5nZXRLZXkoKS5nZXROYW1lKCkgPT09IGJ1dHRvbi5nZXRLZXkoKS5nZXROYW1lKCkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhZ2UubmFtZSA9IFBhZ2VFbGVtZW50LmJ1aWxkU2hvcnROYW1lKGJ1dHRvbi5nZXROYW1lKCkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICB0aGlzLnJlZnJlc2hQYWdlU3RhY2sodGhpcy5fcGFnZVN0YWNrLmxlbmd0aCAtIDEsIGZhbHNlLCBhZnRlclJlZnJlc2hIYW5kbGVyKTtcclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIHJlZnJlc2hQYWdlU3RhY2soaW5kZXg6IG51bWJlciwgY2xlYXJTZWFyY2gsIGFmdGVyUmVmcmVzaEhhbmRsZXI6ICgpID0+IHZvaWQpIHtcclxuICAgICAgICBsZXQgcmVmcmVzaDogKGVsZW1lbnQ6IFBhZ2VFbGVtZW50KSA9PiB2b2lkO1xyXG4gICAgICAgIGlmICh0aGlzLl9wYWdlU3RhY2tbaW5kZXhdLmlkID09PSB0aGlzLmdldFN0YXJ0UGFnZSgpICYmIGNsZWFyU2VhcmNoKSB7XHJcbiAgICAgICAgICAgIC8vIHJlZnJlc2ggY2xlYW4sIHdpdGhvdXQgc2VhcmNoIHRleHRcclxuICAgICAgICAgICAgcmVmcmVzaCA9IChlbGVtZW50OiBQYWdlRWxlbWVudCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgbGlzdDogTGlzdCA9IDxMaXN0PmVsZW1lbnQ7XHJcbiAgICAgICAgICAgICAgICBsaXN0LmZpbHRlckNoYW5nZWQobnVsbCk7XHJcbiAgICAgICAgICAgICAgICBsaXN0LnJlZnJlc2gobnVsbCwgYWZ0ZXJSZWZyZXNoSGFuZGxlcik7XHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgLy8gcmVmcmVzaCB3aXRoIHNlYXJjaCB0ZXh0XHJcbiAgICAgICAgICAgIHJlZnJlc2ggPSAoZWxlbWVudDogUGFnZUVsZW1lbnQpID0+IHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGxpc3Q6IExpc3QgPSA8TGlzdD5lbGVtZW50O1xyXG4gICAgICAgICAgICAgICAgbGlzdC5yZWZyZXNoKGxpc3Quc2VhcmNoVGV4dCwgYWZ0ZXJSZWZyZXNoSGFuZGxlcik7XHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGxldCBwYWdlSGFzTGlzdCA9IGZhbHNlO1xyXG4gICAgICAgIGZvciAoY29uc3QgZWxlbWVudCBvZiB0aGlzLl9wYWdlU3RhY2tbaW5kZXhdLmNvbnRlbnQpIHtcclxuICAgICAgICAgICAgaWYgKGVsZW1lbnQgaW5zdGFuY2VvZiBMaXN0KSB7XHJcbiAgICAgICAgICAgICAgICByZWZyZXNoKGVsZW1lbnQpO1xyXG4gICAgICAgICAgICAgICAgcGFnZUhhc0xpc3QgPSB0cnVlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICghcGFnZUhhc0xpc3QgJiYgYWZ0ZXJSZWZyZXNoSGFuZGxlcikge1xyXG4gICAgICAgICAgICBhZnRlclJlZnJlc2hIYW5kbGVyKCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIGJyZWFkY3J1bWJzXHJcbiAgICAgICAgZm9yIChsZXQgayA9IGluZGV4IC0gMTsgayA+IDA7IGstLSkge1xyXG4gICAgICAgICAgICBjb25zdCBjdXJyZW50UGFnZSA9IHRoaXMuX3BhZ2VTdGFja1trXTtcclxuICAgICAgICAgICAgaWYgKGN1cnJlbnRQYWdlKSB7XHJcbiAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IGVsZW1lbnQgb2YgY3VycmVudFBhZ2UuY29udGVudCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChlbGVtZW50IGluc3RhbmNlb2YgTGlzdCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZWZyZXNoKGVsZW1lbnQpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgbmF2aWdhdGVCYWNrKGNsZWFyU2VhcmNoID0gZmFsc2UpIHtcclxuICAgICAgICBjb25zdCBjdXJyZW50UGFnZUxlbmd0aCA9IHRoaXMuX3BhZ2VTdGFjay5sZW5ndGg7XHJcbiAgICAgICAgY29uc3QgYWZ0ZXJSZWZyZXNoSGFuZGxlciA9ICgpID0+IHtcclxuICAgICAgICAgICAgaWYgKHRoaXMuX3BhZ2VTdGFjay5sZW5ndGggPT09IGN1cnJlbnRQYWdlTGVuZ3RoKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9wYWdlU3RhY2sucG9wKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9O1xyXG4gICAgICAgIHRoaXMucmVmcmVzaFBhZ2VTdGFjayh0aGlzLl9wYWdlU3RhY2subGVuZ3RoIC0gMiwgY2xlYXJTZWFyY2gsIGFmdGVyUmVmcmVzaEhhbmRsZXIpO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBuYXZpZ2F0ZVRvUGFnZShwYWdlTnVtYmVyOiBudW1iZXIpIHtcclxuICAgICAgICBmb3IgKGxldCBrID0gdGhpcy5fcGFnZVN0YWNrLmxlbmd0aCAtIDE7IGsgPiBwYWdlTnVtYmVyICsgMTsgay0tKSB7XHJcbiAgICAgICAgICAgIHRoaXMuX3BhZ2VTdGFjay5wb3AoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5uYXZpZ2F0ZUJhY2sodHJ1ZSk7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIHllc05vKHRleHQ6IHN0cmluZywgeWVzSGFuZGxlcjogKCkgPT4gdm9pZCwgbm9IYW5kbGVyOiAoKSA9PiB2b2lkKSB7XHJcbiAgICAgICAgY29uc3QgZm9ybTogRm9ybSA9IG5ldyBGb3JtKHRoaXMucGF0aFNlcnZpY2UsIHRoaXMpO1xyXG4gICAgICAgIGZvcm0uZm9ybUZ1bmN0aW9uID0gbmV3IEZvcm1GdW5jdGlvbigpO1xyXG4gICAgICAgIGZvcm0uZm9ybUZ1bmN0aW9uLnNhdmUgPSAoZGF0YTogYW55KSA9PiB7XHJcbiAgICAgICAgICAgIHRoaXMuY2xvc2VDdXJyZW50Rm9ybSgpO1xyXG4gICAgICAgICAgICB0aGlzLnJlZnJlc2hDdXJyZW50UGFnZSgpO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgZm9ybS5mb3JtRnVuY3Rpb24uY2FuY2VsID0gKCkgPT4ge1xyXG4gICAgICAgICAgICB0aGlzLmNsb3NlQ3VycmVudEZvcm0oKTtcclxuICAgICAgICB9O1xyXG4gICAgICAgIGNvbnN0IG1lc3NhZ2U6IFRleHRGaWVsZCA9IG5ldyBUZXh0RmllbGQoZm9ybSwgdGhpcy50cmFuc2xhdGlvblNlcnZpY2UpO1xyXG4gICAgICAgIG1lc3NhZ2UudHlwZSA9IFwibGFiZWxcIjtcclxuICAgICAgICBtZXNzYWdlLnZpc2libGUgPSB0cnVlO1xyXG4gICAgICAgIG1lc3NhZ2UubGFiZWxWaXNpYmxlID0gZmFsc2U7XHJcbiAgICAgICAgbWVzc2FnZS5zZXRWYWx1ZSh0ZXh0KTtcclxuICAgICAgICBmb3JtLmZpZWxkcy5wdXNoKG1lc3NhZ2UpO1xyXG5cclxuICAgICAgICBjb25zdCBjYW5jZWxCdXR0b246IENhbmNlbEJ1dHRvbiA9IG5ldyBDYW5jZWxCdXR0b24oZm9ybSwgdGhpcy50cmFuc2xhdGlvblNlcnZpY2UpO1xyXG4gICAgICAgIGNhbmNlbEJ1dHRvbi50eXBlID0gXCJjYW5jZWxCdXR0b25cIjtcclxuICAgICAgICBjYW5jZWxCdXR0b24ubmFtZSA9IHRoaXMudHJhbnNsYXRpb25TZXJ2aWNlLmdldFRleHQoXCJDYW5jZWxcIik7XHJcbiAgICAgICAgY2FuY2VsQnV0dG9uLnZpc2libGUgPSB0cnVlO1xyXG4gICAgICAgIGZvcm0uZmllbGRzLnB1c2goY2FuY2VsQnV0dG9uKTtcclxuXHJcbiAgICAgICAgY29uc3Qgb2tCdXR0b246IE9rQnV0dG9uID0gbmV3IE9rQnV0dG9uKGZvcm0sIHRoaXMudHJhbnNsYXRpb25TZXJ2aWNlKTtcclxuICAgICAgICBva0J1dHRvbi50eXBlID0gXCJva0J1dHRvblwiO1xyXG4gICAgICAgIG9rQnV0dG9uLm5hbWUgPSB0aGlzLnRyYW5zbGF0aW9uU2VydmljZS5nZXRUZXh0KFwiT2tcIik7XHJcbiAgICAgICAgb2tCdXR0b24udmlzaWJsZSA9IHRydWU7XHJcbiAgICAgICAgb2tCdXR0b24uaGFuZGxlciA9IHtcclxuICAgICAgICAgICAgZG9DbGljayhidXR0b246IElCdXR0b24pIHtcclxuICAgICAgICAgICAgICAgIHllc0hhbmRsZXIoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH07XHJcbiAgICAgICAgZm9ybS5maWVsZHMucHVzaChva0J1dHRvbik7XHJcblxyXG4gICAgICAgIGZvcm0udXBkYXRlUm93cygpO1xyXG4gICAgICAgIHRoaXMuX2Zvcm1TdGFjay5wdXNoKGZvcm0pO1xyXG4gICAgfVxyXG5cclxuICAgIHByb3RlY3RlZCBnZXRDdXN0b21Db21wb25lbnRDbGFzcyhjb21wb25lbnRUeXBlOiBzdHJpbmcpOiBUeXBlPEN1c3RvbVBhZ2VFbGVtZW50PiB7XHJcbiAgICAgICAgY29uc29sZS5sb2coXCJQbGVhc2UgZGVmaW5lIGEgdHlwZSBtYXBwaW5nIGZvciBcIiArIGNvbXBvbmVudFR5cGUgKyBcIiBpbiB5b3VyIEFwcC1Db21wb25lbnQuXCIpO1xyXG4gICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBzZXRDdXJyZW50UGFnZShwYWdlSWQ6IHN0cmluZywgcGFyZW50UGFnZUVsZW1lbnQ6IFBhZ2VFbGVtZW50KSB7XHJcbiAgICAgICAgbGV0IHBhZ2U6IFBhZ2UgPSBudWxsO1xyXG5cclxuICAgICAgICBmb3IgKGNvbnN0IG1vZGVsUGFnZSBvZiB0aGlzLmdldEd1aU1vZGVsKCkuYXBwbGljYXRpb24ucGFnZUxpc3QpIHtcclxuICAgICAgICAgICAgaWYgKG1vZGVsUGFnZS5pZCA9PT0gcGFnZUlkKSB7XHJcbiAgICAgICAgICAgICAgICBwYWdlID0gbmV3IFBhZ2UocGFyZW50UGFnZUVsZW1lbnQpO1xyXG4gICAgICAgICAgICAgICAgcGFnZS5pZCA9IHBhZ2VJZDtcclxuICAgICAgICAgICAgICAgIHBhZ2UubmFtZSA9IHRoaXMudHJhbnNsYXRpb25TZXJ2aWNlLmdldFRleHQobW9kZWxQYWdlLm5hbWUpO1xyXG4gICAgICAgICAgICAgICAgaWYgKHBhcmVudFBhZ2VFbGVtZW50ICE9IG51bGwpIHtcclxuICAgICAgICAgICAgICAgICAgICBwYWdlLm5hbWUgPSBwYXJlbnRQYWdlRWxlbWVudC5uYW1lO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZm9yIChjb25zdCBtb2RlbEVsZW1lbnQgb2YgbW9kZWxQYWdlLmVsZW1lbnRMaXN0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jcmVhdGVQYWdlRWxlbWVudChtb2RlbEVsZW1lbnQsIHBhcmVudFBhZ2VFbGVtZW50LCBwYWdlKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKHBhZ2UgPT0gbnVsbCAmJiBwYWdlSWQgIT0gbnVsbCkge1xyXG4gICAgICAgICAgICB0aGlzLnBhdGhTZXJ2aWNlLmFkZEFsZXJ0KFwiTWlzc2luZyBwYWdlXCIsIHBhZ2VJZCk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgdGhpcy5fcGFnZVN0YWNrLnB1c2gocGFnZSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBjcmVhdGVQYWdlRWxlbWVudChtb2RlbEVsZW1lbnQsIHBhcmVudFBhZ2VFbGVtZW50OiBQYWdlRWxlbWVudCwgcGFnZTogUGFnZSk6IFBhZ2VFbGVtZW50W10ge1xyXG4gICAgICAgIGNvbnN0IGVsZW1lbnRzOiBQYWdlRWxlbWVudFtdID0gW107XHJcbiAgICAgICAgc3dpdGNoIChtb2RlbEVsZW1lbnQudHlwZSkge1xyXG4gICAgICAgICAgICBjYXNlIFwiYnV0dG9uXCI6XHJcbiAgICAgICAgICAgIGNhc2UgXCJuZXdCdXR0b25cIjpcclxuICAgICAgICAgICAgICAgIGNvbnN0IGJ1dHRvbiA9IG5ldyBCdXR0b24odGhpcywgdGhpcy5wYXRoU2VydmljZSwgdGhpcy50cmFuc2xhdGlvblNlcnZpY2UpO1xyXG4gICAgICAgICAgICAgICAgYnV0dG9uLnBhcmVudFBhZ2VFbGVtZW50ID0gcGFyZW50UGFnZUVsZW1lbnQ7XHJcbiAgICAgICAgICAgICAgICBidXR0b24uZnJvbUpzb24obW9kZWxFbGVtZW50KTtcclxuICAgICAgICAgICAgICAgIGlmIChtb2RlbEVsZW1lbnRbXCJidXR0b25oYW5kbGVyXCJdICE9IG51bGwpIHtcclxuICAgICAgICAgICAgICAgICAgICAoPEJ1dHRvbj5idXR0b24pLmhhbmRsZXIgPSBuZXcgKHRoaXMuZ2V0SGFuZGxlcnMoKVttb2RlbEVsZW1lbnRbXCJidXR0b25oYW5kbGVyXCJdXSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbGVtZW50cy5wdXNoKHRoaXMud3JhcFNpbmdsZUJ1dHRvbihidXR0b24pKTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlIFwiZGVsZXRlQnV0dG9uXCI6XHJcbiAgICAgICAgICAgICAgICBjb25zdCBkZWxldGVCdXR0b24gPSBuZXcgUGFnZURlbGV0ZUJ1dHRvbih0aGlzLCB0aGlzLnBhdGhTZXJ2aWNlLCB0aGlzLnRyYW5zbGF0aW9uU2VydmljZSk7XHJcbiAgICAgICAgICAgICAgICBkZWxldGVCdXR0b24ucGFyZW50UGFnZUVsZW1lbnQgPSBwYXJlbnRQYWdlRWxlbWVudDtcclxuICAgICAgICAgICAgICAgIGRlbGV0ZUJ1dHRvbi5mcm9tSnNvbihtb2RlbEVsZW1lbnQpO1xyXG4gICAgICAgICAgICAgICAgZWxlbWVudHMucHVzaCh0aGlzLndyYXBTaW5nbGVCdXR0b24oZGVsZXRlQnV0dG9uKSk7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgY2FzZSBcImRvd25sb2FkQnV0dG9uXCI6IC8vIGRlcHJlY2F0ZWRcclxuICAgICAgICAgICAgY2FzZSBcImxpbmtCdXR0b25cIjpcclxuICAgICAgICAgICAgICAgIGNvbnN0IGxpbmtCdXR0b24gPSBuZXcgTGlua0J1dHRvbih0aGlzLCB0aGlzLnBhdGhTZXJ2aWNlLCB0aGlzLnRyYW5zbGF0aW9uU2VydmljZSk7XHJcbiAgICAgICAgICAgICAgICBsaW5rQnV0dG9uLnBhcmVudFBhZ2VFbGVtZW50ID0gcGFyZW50UGFnZUVsZW1lbnQ7XHJcbiAgICAgICAgICAgICAgICBsaW5rQnV0dG9uLmZyb21Kc29uKG1vZGVsRWxlbWVudCk7XHJcbiAgICAgICAgICAgICAgICBlbGVtZW50cy5wdXNoKHRoaXMud3JhcFNpbmdsZUJ1dHRvbihsaW5rQnV0dG9uKSk7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgY2FzZSBcImJhY2tidXR0b25cIjpcclxuICAgICAgICAgICAgICAgIGNvbnN0IGJhY2tCdXR0b24gPSBuZXcgQmFja0J1dHRvbih0aGlzLCB0aGlzLnBhdGhTZXJ2aWNlLCB0aGlzLnRyYW5zbGF0aW9uU2VydmljZSk7XHJcbiAgICAgICAgICAgICAgICBiYWNrQnV0dG9uLmZyb21Kc29uKG1vZGVsRWxlbWVudCk7XHJcbiAgICAgICAgICAgICAgICBlbGVtZW50cy5wdXNoKHRoaXMud3JhcFNpbmdsZUJ1dHRvbihiYWNrQnV0dG9uKSk7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgY2FzZSBcImlubGluZUZvcm1cIjpcclxuICAgICAgICAgICAgICAgIGNvbnN0IGlubGluZUZvcm0gPSBuZXcgSW5saW5lRm9ybSh0aGlzLCB0aGlzLnBhdGhTZXJ2aWNlLCB0aGlzLnRyYW5zbGF0aW9uU2VydmljZSk7XHJcbiAgICAgICAgICAgICAgICBpbmxpbmVGb3JtLmZyb21Kc29uKG1vZGVsRWxlbWVudCk7XHJcbiAgICAgICAgICAgICAgICBpbmxpbmVGb3JtLnVybCA9IEtleVV0aWxpdHkudHJhbnNsYXRlVXJsKG1vZGVsRWxlbWVudFtcInVybFwiXSwgaW5saW5lRm9ybS5nZXRLZXkoKSwgdHJ1ZSwgcGFyZW50UGFnZUVsZW1lbnQpO1xyXG4gICAgICAgICAgICAgICAgaW5saW5lRm9ybS5sb2FkTmV4dEZvcm0odHJ1ZSk7XHJcbiAgICAgICAgICAgICAgICBlbGVtZW50cy5wdXNoKGlubGluZUZvcm0pO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgXCJsaXN0XCI6XHJcbiAgICAgICAgICAgICAgICBjb25zdCBkeW5hbWljTGlzdDogTGlzdCA9IG5ldyBMaXN0KHRoaXMsIHRoaXMucGF0aFNlcnZpY2UsIHRoaXMudHJhbnNsYXRpb25TZXJ2aWNlKTtcclxuICAgICAgICAgICAgICAgIGR5bmFtaWNMaXN0LnBhcmVudFBhZ2VFbGVtZW50ID0gcGFyZW50UGFnZUVsZW1lbnQ7XHJcbiAgICAgICAgICAgICAgICBkeW5hbWljTGlzdC5mcm9tSnNvbihtb2RlbEVsZW1lbnQpO1xyXG4gICAgICAgICAgICAgICAgLy8gaGFuZGxlclxyXG4gICAgICAgICAgICAgICAgaWYgKG1vZGVsRWxlbWVudFtcImhhbmRsZXJcIl0gIT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGR5bmFtaWNMaXN0LmhhbmRsZXIgPSBuZXcgKHRoaXMuZ2V0SGFuZGxlcnMoKVttb2RlbEVsZW1lbnRbXCJoYW5kbGVyXCJdXSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpZiAobW9kZWxFbGVtZW50W1wiYnV0dG9uaGFuZGxlclwiXSAhPSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZHluYW1pY0xpc3QuYnV0dG9uSGFuZGxlciA9IG5ldyAodGhpcy5nZXRIYW5kbGVycygpW21vZGVsRWxlbWVudFtcImJ1dHRvbmhhbmRsZXJcIl1dKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmICghZHluYW1pY0xpc3Quc2VhcmNoUmVxdWlyZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICBkeW5hbWljTGlzdC5yZWZyZXNoKG51bGwsIG51bGwpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxlbWVudHMucHVzaChkeW5hbWljTGlzdCk7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgY2FzZSBcIkNoYXJ0RWxlbWVudFwiOlxyXG4gICAgICAgICAgICAgICAgY29uc3QgY2hhcnQgPSBuZXcgQ2hhcnRFbGVtZW50KHRoaXMsIHRoaXMucGF0aFNlcnZpY2UsIHRoaXMudHJhbnNsYXRpb25TZXJ2aWNlKTtcclxuICAgICAgICAgICAgICAgIGNoYXJ0LmZyb21Kc29uKG1vZGVsRWxlbWVudCk7XHJcbiAgICAgICAgICAgICAgICBjaGFydC51cmwgPSBLZXlVdGlsaXR5LnRyYW5zbGF0ZVVybChtb2RlbEVsZW1lbnRbXCJ1cmxcIl0sIG51bGwsIGZhbHNlLCBwYXJlbnRQYWdlRWxlbWVudCk7XHJcbiAgICAgICAgICAgICAgICBlbGVtZW50cy5wdXNoKGNoYXJ0KTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlIFwicGFnZUxhYmVsXCI6XHJcbiAgICAgICAgICAgICAgICBjb25zdCBwYWdlTGFiZWwgPSBuZXcgUGFnZUxhYmVsKHRoaXMsIHRoaXMucGF0aFNlcnZpY2UsIHRoaXMudHJhbnNsYXRpb25TZXJ2aWNlKTtcclxuICAgICAgICAgICAgICAgIHBhZ2VMYWJlbC5mcm9tSnNvbihtb2RlbEVsZW1lbnQpO1xyXG4gICAgICAgICAgICAgICAgZWxlbWVudHMucHVzaChwYWdlTGFiZWwpO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgXCJlbGVtZW50TGlzdFwiOlxyXG4gICAgICAgICAgICAgICAgY29uc3QgZWxlbWVudExpc3QgPSBuZXcgRWxlbWVudExpc3QodGhpcywgdGhpcy5wYXRoU2VydmljZSwgdGhpcy50cmFuc2xhdGlvblNlcnZpY2UpO1xyXG4gICAgICAgICAgICAgICAgZWxlbWVudExpc3QuZnJvbUpzb24obW9kZWxFbGVtZW50KTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGVsZW1lbnRMaXN0VXJsOiBhbnkgPSBLZXlVdGlsaXR5LnRyYW5zbGF0ZVVybChtb2RlbEVsZW1lbnRbXCJ1cmxcIl0sIG51bGwsIGZhbHNlLCBwYXJlbnRQYWdlRWxlbWVudCk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnBhdGhTZXJ2aWNlLnNlcnZlckdldCh0aGlzLmdldEJhY2tlbmRVcmwoKSwgZWxlbWVudExpc3RVcmwsIChkYXRhOiBhbnkpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IGR5bmFtaWNFbGVtZW50IG9mIGRhdGEpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZWxlbWVudHMucHVzaCguLi50aGlzLmNyZWF0ZVBhZ2VFbGVtZW50KGR5bmFtaWNFbGVtZW50LCBwYXJlbnRQYWdlRWxlbWVudCwgcGFnZSkpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0sIG51bGwpO1xyXG4gICAgICAgICAgICAgICAgZWxlbWVudHMucHVzaChlbGVtZW50TGlzdCk7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgY2FzZSBcImJ1dHRvbkdyb3VwXCI6XHJcbiAgICAgICAgICAgICAgICBjb25zdCBidXR0b25Hcm91cCA9IG5ldyBCdXR0b25Hcm91cCh0aGlzKTtcclxuICAgICAgICAgICAgICAgIGJ1dHRvbkdyb3VwLmZyb21Kc29uKG1vZGVsRWxlbWVudCk7XHJcbiAgICAgICAgICAgICAgICBpZiAobW9kZWxFbGVtZW50W1wiYnV0dG9uc1wiXSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGZvciAoY29uc3QgYnV0dG9uSXRlbSBvZiBtb2RlbEVsZW1lbnRbXCJidXR0b25zXCJdKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGJ1dHRvbkdyb3VwczogQnV0dG9uR3JvdXBbXSA9IDxCdXR0b25Hcm91cFtdPnRoaXMuY3JlYXRlUGFnZUVsZW1lbnQoYnV0dG9uSXRlbSwgcGFyZW50UGFnZUVsZW1lbnQsIG51bGwpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoYnV0dG9uR3JvdXBzLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAoY29uc3QgaXRlbSBvZiBidXR0b25Hcm91cHNbMF0uYnV0dG9ucykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJ1dHRvbkdyb3VwLmFkZEJ1dHRvbihpdGVtKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBidXR0b25Hcm91cC51cGRhdGVCdXR0b25Cb3JkZXJzKCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbGVtZW50cy5wdXNoKGJ1dHRvbkdyb3VwKTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlIFwiYnJlYWRjcnVtYlwiOlxyXG4gICAgICAgICAgICAgICAgY29uc3QgYnJlYWRjcnVtYiA9IG5ldyBCcmVhZGNydW1iKHRoaXMpO1xyXG4gICAgICAgICAgICAgICAgYnJlYWRjcnVtYi5mcm9tSnNvbihtb2RlbEVsZW1lbnQpO1xyXG4gICAgICAgICAgICAgICAgZWxlbWVudHMucHVzaChicmVhZGNydW1iKTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBkZWZhdWx0OiB7XHJcbiAgICAgICAgICAgICAgICAvLyBjYWxsIG1ldGhvZCB0byBnZXQgY3VzdG9tIGNvbXBvbmVudCBjbGFzc1xyXG4gICAgICAgICAgICAgICAgY29uc3QgY3VzdG9tQ29udGFpbmVyUGFnZUVsZW1lbnQgPSBuZXcgQ3VzdG9tQ29udGFpbmVyUGFnZUVsZW1lbnQodGhpcyk7XHJcbiAgICAgICAgICAgICAgICBjdXN0b21Db250YWluZXJQYWdlRWxlbWVudC5mcm9tSnNvbihtb2RlbEVsZW1lbnQpO1xyXG4gICAgICAgICAgICAgICAgY3VzdG9tQ29udGFpbmVyUGFnZUVsZW1lbnQudHlwZUNsYXNzID0gdGhpcy5nZXRDdXN0b21Db21wb25lbnRDbGFzcyhtb2RlbEVsZW1lbnQudHlwZSk7XHJcbiAgICAgICAgICAgICAgICBlbGVtZW50cy5wdXNoKGN1c3RvbUNvbnRhaW5lclBhZ2VFbGVtZW50KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBmb3IgKGNvbnN0IGVsZW1lbnQgb2YgZWxlbWVudHMpIHtcclxuICAgICAgICAgICAgaWYgKG1vZGVsRWxlbWVudFtcInBlcm1pc3Npb25VcmxcIl0gIT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgZWxlbWVudC52aXNpYmxlID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBwZXJtaXNzaW9uVXJsOiBzdHJpbmcgPSBLZXlVdGlsaXR5LnRyYW5zbGF0ZVVybChtb2RlbEVsZW1lbnRbXCJwZXJtaXNzaW9uVXJsXCJdLCBudWxsLCBmYWxzZSwgcGFyZW50UGFnZUVsZW1lbnQpO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgcGVybWlzc2lvbkhhbmRsZXIgPSAocGVybWlzc2lvbkVsZW1lbnQ6IFBhZ2VFbGVtZW50KSA9PiAoZGF0YTogYW55KSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgcGVybWlzc2lvbkVsZW1lbnQudmlzaWJsZSA9IGRhdGFbXCJwZXJtaXNzaW9uXCJdO1xyXG4gICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgIHRoaXMucGF0aFNlcnZpY2Uuc2VydmVyR2V0KHRoaXMuZ2V0QmFja2VuZFVybCgpLCBwZXJtaXNzaW9uVXJsLCBwZXJtaXNzaW9uSGFuZGxlcihlbGVtZW50KSwgbnVsbCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKCFlbGVtZW50LnR5cGUpIHtcclxuICAgICAgICAgICAgICAgIGVsZW1lbnQudHlwZSA9IG1vZGVsRWxlbWVudC50eXBlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsZW1lbnQucGFyZW50UGFnZUVsZW1lbnQgPSBwYXJlbnRQYWdlRWxlbWVudDtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHBhZ2UgJiYgZWxlbWVudHMpIHtcclxuICAgICAgICAgICAgcGFnZS5jb250ZW50LnB1c2goLi4uZWxlbWVudHMpO1xyXG4gICAgICAgICAgICBwYWdlLnVwZGF0ZVJvd3MoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIGVsZW1lbnRzO1xyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgd3JhcFNpbmdsZUJ1dHRvbihidXR0b246IEJ1dHRvbik6IEJ1dHRvbkdyb3VwIHtcclxuICAgICAgICBjb25zdCBidXR0b25Hcm91cCA9IG5ldyBCdXR0b25Hcm91cCh0aGlzKTtcclxuICAgICAgICBidXR0b25Hcm91cC50eXBlID0gXCJidXR0b25Hcm91cFwiO1xyXG4gICAgICAgIGJ1dHRvbkdyb3VwLmFkZEJ1dHRvbihidXR0b24pO1xyXG4gICAgICAgIGJ1dHRvbkdyb3VwLnVwZGF0ZUJ1dHRvbkJvcmRlcnMoKTtcclxuICAgICAgICBidXR0b25Hcm91cC5uZXdSb3cgPSBidXR0b24ubmV3Um93O1xyXG4gICAgICAgIHJldHVybiBidXR0b25Hcm91cDtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgc2V0Q3VycmVudEZvcm0oZm9ybUlkOiBzdHJpbmcsIGtleTogS2V5LCBoYW5kbGVyOiBzdHJpbmcsIHBhcmVudFBhZ2VFbGVtZW50OiBJUGFnZUVsZW1lbnQpIHtcclxuICAgICAgICBjb25zdCBzZXRDdXJyZW50Rm9ybSA9ICgpID0+IHtcclxuICAgICAgICAgICAgLy8gYnVpbGQgZm9ybSBmdW5jdGlvblxyXG4gICAgICAgICAgICBjb25zdCBmb3JtRnVuY3Rpb246IEZvcm1GdW5jdGlvbiA9IG5ldyBGb3JtRnVuY3Rpb24oKTtcclxuICAgICAgICAgICAgZm9ybUZ1bmN0aW9uLnNhdmUgPSAoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmNsb3NlQ3VycmVudEZvcm0oKTtcclxuICAgICAgICAgICAgICAgIHRoaXMucmVmcmVzaEN1cnJlbnRQYWdlKCk7XHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIGZvcm1GdW5jdGlvbi5jYW5jZWwgPSAoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmNsb3NlQ3VycmVudEZvcm0oKTtcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgZm9ybUZ1bmN0aW9uLmRlbGV0ZSA9ICgpID0+IHtcclxuICAgICAgICAgICAgICAgIHRoaXMuY2xvc2VDdXJyZW50Rm9ybSgpO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgcGFyZW50OiBJUGFnZUVsZW1lbnQgPSBwYXJlbnRQYWdlRWxlbWVudDtcclxuICAgICAgICAgICAgICAgIGlmIChwYXJlbnQgIT0gbnVsbCAmJiBwYXJlbnQgaW5zdGFuY2VvZiBQYWdlRWxlbWVudCAmJiAoPFBhZ2VFbGVtZW50PnBhcmVudCkubGlzdEVsZW1lbnQpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnJlZnJlc2hDdXJyZW50UGFnZSgpO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLm5hdmlnYXRlQmFjaygpO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMucmVmcmVzaEN1cnJlbnRQYWdlKCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIGNvbnN0IGZvcm06IEZvcm0gPSB0aGlzLmNyZWF0ZUZvcm0oZm9ybUlkLCBrZXksIGhhbmRsZXIsIGZvcm1GdW5jdGlvbiwgcGFyZW50UGFnZUVsZW1lbnQpO1xyXG4gICAgICAgICAgICBpZiAoZm9ybSAhPSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9mb3JtU3RhY2sucHVzaChmb3JtKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIC8vIGNoZWNrIHBlcm1pc3Npb25cclxuICAgICAgICBjb25zdCBtb2RlbEZvcm0gPSB0aGlzLmdldE1vZGVsRm9ybShmb3JtSWQpO1xyXG4gICAgICAgIGlmIChtb2RlbEZvcm0gIT0gbnVsbCAmJiBtb2RlbEZvcm1bXCJwZXJtaXNzaW9uVXJsXCJdICE9IG51bGwpIHtcclxuICAgICAgICAgICAgbGV0IHN1ZmZpeCA9IFwiL3VwZGF0ZVwiO1xyXG4gICAgICAgICAgICBpZiAoa2V5ID09IG51bGwpIHtcclxuICAgICAgICAgICAgICAgIHN1ZmZpeCA9IFwiL2NyZWF0ZVwiO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGNvbnN0IHBlcm1pc3Npb25Vcmw6IHN0cmluZyA9IEtleVV0aWxpdHkudHJhbnNsYXRlVXJsKG1vZGVsRm9ybVtcInBlcm1pc3Npb25VcmxcIl0gKyBzdWZmaXgsIGtleSwgZmFsc2UsIHBhcmVudFBhZ2VFbGVtZW50KTtcclxuICAgICAgICAgICAgdGhpcy5wYXRoU2VydmljZS5zZXJ2ZXJHZXQodGhpcy5nZXRCYWNrZW5kVXJsKCksIHBlcm1pc3Npb25VcmwsIChkYXRhOiBhbnkpID0+IHtcclxuICAgICAgICAgICAgICAgIGlmICghZGF0YVtcInBlcm1pc3Npb25cIl0pIHtcclxuICAgICAgICAgICAgICAgICAgICB3aW5kb3cuYWxlcnQodGhpcy50cmFuc2xhdGlvblNlcnZpY2UuZ2V0VGV4dChcIk5vUGVybWlzc2lvbkVycm9yXCIpKTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgc2V0Q3VycmVudEZvcm0oKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSwgbnVsbCk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgc2V0Q3VycmVudEZvcm0oKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBnZXRNb2RlbEZvcm0oZm9ybUlkOiBzdHJpbmcpIHtcclxuICAgICAgICBsZXQgcmVzdWx0ID0gbnVsbDtcclxuICAgICAgICBmb3IgKGNvbnN0IG1vZGVsRm9ybSBvZiB0aGlzLmdldEd1aU1vZGVsKCkuYXBwbGljYXRpb24uZm9ybUxpc3QpIHtcclxuICAgICAgICAgICAgaWYgKG1vZGVsRm9ybS5pZCA9PT0gZm9ybUlkKSB7XHJcbiAgICAgICAgICAgICAgICByZXN1bHQgPSBtb2RlbEZvcm07XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHJlc3VsdCA9PSBudWxsICYmIGZvcm1JZCAhPSBudWxsKSB7XHJcbiAgICAgICAgICAgIHRoaXMucGF0aFNlcnZpY2UuYWRkQWxlcnQoXCJNaXNzaW5nIGZvcm1cIiwgZm9ybUlkKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgY3JlYXRlRm9ybShmb3JtSWQ6IHN0cmluZyxcclxuICAgICAgICAgICAgICAgICAgICAgIGtleTogS2V5LCBoYW5kbGVyOiBzdHJpbmcsXHJcbiAgICAgICAgICAgICAgICAgICAgICBmb3JtRnVuY3Rpb246IEZvcm1GdW5jdGlvbixcclxuICAgICAgICAgICAgICAgICAgICAgIHBhcmVudFBhZ2VFbGVtZW50OiBJUGFnZUVsZW1lbnQpOiBGb3JtIHtcclxuICAgICAgICBsZXQgZm9ybTogRm9ybSA9IG51bGw7XHJcbiAgICAgICAgY29uc3QgbW9kZWxGb3JtID0gdGhpcy5nZXRNb2RlbEZvcm0oZm9ybUlkKTtcclxuICAgICAgICBpZiAobW9kZWxGb3JtICE9IG51bGwpIHtcclxuICAgICAgICAgICAgLy8gY3JlYXRlIGZvcm1cclxuICAgICAgICAgICAgZm9ybSA9IG5ldyBGb3JtKHRoaXMucGF0aFNlcnZpY2UsIHRoaXMpO1xyXG4gICAgICAgICAgICBmb3JtLmZyb21Kc29uKG1vZGVsRm9ybSk7XHJcbiAgICAgICAgICAgIGZvcm0ua2V5ID0ga2V5O1xyXG4gICAgICAgICAgICBmb3JtLmZvcm1GdW5jdGlvbiA9IGZvcm1GdW5jdGlvbjtcclxuICAgICAgICAgICAgZm9ybS50aXRsZSA9IHRoaXMudHJhbnNsYXRpb25TZXJ2aWNlLmdldFRleHQobW9kZWxGb3JtLnRpdGxlKTtcclxuICAgICAgICAgICAgZm9yIChjb25zdCBtb2RlbEZvcm1GaWVsZCBvZiBtb2RlbEZvcm0uZm9ybUZpZWxkTGlzdCkge1xyXG4gICAgICAgICAgICAgICAgLy8gY3JlYXRlIGZvcm0gZmllbGRcclxuICAgICAgICAgICAgICAgIGNvbnN0IGZvcm1GaWVsZCA9IHRoaXMuY3JlYXRlRm9ybUZpZWxkKG1vZGVsRm9ybUZpZWxkLCBmb3JtLCBwYXJlbnRQYWdlRWxlbWVudCk7XHJcbiAgICAgICAgICAgICAgICBmb3JtLmZpZWxkcy5wdXNoKGZvcm1GaWVsZCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZm9ybS51cGRhdGVSb3dzKCk7XHJcblxyXG4gICAgICAgICAgICAvLyBmZXRjaCBkYXRhIGZyb20gYmFja2VuZFxyXG4gICAgICAgICAgICBpZiAoZm9ybS51cmwgJiYgZm9ybS5rZXkpIHtcclxuICAgICAgICAgICAgICAgIC8vIGJ1dHRvbiBzZXQgYSBrZXkgb24gZm9ybSwgdXBkYXRlIG1vZGUsIGlnbm9yZSB1cmxEZWZhdWx0c1xyXG4gICAgICAgICAgICAgICAgdGhpcy5wb3B1bGF0ZUZvcm0oZm9ybSwgZm9ybS5nZXRLZXkoKSwgcGFyZW50UGFnZUVsZW1lbnQpO1xyXG4gICAgICAgICAgICB9IGVsc2UgaWYgKGZvcm0udXJsRGVmYXVsdHMpIHtcclxuICAgICAgICAgICAgICAgIC8vIG5vIGtleSwgY3JlYXRlIG1vZGVcclxuICAgICAgICAgICAgICAgIGNvbnN0IG51bGxLZXkgPSBuZXcgS2V5KFwibnVsbFwiLCBcIm51bGxLZXlcIik7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnBvcHVsYXRlRm9ybShmb3JtLCBudWxsS2V5LCBwYXJlbnRQYWdlRWxlbWVudCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKGZvcm0udXJsKSB7XHJcbiAgICAgICAgICAgICAgICBmb3JtLnVybCA9IEtleVV0aWxpdHkudHJhbnNsYXRlVXJsKGZvcm0udXJsLCBrZXksIHRydWUsIHBhcmVudFBhZ2VFbGVtZW50KTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgLy8gZXhlY3V0ZSBoYW5kbGVyXHJcbiAgICAgICAgICAgIGxldCBoYW5kbGVyTmFtZSA9IGhhbmRsZXI7XHJcbiAgICAgICAgICAgIGlmIChoYW5kbGVyTmFtZSA9PSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICBoYW5kbGVyTmFtZSA9IGZvcm1JZCArIFwiSGFuZGxlclwiO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmICh0aGlzLmdldEJlYW5zKClbZm9ybUlkXSAhPSBudWxsICYmIHRoaXMuZ2V0SGFuZGxlcnMoKVtoYW5kbGVyTmFtZV0gIT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgZm9ybUJlYW46IElGb3JtID0gbmV3ICh0aGlzLmdldEJlYW5zKClbZm9ybUlkXSk7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBmb3JtSGFuZGxlcjogSUZvcm1IYW5kbGVyID0gbmV3ICh0aGlzLmdldEhhbmRsZXJzKClbaGFuZGxlck5hbWVdKTtcclxuICAgICAgICAgICAgICAgIGZvciAobGV0IGEgPSAwOyBhIDwgZm9ybS5maWVsZHMubGVuZ3RoOyBhKyspIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoZm9ybS5maWVsZHNbYV0uaWQgIT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBmb3JtQmVhbltmb3JtLmZpZWxkc1thXS5pZF0gPSBmb3JtLmZpZWxkc1thXTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBmb3JtLmJlYW4gPSBmb3JtQmVhbjtcclxuICAgICAgICAgICAgICAgIGZvcm1IYW5kbGVyLmRvTG9hZChmb3JtLmJlYW4pO1xyXG4gICAgICAgICAgICAgICAgZm9ybS5oYW5kbGVyID0gZm9ybUhhbmRsZXI7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIGZvcm07XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBwb3B1bGF0ZUZvcm0oZm9ybTogRm9ybSwga2V5OiBLZXksIHBhcmVudFBhZ2VFbGVtZW50OiBJUGFnZUVsZW1lbnQpIHtcclxuICAgICAgICBjb25zdCB1cmwgPSBLZXlVdGlsaXR5LnRyYW5zbGF0ZVVybChmb3JtLnVybCwga2V5LCB0cnVlLCBwYXJlbnRQYWdlRWxlbWVudCk7XHJcbiAgICAgICAgdGhpcy5wYXRoU2VydmljZS5zZXJ2ZXJHZXQodGhpcy5nZXRCYWNrZW5kVXJsKCksIHVybCwgKGRhdGE6IGFueSkgPT4ge1xyXG4gICAgICAgICAgICBmb3IgKGNvbnN0IGZpZWxkIG9mIGZvcm0uZmllbGRzKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoZGF0YVtmaWVsZC5pZF0gIT0gbnVsbCAmJiBmaWVsZCBpbnN0YW5jZW9mIFZhbHVlRmllbGQpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoZmllbGQgaW5zdGFuY2VvZiBSYWRpb0dyb3VwRmllbGQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gVE9ETyBnZW5lcmFsIHNvbHV0aW9uXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHNldFZhbHVlT2ZSYWRpb0dyb3VwRmllbGRDb250ZXh0V3JhcHBlciA9ICgpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGY6IFJhZGlvR3JvdXBGaWVsZCA9IDxSYWRpb0dyb3VwRmllbGQ+ZmllbGQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCB2OiBhbnkgPSBkYXRhW2ZpZWxkLmlkXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vbm9pbnNwZWN0aW9uIFR5cGVTY3JpcHRVbnJlc29sdmVkRnVuY3Rpb25cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNldFZhbHVlT2ZSYWRpb0dyb3VwRmllbGQoZiwgdik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHNldFZhbHVlT2ZSYWRpb0dyb3VwRmllbGQgPSAocmFkaW9Hcm91cEZpZWxkOiBSYWRpb0dyb3VwRmllbGQsIHZhbHVlOiBhbnkpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghcmFkaW9Hcm91cEZpZWxkLmNyZWF0ZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcIldhaXRpbmcgZm9yIFJhZGlvR3JvdXBGaWVsZCBcIiArIHJhZGlvR3JvdXBGaWVsZC5pZCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2cocmFkaW9Hcm91cEZpZWxkLmNyZWF0ZWQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdpbmRvdy5zZXRUaW1lb3V0KHNldFZhbHVlT2ZSYWRpb0dyb3VwRmllbGRDb250ZXh0V3JhcHBlciwgNTApOyAvLyB3YWl0IHRoZW4gdHJ5IGFnYWluXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coXCJzZXR0aW5nIHJhZGlvZ3JvdXBmaWVsZCB2YWx1ZVwiKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh2YWx1ZSAhPSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWUgPSB2YWx1ZS50b1N0cmluZygpOyAvLyBmb3JjZSByYWRpbyBrZXkgdHlwZSBzdHJpbmcgZm9yIGFuZ3VsYXIyXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByYWRpb0dyb3VwRmllbGQuc2V0VmFsdWUodmFsdWUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmFkaW9Hcm91cEZpZWxkLmlzSW5pdGlhbFZhbHVlU2V0ID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgc2V0VmFsdWVPZlJhZGlvR3JvdXBGaWVsZENvbnRleHRXcmFwcGVyKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgKDxWYWx1ZUZpZWxkPGFueT4+ZmllbGQpLnNldFZhbHVlKGRhdGFbZmllbGQuaWRdKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgKDxWYWx1ZUZpZWxkPGFueT4+ZmllbGQpLmlzSW5pdGlhbFZhbHVlU2V0ID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpZiAoZmllbGQgaW5zdGFuY2VvZiBGaWVsZExpc3RGaWVsZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHNldFZhbHVlT2ZGaWVsZExpc3RGaWVsZENvbnRleHRXcmFwcGVyID0gKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBmOiBGaWVsZExpc3RGaWVsZCA9IDxGaWVsZExpc3RGaWVsZD5maWVsZDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgZDogYW55ID0gZGF0YTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy9ub2luc3BlY3Rpb24gVHlwZVNjcmlwdFVucmVzb2x2ZWRGdW5jdGlvblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBzZXRWYWx1ZU9mRmllbGRMaXN0RmllbGQoZiwgZCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBzZXRWYWx1ZU9mRmllbGRMaXN0RmllbGQgPSAoZmllbGRMaXN0RmllbGQ6IEZpZWxkTGlzdEZpZWxkLCB2YWx1ZTogYW55KSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghKDxGaWVsZExpc3RGaWVsZD5maWVsZCkuY3JlYXRlZCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coXCJXYWl0aW5nIGZvciBGaWVsZExpc3RGaWVsZC4uLiBcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KHNldFZhbHVlT2ZGaWVsZExpc3RGaWVsZENvbnRleHRXcmFwcGVyLCA1MCk7IC8vIHdhaXQgdGhlbiB0cnkgYWdhaW5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyB1cGRhdGUgZmllbGRzXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAoY29uc3Qgc3ViZmllbGQgb2YgKDxGaWVsZExpc3RGaWVsZD5maWVsZCkuc3ViZmllbGRzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoZGF0YVtzdWJmaWVsZC5pZF0gIT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN1YmZpZWxkLnNldFZhbHVlKGRhdGFbc3ViZmllbGQuaWRdKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdWJmaWVsZC5pc0luaXRpYWxWYWx1ZVNldCA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgICAgIHNldFZhbHVlT2ZGaWVsZExpc3RGaWVsZENvbnRleHRXcmFwcGVyKCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9LCBudWxsKTtcclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIGNyZWF0ZUZvcm1GaWVsZChtb2RlbEZvcm1GaWVsZCwgZm9ybTogRm9ybSwgcGFyZW50UGFnZUVsZW1lbnQ6IElQYWdlRWxlbWVudCk6IEZvcm1GaWVsZCB7XHJcbiAgICAgICAgbGV0IGZvcm1GaWVsZDogRm9ybUZpZWxkID0gbnVsbDtcclxuICAgICAgICBzd2l0Y2ggKG1vZGVsRm9ybUZpZWxkLnR5cGUpIHtcclxuICAgICAgICAgICAgY2FzZSBcInRleHRcIjoge1xyXG4gICAgICAgICAgICAgICAgZm9ybUZpZWxkID0gbmV3IFRleHRGaWVsZChmb3JtLCB0aGlzLnRyYW5zbGF0aW9uU2VydmljZSk7XHJcbiAgICAgICAgICAgICAgICBmb3JtRmllbGQuZnJvbUpzb24obW9kZWxGb3JtRmllbGQpO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgY2FzZSBcInRyYW5zbGF0aW9uXCI6IHtcclxuICAgICAgICAgICAgICAgIGZvcm1GaWVsZCA9IG5ldyBUcmFuc2xhdGlvbkZpZWxkKGZvcm0sIHRoaXMucGF0aFNlcnZpY2UsIHRoaXMudHJhbnNsYXRpb25TZXJ2aWNlKTtcclxuICAgICAgICAgICAgICAgIGZvcm1GaWVsZC5mcm9tSnNvbihtb2RlbEZvcm1GaWVsZCk7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBjYXNlIFwibnVtYmVyXCI6IHtcclxuICAgICAgICAgICAgICAgIGZvcm1GaWVsZCA9IG5ldyBOdW1iZXJGaWVsZChmb3JtLCB0aGlzLnRyYW5zbGF0aW9uU2VydmljZSk7XHJcbiAgICAgICAgICAgICAgICBmb3JtRmllbGQuZnJvbUpzb24obW9kZWxGb3JtRmllbGQpO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgY2FzZSBcImxhYmVsXCI6IHtcclxuICAgICAgICAgICAgICAgIGZvcm1GaWVsZCA9IG5ldyBMYWJlbEZpZWxkKGZvcm0sIHRoaXMudHJhbnNsYXRpb25TZXJ2aWNlKTtcclxuICAgICAgICAgICAgICAgIGZvcm1GaWVsZC5mcm9tSnNvbihtb2RlbEZvcm1GaWVsZCk7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBjYXNlIFwiZmllbGRMaXN0XCI6IHtcclxuICAgICAgICAgICAgICAgIGZvcm1GaWVsZCA9IG5ldyBGaWVsZExpc3RGaWVsZChmb3JtLCB0aGlzLnRyYW5zbGF0aW9uU2VydmljZSk7XHJcbiAgICAgICAgICAgICAgICBmb3JtRmllbGQubmFtZSA9IFwibGlzdFwiO1xyXG4gICAgICAgICAgICAgICAgZm9ybUZpZWxkLmZyb21Kc29uKG1vZGVsRm9ybUZpZWxkKTtcclxuICAgICAgICAgICAgICAgIGlmIChtb2RlbEZvcm1GaWVsZFtcInVybFwiXSAhPSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgZmllbGRMaXN0VXJsOiBhbnkgPSBLZXlVdGlsaXR5LnRyYW5zbGF0ZVVybChtb2RlbEZvcm1GaWVsZFtcInVybFwiXSwgZm9ybS5nZXRLZXkoKSwgZmFsc2UsIHBhcmVudFBhZ2VFbGVtZW50KTtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBtb2RlbElkOiBzdHJpbmcgPSBtb2RlbEZvcm1GaWVsZFtcImlkXCJdO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMucGF0aFNlcnZpY2Uuc2VydmVyR2V0KHRoaXMuZ2V0QmFja2VuZFVybCgpLCBmaWVsZExpc3RVcmwsIChkYXRhOiBhbnkpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGNvdW50ZXIgPSAxO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IGl0ZW0gb2YgZGF0YSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgZHluYW1pY0ZpZWxkID0gdGhpcy5jcmVhdGVGb3JtRmllbGQoaXRlbSwgZm9ybSwgcGFyZW50UGFnZUVsZW1lbnQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZHluYW1pY0ZpZWxkLm5hbWUgPSBpdGVtW1wibmFtZVwiXTsgLy8gZG8gbm90IHVzZSB0cmFuc2xhdGlvbiBzZXJ2aWNlXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkeW5hbWljRmllbGQuaWQgPSBtb2RlbElkICsgY291bnRlcjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICg8RmllbGRMaXN0RmllbGQ+Zm9ybUZpZWxkKS5zdWJmaWVsZHMucHVzaCg8VmFsdWVGaWVsZDxhbnk+PmR5bmFtaWNGaWVsZCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb3VudGVyKys7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgZm9ybS51cGRhdGVSb3dzKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICg8RmllbGRMaXN0RmllbGQ+Zm9ybUZpZWxkKS5jcmVhdGVkID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICB9LCBudWxsKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGNhc2UgXCJkYXRlXCI6IHtcclxuICAgICAgICAgICAgICAgIGZvcm1GaWVsZCA9IG5ldyBEYXRlRmllbGQoZm9ybSwgdGhpcy50cmFuc2xhdGlvblNlcnZpY2UpO1xyXG4gICAgICAgICAgICAgICAgZm9ybUZpZWxkLmZyb21Kc29uKG1vZGVsRm9ybUZpZWxkKTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGNhc2UgXCJhdXRvY29tcGxldGVcIjoge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgYXV0b0NvbXBsZXRlRm9ybUZpZWxkID0gbmV3IEF1dG9Db21wbGV0ZUZpZWxkKGZvcm0sIHRoaXMudHJhbnNsYXRpb25TZXJ2aWNlLCB0aGlzLnBhdGhTZXJ2aWNlKTtcclxuICAgICAgICAgICAgICAgIGF1dG9Db21wbGV0ZUZvcm1GaWVsZC5kZXRhaWxGb3JtID0gbW9kZWxGb3JtRmllbGRbXCJmb3JtXCJdO1xyXG4gICAgICAgICAgICAgICAgYXV0b0NvbXBsZXRlRm9ybUZpZWxkLndvcmRTZWFyY2hFbmFibGVkID0gbW9kZWxGb3JtRmllbGRbXCJ3b3JkU2VhcmNoRW5hYmxlZFwiXTtcclxuICAgICAgICAgICAgICAgIGlmIChtb2RlbEZvcm1GaWVsZFtcImRhdGFcIl0gIT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGRhdGEgPSBbXTtcclxuICAgICAgICAgICAgICAgICAgICBsZXQgayA9IDA7XHJcbiAgICAgICAgICAgICAgICAgICAgZm9yIChjb25zdCBpdGVtIG9mIG1vZGVsRm9ybUZpZWxkW1wiZGF0YVwiXSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBlbnRyeSA9IG5ldyBBdXRvQ29tcGxldGVGaWVsZEVudHJ5KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGVudHJ5LnRleHQgPSBpdGVtO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBlbnRyeS5rZXkgPSBrO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBkYXRhLnB1c2goZW50cnkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBrKys7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGF1dG9Db21wbGV0ZUZvcm1GaWVsZC5kYXRhID0gZGF0YTtcclxuICAgICAgICAgICAgICAgICAgICBhdXRvQ29tcGxldGVGb3JtRmllbGQuZGF0YUxvYWRlZCA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKG1vZGVsRm9ybUZpZWxkW1widXJsXCJdICE9IG51bGwpIHtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBhdXRvQ29tcGxldGVGb3JtRmllbGRVcmw6IHN0cmluZyA9IEtleVV0aWxpdHkudHJhbnNsYXRlVXJsKG1vZGVsRm9ybUZpZWxkW1widXJsXCJdLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBmb3JtLmtleSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgZmFsc2UsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHBhcmVudFBhZ2VFbGVtZW50KTtcclxuICAgICAgICAgICAgICAgICAgICBhdXRvQ29tcGxldGVGb3JtRmllbGQudXJsID0gYXV0b0NvbXBsZXRlRm9ybUZpZWxkVXJsO1xyXG4gICAgICAgICAgICAgICAgICAgIGF1dG9Db21wbGV0ZUZvcm1GaWVsZC5sb2FkKCk7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIGF1dG9Db21wbGV0ZUZvcm1GaWVsZC5kYXRhTG9hZGVkID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGZvcm1GaWVsZCA9IGF1dG9Db21wbGV0ZUZvcm1GaWVsZDtcclxuICAgICAgICAgICAgICAgIGZvcm1GaWVsZC5mcm9tSnNvbihtb2RlbEZvcm1GaWVsZCk7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBjYXNlIFwiUmFkaW9Hcm91cEZpZWxkXCI6IHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHJhZGlvR3JvdXBGb3JtRmllbGQgPSBuZXcgUmFkaW9Hcm91cEZpZWxkKGZvcm0sIHRoaXMudHJhbnNsYXRpb25TZXJ2aWNlKTtcclxuICAgICAgICAgICAgICAgIGlmIChtb2RlbEZvcm1GaWVsZFtcInVybFwiXSAhPSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgcmFkaW9zVXJsOiBhbnkgPSBLZXlVdGlsaXR5LnRyYW5zbGF0ZVVybChtb2RlbEZvcm1GaWVsZFtcInVybFwiXSwgZm9ybS5nZXRLZXkoKSwgZmFsc2UsIHBhcmVudFBhZ2VFbGVtZW50KTtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCByYWRpb0xvYWRlciA9IChyZ0ZpZWxkOiBSYWRpb0dyb3VwRmllbGQpID0+IChkYXRhOiBhbnkpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChjb25zdCBpdGVtIG9mIGRhdGEpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHJhZGlvID0gbmV3IFJhZGlvKGZvcm0sIHRoaXMudHJhbnNsYXRpb25TZXJ2aWNlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJhZGlvLm5hbWUgPSBpdGVtW1wibmFtZVwiXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJhZGlvLmtleSA9IGl0ZW1bXCJrZXlcIl1bXCJrZXlcIl0udG9TdHJpbmcoKTsgLy8gZm9yY2UgcmFkaW8ga2V5IHR5cGUgc3RyaW5nIGZvciBhbmd1bGFyMlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHJhZGlvLmtleSA9PT0gaXRlbVtcImRlZmF1bHRLZXlcIl0pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZ0ZpZWxkLnNldFZhbHVlKHJhZGlvLmtleSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZ0ZpZWxkLnJhZGlvcy5wdXNoKHJhZGlvKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICByZ0ZpZWxkLmNyZWF0ZWQgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcInJhZGlvIGdyb3VwIGZpZWxkIGNyZWF0ZWQ6IFwiICsgcmdGaWVsZC5pZCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCByYWRpb0xvYWRlckZvckZpZWxkID0gcmFkaW9Mb2FkZXIocmFkaW9Hcm91cEZvcm1GaWVsZCk7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5wYXRoU2VydmljZS5zZXJ2ZXJHZXQodGhpcy5nZXRCYWNrZW5kVXJsKCksIHJhZGlvc1VybCwgcmFkaW9Mb2FkZXJGb3JGaWVsZCwgbnVsbCk7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIHJhZGlvR3JvdXBGb3JtRmllbGQuY3JlYXRlZCA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICByYWRpb0dyb3VwRm9ybUZpZWxkLmZyb21Kc29uKG1vZGVsRm9ybUZpZWxkKTtcclxuICAgICAgICAgICAgICAgIGZvcm1GaWVsZCA9IHJhZGlvR3JvdXBGb3JtRmllbGQ7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBjYXNlIFwiQ2hlY2tib3hHcm91cEZpZWxkXCI6IHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGNoZWNrYm94R3JvdXBGaWVsZCA9IG5ldyBDaGVja2JveEdyb3VwRmllbGQoZm9ybSwgdGhpcy50cmFuc2xhdGlvblNlcnZpY2UpO1xyXG4gICAgICAgICAgICAgICAgY2hlY2tib3hHcm91cEZpZWxkLmZyb21Kc29uKG1vZGVsRm9ybUZpZWxkKTtcclxuICAgICAgICAgICAgICAgIGZvcm1GaWVsZCA9IGNoZWNrYm94R3JvdXBGaWVsZDtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGNhc2UgXCJQcm9ncmVzc0JhckZpZWxkXCI6IHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHByb2dyZXNzQmFyRmllbGQgPSBuZXcgUHJvZ3Jlc3NCYXJGaWVsZChmb3JtLCB0aGlzLnRyYW5zbGF0aW9uU2VydmljZSk7XHJcbiAgICAgICAgICAgICAgICBwcm9ncmVzc0JhckZpZWxkLmZyb21Kc29uKG1vZGVsRm9ybUZpZWxkKTtcclxuICAgICAgICAgICAgICAgIGZvcm1GaWVsZCA9IHByb2dyZXNzQmFyRmllbGQ7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBjYXNlIFwib2tCdXR0b25cIjoge1xyXG4gICAgICAgICAgICAgICAgZm9ybUZpZWxkID0gbmV3IE9rQnV0dG9uKGZvcm0sIHRoaXMudHJhbnNsYXRpb25TZXJ2aWNlKTtcclxuICAgICAgICAgICAgICAgIGZvcm1GaWVsZC5mcm9tSnNvbihtb2RlbEZvcm1GaWVsZCk7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBjYXNlIFwiY2FuY2VsQnV0dG9uXCI6IHtcclxuICAgICAgICAgICAgICAgIGZvcm1GaWVsZCA9IG5ldyBDYW5jZWxCdXR0b24oZm9ybSwgdGhpcy50cmFuc2xhdGlvblNlcnZpY2UpO1xyXG4gICAgICAgICAgICAgICAgZm9ybUZpZWxkLmZyb21Kc29uKG1vZGVsRm9ybUZpZWxkKTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGNhc2UgXCJkZWxldGVCdXR0b25cIjoge1xyXG4gICAgICAgICAgICAgICAgZm9ybUZpZWxkID0gbmV3IEZvcm1EZWxldGVCdXR0b24oZm9ybSwgdGhpcy50cmFuc2xhdGlvblNlcnZpY2UpO1xyXG4gICAgICAgICAgICAgICAgZm9ybUZpZWxkLmZyb21Kc29uKG1vZGVsRm9ybUZpZWxkKTtcclxuICAgICAgICAgICAgICAgIGlmIChmb3JtLmtleSA9PSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZm9ybUZpZWxkLnZpc2libGUgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGNhc2UgXCJwcmV2aW91c0J1dHRvblwiOiB7XHJcbiAgICAgICAgICAgICAgICBmb3JtRmllbGQgPSBuZXcgUHJldmlvdXNCdXR0b24oZm9ybSwgdGhpcy50cmFuc2xhdGlvblNlcnZpY2UpO1xyXG4gICAgICAgICAgICAgICAgZm9ybUZpZWxkLmZyb21Kc29uKG1vZGVsRm9ybUZpZWxkKTtcclxuICAgICAgICAgICAgICAgIGlmIChmb3JtLmtleSA9PSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZm9ybUZpZWxkLnZpc2libGUgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGNhc2UgXCJmaWxlVXBsb2FkXCI6IHtcclxuICAgICAgICAgICAgICAgIGZvcm1GaWVsZCA9IG5ldyBGaWxlVXBsb2FkRmllbGQoZm9ybSwgdGhpcy50cmFuc2xhdGlvblNlcnZpY2UpO1xyXG4gICAgICAgICAgICAgICAgbW9kZWxGb3JtRmllbGRbXCJ1cmxcIl0gPSBLZXlVdGlsaXR5LnRyYW5zbGF0ZVVybChtb2RlbEZvcm1GaWVsZFtcInVybFwiXSwgZm9ybS5nZXRLZXkoKSwgZmFsc2UsIHBhcmVudFBhZ2VFbGVtZW50KTtcclxuICAgICAgICAgICAgICAgIGZvcm1GaWVsZC5mcm9tSnNvbihtb2RlbEZvcm1GaWVsZCk7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBkZWZhdWx0OiB7XHJcbiAgICAgICAgICAgICAgICBmb3JtRmllbGQgPSBuZXcgRm9ybUZpZWxkKGZvcm0sIHRoaXMudHJhbnNsYXRpb25TZXJ2aWNlKTtcclxuICAgICAgICAgICAgICAgIGZvcm1GaWVsZC5mcm9tSnNvbihtb2RlbEZvcm1GaWVsZCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gRmllbGQgcGVybWlzc2lvbiAobW92ZSBjb2RlIHRvIEZvcm1GaWVsZClcclxuICAgICAgICBpZiAobW9kZWxGb3JtRmllbGRbXCJwZXJtaXNzaW9uVXJsXCJdICE9IG51bGwpIHtcclxuICAgICAgICAgICAgZm9ybUZpZWxkLnJlYWRvbmx5ID0gZmFsc2U7XHJcbiAgICAgICAgICAgIGNvbnN0IHBlcm1pc3Npb25Vcmw6IHN0cmluZyA9IEtleVV0aWxpdHkudHJhbnNsYXRlVXJsKG1vZGVsRm9ybUZpZWxkW1wicGVybWlzc2lvblVybFwiXSxcclxuICAgICAgICAgICAgICAgIGZvcm1GaWVsZC5nZXRGb3JtKCkuZ2V0S2V5KCksXHJcbiAgICAgICAgICAgICAgICBmYWxzZSxcclxuICAgICAgICAgICAgICAgIHBhcmVudFBhZ2VFbGVtZW50KTtcclxuICAgICAgICAgICAgY29uc3QgcGVybWlzc2lvbkhhbmRsZXIgPSAocGVybWlzc2lvbkVsZW1lbnQ6IEZvcm1GaWVsZCkgPT4gKGRhdGE6IGFueSkgPT4ge1xyXG4gICAgICAgICAgICAgICAgcGVybWlzc2lvbkVsZW1lbnQucmVhZG9ubHkgPSAhZGF0YVtcInBlcm1pc3Npb25cIl07XHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIHRoaXMucGF0aFNlcnZpY2Uuc2VydmVyR2V0KGZvcm1GaWVsZC5nZXRGb3JtKCkuZ2V0QXBwKCkuZ2V0QmFja2VuZFVybCgpLCBwZXJtaXNzaW9uVXJsLCBwZXJtaXNzaW9uSGFuZGxlcihmb3JtRmllbGQpLCBudWxsKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gc2VhcmNoIHBhcmVudHMgZm9yIGRlZmF1bHRLZXlcclxuICAgICAgICBpZiAoZm9ybUZpZWxkIGluc3RhbmNlb2YgVmFsdWVGaWVsZCAmJiBtb2RlbEZvcm1GaWVsZFtcImRlZmF1bHRLZXlcIl0gIT0gbnVsbCkge1xyXG4gICAgICAgICAgICBsZXQgcGFnZUVsZW1lbnQ6IElQYWdlRWxlbWVudCA9IHBhcmVudFBhZ2VFbGVtZW50O1xyXG4gICAgICAgICAgICB3aGlsZSAocGFnZUVsZW1lbnQgIT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgaWYgKHBhZ2VFbGVtZW50LmdldEtleSgpICE9IG51bGwgJiYgcGFnZUVsZW1lbnQuZ2V0S2V5KCkuZ2V0TmFtZSgpID09PSBtb2RlbEZvcm1GaWVsZFtcImRlZmF1bHRLZXlcIl0pIHtcclxuICAgICAgICAgICAgICAgICAgICAoPFZhbHVlRmllbGQ8YW55Pj5mb3JtRmllbGQpLnNldFZhbHVlKHBhZ2VFbGVtZW50LmdldEtleSgpLmdldEtleSgpKTtcclxuICAgICAgICAgICAgICAgICAgICAoPFZhbHVlRmllbGQ8YW55Pj5mb3JtRmllbGQpLmlzSW5pdGlhbFZhbHVlU2V0ID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICBwYWdlRWxlbWVudCA9IG51bGw7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIHBhZ2VFbGVtZW50ID0gcGFnZUVsZW1lbnQuZ2V0UGFyZW50KCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIGZvcm1GaWVsZDtcclxuICAgIH1cclxuXHJcbiAgICB0b2dnbGVDb2xsYXBzZSgpIHtcclxuICAgICAgICB0aGlzLnNob3cgPSAhdGhpcy5zaG93O1xyXG4gICAgfVxyXG5cclxufVxyXG4iXX0=