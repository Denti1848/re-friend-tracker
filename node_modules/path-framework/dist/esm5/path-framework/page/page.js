import * as tslib_1 from "tslib";
import { PageElement } from "./element/page-element";
var Page = /** @class */ (function () {
    function Page(parentPageElement) {
        this._content = [];
        this._rows = [];
        this._parentPageElement = parentPageElement;
    }
    Page.prototype.getShortName = function () {
        return PageElement.buildShortName(this.name);
    };
    Object.defineProperty(Page.prototype, "name", {
        get: function () {
            return this._name;
        },
        set: function (value) {
            this._name = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Page.prototype, "content", {
        get: function () {
            return this._content;
        },
        set: function (value) {
            this._content = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Page.prototype, "id", {
        get: function () {
            return this._id;
        },
        set: function (value) {
            this._id = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Page.prototype, "parentPageElement", {
        get: function () {
            return this._parentPageElement;
        },
        enumerable: true,
        configurable: true
    });
    Page.prototype.updateRows = function () {
        var e_1, _a;
        var rows = [];
        var currentPageRow = null;
        try {
            for (var _b = tslib_1.__values(this.content), _c = _b.next(); !_c.done; _c = _b.next()) {
                var pageElement = _c.value;
                if (pageElement.newRow === true || currentPageRow == null) {
                    currentPageRow = new PageRow();
                    rows.push(currentPageRow);
                }
                currentPageRow.pageElements.push(pageElement);
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_1) throw e_1.error; }
        }
        this._rows = rows;
    };
    return Page;
}());
export { Page };
var PageRow = /** @class */ (function () {
    function PageRow() {
        this._pageElements = [];
    }
    Object.defineProperty(PageRow.prototype, "pageElements", {
        get: function () {
            return this._pageElements;
        },
        enumerable: true,
        configurable: true
    });
    PageRow.prototype.isVisible = function () {
        var e_2, _a;
        try {
            for (var _b = tslib_1.__values(this.pageElements), _c = _b.next(); !_c.done; _c = _b.next()) {
                var pageElement = _c.value;
                if (pageElement.visible) {
                    return true;
                }
            }
        }
        catch (e_2_1) { e_2 = { error: e_2_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_2) throw e_2.error; }
        }
        return false;
    };
    return PageRow;
}());
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGFnZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL3BhdGgtZnJhbWV3b3JrLyIsInNvdXJjZXMiOlsicGF0aC1mcmFtZXdvcmsvcGFnZS9wYWdlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUMsV0FBVyxFQUFDLE1BQU0sd0JBQXdCLENBQUM7QUFFbkQ7SUFPSSxjQUFZLGlCQUE4QjtRQUpsQyxhQUFRLEdBQWtCLEVBQUUsQ0FBQztRQUM3QixVQUFLLEdBQWMsRUFBRSxDQUFDO1FBSTFCLElBQUksQ0FBQyxrQkFBa0IsR0FBRyxpQkFBaUIsQ0FBQztJQUNoRCxDQUFDO0lBRU0sMkJBQVksR0FBbkI7UUFDSSxPQUFPLFdBQVcsQ0FBQyxjQUFjLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQ2pELENBQUM7SUFFRCxzQkFBSSxzQkFBSTthQUFSO1lBQ0ksT0FBTyxJQUFJLENBQUMsS0FBSyxDQUFDO1FBQ3RCLENBQUM7YUFFRCxVQUFTLEtBQWE7WUFDbEIsSUFBSSxDQUFDLEtBQUssR0FBRyxLQUFLLENBQUM7UUFDdkIsQ0FBQzs7O09BSkE7SUFNRCxzQkFBSSx5QkFBTzthQUFYO1lBQ0ksT0FBTyxJQUFJLENBQUMsUUFBUSxDQUFDO1FBQ3pCLENBQUM7YUFFRCxVQUFZLEtBQW9CO1lBQzVCLElBQUksQ0FBQyxRQUFRLEdBQUcsS0FBSyxDQUFDO1FBQzFCLENBQUM7OztPQUpBO0lBTUQsc0JBQUksb0JBQUU7YUFBTjtZQUNJLE9BQU8sSUFBSSxDQUFDLEdBQUcsQ0FBQztRQUNwQixDQUFDO2FBRUQsVUFBTyxLQUFhO1lBQ2hCLElBQUksQ0FBQyxHQUFHLEdBQUcsS0FBSyxDQUFDO1FBQ3JCLENBQUM7OztPQUpBO0lBTUQsc0JBQUksbUNBQWlCO2FBQXJCO1lBQ0ksT0FBTyxJQUFJLENBQUMsa0JBQWtCLENBQUM7UUFDbkMsQ0FBQzs7O09BQUE7SUFFTSx5QkFBVSxHQUFqQjs7UUFDSSxJQUFNLElBQUksR0FBYyxFQUFFLENBQUM7UUFFM0IsSUFBSSxjQUFjLEdBQVksSUFBSSxDQUFDOztZQUNuQyxLQUEwQixJQUFBLEtBQUEsaUJBQUEsSUFBSSxDQUFDLE9BQU8sQ0FBQSxnQkFBQSw0QkFBRTtnQkFBbkMsSUFBTSxXQUFXLFdBQUE7Z0JBQ2xCLElBQUksV0FBVyxDQUFDLE1BQU0sS0FBSyxJQUFJLElBQUksY0FBYyxJQUFJLElBQUksRUFBRTtvQkFDdkQsY0FBYyxHQUFHLElBQUksT0FBTyxFQUFFLENBQUM7b0JBQy9CLElBQUksQ0FBQyxJQUFJLENBQUMsY0FBYyxDQUFDLENBQUM7aUJBQzdCO2dCQUNELGNBQWMsQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxDQUFDO2FBQ2pEOzs7Ozs7Ozs7UUFDRCxJQUFJLENBQUMsS0FBSyxHQUFHLElBQUksQ0FBQztJQUN0QixDQUFDO0lBQ0wsV0FBQztBQUFELENBQUMsQUF4REQsSUF3REM7O0FBRUQ7SUFBQTtRQUNZLGtCQUFhLEdBQWtCLEVBQUUsQ0FBQztJQWM5QyxDQUFDO0lBWkcsc0JBQUksaUNBQVk7YUFBaEI7WUFDSSxPQUFPLElBQUksQ0FBQyxhQUFhLENBQUM7UUFDOUIsQ0FBQzs7O09BQUE7SUFFTSwyQkFBUyxHQUFoQjs7O1lBQ0ksS0FBMEIsSUFBQSxLQUFBLGlCQUFBLElBQUksQ0FBQyxZQUFZLENBQUEsZ0JBQUEsNEJBQUU7Z0JBQXhDLElBQU0sV0FBVyxXQUFBO2dCQUNsQixJQUFJLFdBQVcsQ0FBQyxPQUFPLEVBQUU7b0JBQ3JCLE9BQU8sSUFBSSxDQUFDO2lCQUNmO2FBQ0o7Ozs7Ozs7OztRQUNELE9BQU8sS0FBSyxDQUFDO0lBQ2pCLENBQUM7SUFDTCxjQUFDO0FBQUQsQ0FBQyxBQWZELElBZUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1BhZ2VFbGVtZW50fSBmcm9tIFwiLi9lbGVtZW50L3BhZ2UtZWxlbWVudFwiO1xyXG5cclxuZXhwb3J0IGNsYXNzIFBhZ2Uge1xyXG4gICAgcHJpdmF0ZSBfbmFtZTogc3RyaW5nO1xyXG4gICAgcHJpdmF0ZSBfaWQ6IHN0cmluZztcclxuICAgIHByaXZhdGUgX2NvbnRlbnQ6IFBhZ2VFbGVtZW50W10gPSBbXTtcclxuICAgIHByaXZhdGUgX3Jvd3M6IFBhZ2VSb3dbXSA9IFtdO1xyXG4gICAgcHJpdmF0ZSByZWFkb25seSBfcGFyZW50UGFnZUVsZW1lbnQ6IFBhZ2VFbGVtZW50O1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKHBhcmVudFBhZ2VFbGVtZW50OiBQYWdlRWxlbWVudCkge1xyXG4gICAgICAgIHRoaXMuX3BhcmVudFBhZ2VFbGVtZW50ID0gcGFyZW50UGFnZUVsZW1lbnQ7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGdldFNob3J0TmFtZSgpOiBzdHJpbmcge1xyXG4gICAgICAgIHJldHVybiBQYWdlRWxlbWVudC5idWlsZFNob3J0TmFtZSh0aGlzLm5hbWUpO1xyXG4gICAgfVxyXG5cclxuICAgIGdldCBuYW1lKCk6IHN0cmluZyB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX25hbWU7XHJcbiAgICB9XHJcblxyXG4gICAgc2V0IG5hbWUodmFsdWU6IHN0cmluZykge1xyXG4gICAgICAgIHRoaXMuX25hbWUgPSB2YWx1ZTtcclxuICAgIH1cclxuXHJcbiAgICBnZXQgY29udGVudCgpOiBQYWdlRWxlbWVudFtdIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fY29udGVudDtcclxuICAgIH1cclxuXHJcbiAgICBzZXQgY29udGVudCh2YWx1ZTogUGFnZUVsZW1lbnRbXSkge1xyXG4gICAgICAgIHRoaXMuX2NvbnRlbnQgPSB2YWx1ZTtcclxuICAgIH1cclxuXHJcbiAgICBnZXQgaWQoKTogc3RyaW5nIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5faWQ7XHJcbiAgICB9XHJcblxyXG4gICAgc2V0IGlkKHZhbHVlOiBzdHJpbmcpIHtcclxuICAgICAgICB0aGlzLl9pZCA9IHZhbHVlO1xyXG4gICAgfVxyXG5cclxuICAgIGdldCBwYXJlbnRQYWdlRWxlbWVudCgpOiBQYWdlRWxlbWVudCB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX3BhcmVudFBhZ2VFbGVtZW50O1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyB1cGRhdGVSb3dzKCkge1xyXG4gICAgICAgIGNvbnN0IHJvd3M6IFBhZ2VSb3dbXSA9IFtdO1xyXG5cclxuICAgICAgICBsZXQgY3VycmVudFBhZ2VSb3c6IFBhZ2VSb3cgPSBudWxsO1xyXG4gICAgICAgIGZvciAoY29uc3QgcGFnZUVsZW1lbnQgb2YgdGhpcy5jb250ZW50KSB7XHJcbiAgICAgICAgICAgIGlmIChwYWdlRWxlbWVudC5uZXdSb3cgPT09IHRydWUgfHwgY3VycmVudFBhZ2VSb3cgPT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgY3VycmVudFBhZ2VSb3cgPSBuZXcgUGFnZVJvdygpO1xyXG4gICAgICAgICAgICAgICAgcm93cy5wdXNoKGN1cnJlbnRQYWdlUm93KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBjdXJyZW50UGFnZVJvdy5wYWdlRWxlbWVudHMucHVzaChwYWdlRWxlbWVudCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuX3Jvd3MgPSByb3dzO1xyXG4gICAgfVxyXG59XHJcblxyXG5jbGFzcyBQYWdlUm93IHtcclxuICAgIHByaXZhdGUgX3BhZ2VFbGVtZW50czogUGFnZUVsZW1lbnRbXSA9IFtdO1xyXG5cclxuICAgIGdldCBwYWdlRWxlbWVudHMoKTogUGFnZUVsZW1lbnRbXSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX3BhZ2VFbGVtZW50cztcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgaXNWaXNpYmxlKCk6IGJvb2xlYW4ge1xyXG4gICAgICAgIGZvciAoY29uc3QgcGFnZUVsZW1lbnQgb2YgdGhpcy5wYWdlRWxlbWVudHMpIHtcclxuICAgICAgICAgICAgaWYgKHBhZ2VFbGVtZW50LnZpc2libGUpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIH1cclxufVxyXG4iXX0=