import * as tslib_1 from "tslib";
import { Component, Input, Output } from "@angular/core";
import { StringUtility } from "../../../utility/string-utility";
import { Button } from "./button.component";
var BackButtonComponent = /** @class */ (function () {
    function BackButtonComponent() {
    }
    tslib_1.__decorate([
        Input("button"),
        Output("button")
    ], BackButtonComponent.prototype, "button", void 0);
    BackButtonComponent = tslib_1.__decorate([
        Component({
            selector: "path-back-button",
            template: "<a (click)=\"button.onClick()\" class=\"fa-links\">\r\n\t<div class=\"thumbnail tile tile-button {{(button.width <= 1 ? 'tile-medium' : (button.width == 2 ? 'tile-wide' : (button.width == 3 ? 'tile-wide-3' : (button.width >= 4 ? 'tile-wide-4' : ''))))}} backbutton {{button.cssGroupBorder}} {{button.cssClass}}\" [ngStyle]=\"button.cssStyle\">\r\n\t\t<div class=\"h3\">{{button.name}}</div>\r\n\t\t<i class=\"fa fa-2x fa-backward\"></i>\r\n\t</div>\r\n</a>"
        })
    ], BackButtonComponent);
    return BackButtonComponent;
}());
export { BackButtonComponent };
var BackButton = /** @class */ (function (_super) {
    tslib_1.__extends(BackButton, _super);
    function BackButton(app, pathService, translationService) {
        return _super.call(this, app, pathService, translationService) || this;
    }
    BackButton.prototype.onClick = function () {
        this.app.navigateBack();
    };
    BackButton.prototype.fromJson = function (modelElement) {
        if (StringUtility.isEmpty(modelElement["color"])) {
            modelElement["color"] = "silver";
        }
        _super.prototype.fromJson.call(this, modelElement);
        this.type = "backbutton";
        this.name = this.translationService.getText("Back");
    };
    return BackButton;
}(Button));
export { BackButton };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmFjay1idXR0b24uY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vcGF0aC1mcmFtZXdvcmsvIiwic291cmNlcyI6WyJwYXRoLWZyYW1ld29yay9wYWdlL2VsZW1lbnQvYnV0dG9uL2JhY2stYnV0dG9uLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFDLFNBQVMsRUFBRSxLQUFLLEVBQUUsTUFBTSxFQUFDLE1BQU0sZUFBZSxDQUFDO0FBSXZELE9BQU8sRUFBQyxhQUFhLEVBQUMsTUFBTSxpQ0FBaUMsQ0FBQztBQUM5RCxPQUFPLEVBQUMsTUFBTSxFQUFDLE1BQU0sb0JBQW9CLENBQUM7QUFNMUM7SUFBQTtJQUlBLENBQUM7SUFERztRQUZDLEtBQUssQ0FBQyxRQUFRLENBQUM7UUFDZixNQUFNLENBQUMsUUFBUSxDQUFDO3VEQUNFO0lBSFYsbUJBQW1CO1FBSi9CLFNBQVMsQ0FBQztZQUNQLFFBQVEsRUFBRSxrQkFBa0I7WUFDNUIsb2RBQXlDO1NBQzVDLENBQUM7T0FDVyxtQkFBbUIsQ0FJL0I7SUFBRCwwQkFBQztDQUFBLEFBSkQsSUFJQztTQUpZLG1CQUFtQjtBQU1oQztJQUFnQyxzQ0FBTTtJQUVsQyxvQkFBWSxHQUFhLEVBQUUsV0FBd0IsRUFBRSxrQkFBc0M7ZUFDdkYsa0JBQU0sR0FBRyxFQUFFLFdBQVcsRUFBRSxrQkFBa0IsQ0FBQztJQUMvQyxDQUFDO0lBRU0sNEJBQU8sR0FBZDtRQUNJLElBQUksQ0FBQyxHQUFHLENBQUMsWUFBWSxFQUFFLENBQUM7SUFDNUIsQ0FBQztJQUVNLDZCQUFRLEdBQWYsVUFBZ0IsWUFBWTtRQUN4QixJQUFJLGFBQWEsQ0FBQyxPQUFPLENBQUMsWUFBWSxDQUFDLE9BQU8sQ0FBQyxDQUFDLEVBQUU7WUFDOUMsWUFBWSxDQUFDLE9BQU8sQ0FBQyxHQUFHLFFBQVEsQ0FBQztTQUNwQztRQUNELGlCQUFNLFFBQVEsWUFBQyxZQUFZLENBQUMsQ0FBQztRQUM3QixJQUFJLENBQUMsSUFBSSxHQUFHLFlBQVksQ0FBQztRQUN6QixJQUFJLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDeEQsQ0FBQztJQUVMLGlCQUFDO0FBQUQsQ0FBQyxBQW5CRCxDQUFnQyxNQUFNLEdBbUJyQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7Q29tcG9uZW50LCBJbnB1dCwgT3V0cHV0fSBmcm9tIFwiQGFuZ3VsYXIvY29yZVwiO1xyXG5pbXBvcnQge0lQYXRoQXBwfSBmcm9tIFwiLi4vLi4vLi4vcGF0aGludGVyZmFjZVwiO1xyXG5pbXBvcnQge1BhdGhTZXJ2aWNlfSBmcm9tIFwiLi4vLi4vLi4vc2VydmljZS9wYXRoLnNlcnZpY2VcIjtcclxuaW1wb3J0IHtUcmFuc2xhdGlvblNlcnZpY2V9IGZyb20gXCIuLi8uLi8uLi9zZXJ2aWNlL3RyYW5zbGF0aW9uLnNlcnZpY2VcIjtcclxuaW1wb3J0IHtTdHJpbmdVdGlsaXR5fSBmcm9tIFwiLi4vLi4vLi4vdXRpbGl0eS9zdHJpbmctdXRpbGl0eVwiO1xyXG5pbXBvcnQge0J1dHRvbn0gZnJvbSBcIi4vYnV0dG9uLmNvbXBvbmVudFwiO1xyXG5cclxuQENvbXBvbmVudCh7XHJcbiAgICBzZWxlY3RvcjogXCJwYXRoLWJhY2stYnV0dG9uXCIsXHJcbiAgICB0ZW1wbGF0ZVVybDogXCJiYWNrLWJ1dHRvbi5jb21wb25lbnQuaHRtbFwiXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBCYWNrQnV0dG9uQ29tcG9uZW50IHtcclxuICAgIEBJbnB1dChcImJ1dHRvblwiKVxyXG4gICAgQE91dHB1dChcImJ1dHRvblwiKVxyXG4gICAgYnV0dG9uOiBCYWNrQnV0dG9uO1xyXG59XHJcblxyXG5leHBvcnQgY2xhc3MgQmFja0J1dHRvbiBleHRlbmRzIEJ1dHRvbiB7XHJcblxyXG4gICAgY29uc3RydWN0b3IoYXBwOiBJUGF0aEFwcCwgcGF0aFNlcnZpY2U6IFBhdGhTZXJ2aWNlLCB0cmFuc2xhdGlvblNlcnZpY2U6IFRyYW5zbGF0aW9uU2VydmljZSkge1xyXG4gICAgICAgIHN1cGVyKGFwcCwgcGF0aFNlcnZpY2UsIHRyYW5zbGF0aW9uU2VydmljZSk7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIG9uQ2xpY2soKSB7XHJcbiAgICAgICAgdGhpcy5hcHAubmF2aWdhdGVCYWNrKCk7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGZyb21Kc29uKG1vZGVsRWxlbWVudCkge1xyXG4gICAgICAgIGlmIChTdHJpbmdVdGlsaXR5LmlzRW1wdHkobW9kZWxFbGVtZW50W1wiY29sb3JcIl0pKSB7XHJcbiAgICAgICAgICAgIG1vZGVsRWxlbWVudFtcImNvbG9yXCJdID0gXCJzaWx2ZXJcIjtcclxuICAgICAgICB9XHJcbiAgICAgICAgc3VwZXIuZnJvbUpzb24obW9kZWxFbGVtZW50KTtcclxuICAgICAgICB0aGlzLnR5cGUgPSBcImJhY2tidXR0b25cIjtcclxuICAgICAgICB0aGlzLm5hbWUgPSB0aGlzLnRyYW5zbGF0aW9uU2VydmljZS5nZXRUZXh0KFwiQmFja1wiKTtcclxuICAgIH1cclxuXHJcbn1cclxuIl19