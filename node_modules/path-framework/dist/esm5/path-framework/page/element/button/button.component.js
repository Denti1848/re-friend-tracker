import * as tslib_1 from "tslib";
import { PageElement } from "../page-element";
import { Input, Output, Component } from "@angular/core";
import { KeyUtility } from "../../../utility/key-utility";
import { ButtonDetail } from "./button-detail";
import { StringUtility } from "../../../utility/string-utility";
import { ColorUtility } from "../../../utility/color-utility";
var ButtonComponent = /** @class */ (function () {
    function ButtonComponent() {
    }
    tslib_1.__decorate([
        Input("button"),
        Output("button")
    ], ButtonComponent.prototype, "button", void 0);
    ButtonComponent = tslib_1.__decorate([
        Component({
            selector: "path-button",
            template: "<a (click)=\"button.onClick()\" class=\"fa-links\">\r\n\t<div tooltip=\"{{button.tooltip}}\" *ngIf=\"button.visible\" class=\"thumbnail tile {{button.cssButtonTarget ? 'tile-button' : ''}} {{(button.width <= 1 ? 'tile-medium' : (button.width == 2 ? 'tile-wide' : (button.width == 3 ? 'tile-wide-3' : (button.width >= 4 ? 'tile-wide-4' : ''))))}} {{button.cssGroupBorder}} {{button.cssClass}}\" [ngStyle]=\"button.cssStyle\">\r\n\t\t<div class=\"h3 truncate\">{{button.name}}</div>\r\n\t\t<span class=\"truncate\" *ngFor='let detail of button.details; let last = last;'>\r\n                    <span class=\"h4 m-t-5\" [innerHTML]=\"detail.text\"></span><small [hidden]=\"last\">&nbsp;&bull;&nbsp;</small></span>\r\n\t\t<div class=\"h4 m-t-5\"></div>\r\n\t\t<i class=\"fa fa-2x {{button.icon}}\"></i>\r\n\t</div>\r\n</a>\r\n"
        })
    ], ButtonComponent);
    return ButtonComponent;
}());
export { ButtonComponent };
var Button = /** @class */ (function (_super) {
    tslib_1.__extends(Button, _super);
    function Button(app, pathService, translationService) {
        var _this = _super.call(this, app) || this;
        _this.pathService = pathService;
        _this.translationService = translationService;
        _this._details = [];
        return _this;
    }
    Button.prototype.onClick = function () {
        var _this = this;
        if (this._handler != null) {
            this._handler.doClick(this);
            return;
        }
        if (!StringUtility.isEmpty(this._url)) {
            this.pathService.serverGet(this.app.getBackendUrl(), this._url, function () {
                _this.app.refreshCurrentPage();
            }, null);
        }
        if (!StringUtility.isEmpty(this._page)) {
            this.app.setCurrentPage(this._page, this);
            return;
        }
        if (!StringUtility.isEmpty(this._form)) {
            this.app.setCurrentForm(this._form, this.key, this._formHandler, this);
            return;
        }
    };
    Button.prototype.setIcon = function (icon) {
        this.icon = icon;
    };
    Button.prototype.setForm = function (form) {
        this.form = form;
    };
    Button.prototype.setFormHandler = function (formHandler) {
        this.formHandler = formHandler;
    };
    Button.prototype.setPage = function (page) {
        this.page = page;
    };
    Button.prototype.setKey = function (key) {
        this.key = key;
    };
    Button.prototype.getApp = function () {
        return this.app;
    };
    Button.prototype.getName = function () {
        return this.name;
    };
    Object.defineProperty(Button.prototype, "icon", {
        get: function () {
            return this._icon;
        },
        set: function (value) {
            this._icon = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Button.prototype, "cssStyle", {
        get: function () {
            return this._cssStyle;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Button.prototype, "cssClass", {
        get: function () {
            return this._cssClass;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Button.prototype, "cssButtonTarget", {
        get: function () {
            return this._cssButtonTarget;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Button.prototype, "cssGroupBorder", {
        get: function () {
            return this._cssGroupBorder;
        },
        set: function (value) {
            this._cssGroupBorder = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Button.prototype, "handler", {
        get: function () {
            return this._handler;
        },
        set: function (value) {
            this._handler = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Button.prototype, "details", {
        get: function () {
            return this._details;
        },
        set: function (value) {
            this._details = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Button.prototype, "page", {
        get: function () {
            return this._page;
        },
        set: function (value) {
            this._page = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Button.prototype, "form", {
        get: function () {
            return this._form;
        },
        set: function (value) {
            this._form = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Button.prototype, "formHandler", {
        get: function () {
            return this._formHandler;
        },
        set: function (value) {
            this._formHandler = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Button.prototype, "url", {
        get: function () {
            return this._url;
        },
        set: function (value) {
            this._url = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Button.prototype, "tooltip", {
        get: function () {
            return this._tooltip;
        },
        set: function (value) {
            this._tooltip = value;
        },
        enumerable: true,
        configurable: true
    });
    Button.prototype.fromJson = function (modelElement) {
        var e_1, _a;
        _super.prototype.fromJson.call(this, modelElement);
        // general attributes
        this.type = "button";
        this.setIcon(modelElement["icon"]);
        if (modelElement["color"] != null) {
            var color = modelElement["color"];
            if (typeof color === "object") {
                this._cssStyle = color;
            }
            else if (typeof color === "string") {
                if (ColorUtility.isPathDefaultColor(color)) {
                    this._cssClass = "tile-" + color;
                }
                else {
                    this._cssClass = color;
                }
            }
        }
        if (modelElement["form"] != null) {
            this.setForm(modelElement["form"]["form"]);
            this.setFormHandler(modelElement["form"]["handler"]);
        }
        this.setPage(modelElement["page"]);
        if (this.key == null && this.parentPageElement != null && modelElement.type === "button") {
            this.key = this.parentPageElement.key;
        }
        this.name = this.translationService.getText(modelElement["name"]);
        this.url = KeyUtility.translateUrl(modelElement["url"], null, false, this);
        if (modelElement["tooltip"] != null) {
            this.tooltip = this.translationService.getText(modelElement["tooltip"]);
        }
        // button details
        if (modelElement["details"] != null) {
            this.details = [];
            try {
                for (var _b = tslib_1.__values(modelElement["details"]), _c = _b.next(); !_c.done; _c = _b.next()) {
                    var detail = _c.value;
                    var bd = new ButtonDetail();
                    bd.text = detail;
                    this.details.push(bd);
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                }
                finally { if (e_1) throw e_1.error; }
            }
        }
        // button target
        this._cssButtonTarget = true;
        if (this.type === "button") {
            if (StringUtility.isEmpty(this.form) && StringUtility.isEmpty(this.page) && StringUtility.isEmpty(this.url)) {
                this._cssButtonTarget = false;
            }
        }
    };
    return Button;
}(PageElement));
export { Button };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYnV0dG9uLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL3BhdGgtZnJhbWV3b3JrLyIsInNvdXJjZXMiOlsicGF0aC1mcmFtZXdvcmsvcGFnZS9lbGVtZW50L2J1dHRvbi9idXR0b24uY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQU0sV0FBVyxFQUFDLE1BQU0saUJBQWlCLENBQUM7QUFHakQsT0FBTyxFQUFDLEtBQUssRUFBRSxNQUFNLEVBQUUsU0FBUyxFQUFDLE1BQU0sZUFBZSxDQUFDO0FBRXZELE9BQU8sRUFBQyxVQUFVLEVBQUMsTUFBTSw4QkFBOEIsQ0FBQztBQUN4RCxPQUFPLEVBQUMsWUFBWSxFQUFDLE1BQU0saUJBQWlCLENBQUM7QUFDN0MsT0FBTyxFQUFDLGFBQWEsRUFBQyxNQUFNLGlDQUFpQyxDQUFDO0FBQzlELE9BQU8sRUFBQyxZQUFZLEVBQUMsTUFBTSxnQ0FBZ0MsQ0FBQztBQU01RDtJQUFBO0lBSUEsQ0FBQztJQURHO1FBRkMsS0FBSyxDQUFDLFFBQVEsQ0FBQztRQUNmLE1BQU0sQ0FBQyxRQUFRLENBQUM7bURBQ0Y7SUFITixlQUFlO1FBSjNCLFNBQVMsQ0FBQztZQUNQLFFBQVEsRUFBRSxhQUFhO1lBQ3ZCLG0wQkFBb0M7U0FDdkMsQ0FBQztPQUNXLGVBQWUsQ0FJM0I7SUFBRCxzQkFBQztDQUFBLEFBSkQsSUFJQztTQUpZLGVBQWU7QUFNNUI7SUFBNEIsa0NBQVc7SUFnQm5DLGdCQUFZLEdBQWEsRUFBWSxXQUF3QixFQUFZLGtCQUFzQztRQUEvRyxZQUNJLGtCQUFNLEdBQUcsQ0FBQyxTQUNiO1FBRm9DLGlCQUFXLEdBQVgsV0FBVyxDQUFhO1FBQVksd0JBQWtCLEdBQWxCLGtCQUFrQixDQUFvQjtRQVR2RyxjQUFRLEdBQW1CLEVBQUUsQ0FBQzs7SUFXdEMsQ0FBQztJQUVNLHdCQUFPLEdBQWQ7UUFBQSxpQkFxQkM7UUFwQkcsSUFBSSxJQUFJLENBQUMsUUFBUSxJQUFJLElB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LCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0tleSwgUGFnZUVsZW1lbnR9IGZyb20gXCIuLi9wYWdlLWVsZW1lbnRcIjtcclxuaW1wb3J0IHtQYXRoU2VydmljZX0gZnJvbSBcIi4uLy4uLy4uL3NlcnZpY2UvcGF0aC5zZXJ2aWNlXCI7XHJcbmltcG9ydCB7SUJ1dHRvbiwgSUJ1dHRvbkhhbmRsZXIsIElQYXRoQXBwfSBmcm9tIFwiLi4vLi4vLi4vcGF0aGludGVyZmFjZVwiO1xyXG5pbXBvcnQge0lucHV0LCBPdXRwdXQsIENvbXBvbmVudH0gZnJvbSBcIkBhbmd1bGFyL2NvcmVcIjtcclxuaW1wb3J0IHtUcmFuc2xhdGlvblNlcnZpY2V9IGZyb20gXCIuLi8uLi8uLi9zZXJ2aWNlL3RyYW5zbGF0aW9uLnNlcnZpY2VcIjtcclxuaW1wb3J0IHtLZXlVdGlsaXR5fSBmcm9tIFwiLi4vLi4vLi4vdXRpbGl0eS9rZXktdXRpbGl0eVwiO1xyXG5pbXBvcnQge0J1dHRvbkRldGFpbH0gZnJvbSBcIi4vYnV0dG9uLWRldGFpbFwiO1xyXG5pbXBvcnQge1N0cmluZ1V0aWxpdHl9IGZyb20gXCIuLi8uLi8uLi91dGlsaXR5L3N0cmluZy11dGlsaXR5XCI7XHJcbmltcG9ydCB7Q29sb3JVdGlsaXR5fSBmcm9tIFwiLi4vLi4vLi4vdXRpbGl0eS9jb2xvci11dGlsaXR5XCI7XHJcblxyXG5AQ29tcG9uZW50KHtcclxuICAgIHNlbGVjdG9yOiBcInBhdGgtYnV0dG9uXCIsXHJcbiAgICB0ZW1wbGF0ZVVybDogXCJidXR0b24uY29tcG9uZW50Lmh0bWxcIlxyXG59KVxyXG5leHBvcnQgY2xhc3MgQnV0dG9uQ29tcG9uZW50IHtcclxuICAgIEBJbnB1dChcImJ1dHRvblwiKVxyXG4gICAgQE91dHB1dChcImJ1dHRvblwiKVxyXG4gICAgYnV0dG9uOiBCdXR0b247XHJcbn1cclxuXHJcbmV4cG9ydCBjbGFzcyBCdXR0b24gZXh0ZW5kcyBQYWdlRWxlbWVudCBpbXBsZW1lbnRzIElCdXR0b24ge1xyXG4gICAgcHJpdmF0ZSBfaWNvbjogc3RyaW5nO1xyXG4gICAgcHJpdmF0ZSBfY3NzU3R5bGU6IE9iamVjdDtcclxuICAgIHByaXZhdGUgX2Nzc0NsYXNzOiBzdHJpbmc7XHJcbiAgICBwcml2YXRlIF9jc3NCdXR0b25UYXJnZXQ6IGJvb2xlYW47XHJcbiAgICBwcml2YXRlIF9jc3NHcm91cEJvcmRlcjogc3RyaW5nO1xyXG4gICAgcHJpdmF0ZSBfaGFuZGxlcjogSUJ1dHRvbkhhbmRsZXI7XHJcbiAgICBwcml2YXRlIF9kZXRhaWxzOiBCdXR0b25EZXRhaWxbXSA9IFtdO1xyXG4gICAgcHJpdmF0ZSBfdG9vbHRpcDogc3RyaW5nO1xyXG5cclxuICAgIC8vIFRPRE8gcmVmYWN0b3IgcHJvdG90eXBlIHN0dWZmXHJcbiAgICBwcml2YXRlIF91cmw6IHN0cmluZztcclxuICAgIHByaXZhdGUgX3BhZ2U6IHN0cmluZztcclxuICAgIHByaXZhdGUgX2Zvcm06IHN0cmluZztcclxuICAgIHByaXZhdGUgX2Zvcm1IYW5kbGVyOiBzdHJpbmc7XHJcblxyXG4gICAgY29uc3RydWN0b3IoYXBwOiBJUGF0aEFwcCwgcHJvdGVjdGVkIHBhdGhTZXJ2aWNlOiBQYXRoU2VydmljZSwgcHJvdGVjdGVkIHRyYW5zbGF0aW9uU2VydmljZTogVHJhbnNsYXRpb25TZXJ2aWNlKSB7XHJcbiAgICAgICAgc3VwZXIoYXBwKTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgb25DbGljaygpIHtcclxuICAgICAgICBpZiAodGhpcy5faGFuZGxlciAhPSBudWxsKSB7XHJcbiAgICAgICAgICAgIHRoaXMuX2hhbmRsZXIuZG9DbGljayh0aGlzKTtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKCFTdHJpbmdVdGlsaXR5LmlzRW1wdHkodGhpcy5fdXJsKSkge1xyXG4gICAgICAgICAgICB0aGlzLnBhdGhTZXJ2aWNlLnNlcnZlckdldCh0aGlzLmFwcC5nZXRCYWNrZW5kVXJsKCksIHRoaXMuX3VybCwgKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5hcHAucmVmcmVzaEN1cnJlbnRQYWdlKCk7XHJcbiAgICAgICAgICAgIH0sIG51bGwpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKCFTdHJpbmdVdGlsaXR5LmlzRW1wdHkodGhpcy5fcGFnZSkpIHtcclxuICAgICAgICAgICAgdGhpcy5hcHAuc2V0Q3VycmVudFBhZ2UodGhpcy5fcGFnZSwgdGhpcyk7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmICghU3RyaW5nVXRpbGl0eS5pc0VtcHR5KHRoaXMuX2Zvcm0pKSB7XHJcbiAgICAgICAgICAgIHRoaXMuYXBwLnNldEN1cnJlbnRGb3JtKHRoaXMuX2Zvcm0sIHRoaXMua2V5LCB0aGlzLl9mb3JtSGFuZGxlciwgdGhpcyk7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIHNldEljb24oaWNvbjogc3RyaW5nKSB7XHJcbiAgICAgICAgdGhpcy5pY29uID0gaWNvbjtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgc2V0Rm9ybShmb3JtOiBzdHJpbmcpIHtcclxuICAgICAgICB0aGlzLmZvcm0gPSBmb3JtO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBzZXRGb3JtSGFuZGxlcihmb3JtSGFuZGxlcjogc3RyaW5nKSB7XHJcbiAgICAgICAgdGhpcy5mb3JtSGFuZGxlciA9IGZvcm1IYW5kbGVyO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBzZXRQYWdlKHBhZ2U6IHN0cmluZykge1xyXG4gICAgICAgIHRoaXMucGFnZSA9IHBhZ2U7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIHNldEtleShrZXk6IEtleSkge1xyXG4gICAgICAgIHRoaXMua2V5ID0ga2V5O1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBnZXRBcHAoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuYXBwO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBnZXROYW1lKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLm5hbWU7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0IGljb24oKTogc3RyaW5nIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5faWNvbjtcclxuICAgIH1cclxuXHJcbiAgICBzZXQgaWNvbih2YWx1ZTogc3RyaW5nKSB7XHJcbiAgICAgICAgdGhpcy5faWNvbiA9IHZhbHVlO1xyXG4gICAgfVxyXG5cclxuICAgIGdldCBjc3NTdHlsZSgpOiBPYmplY3Qge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9jc3NTdHlsZTtcclxuICAgIH1cclxuXHJcbiAgICBnZXQgY3NzQ2xhc3MoKTogc3RyaW5nIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fY3NzQ2xhc3M7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0IGNzc0J1dHRvblRhcmdldCgpOiBib29sZWFuIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fY3NzQnV0dG9uVGFyZ2V0O1xyXG4gICAgfVxyXG5cclxuICAgIGdldCBjc3NHcm91cEJvcmRlcigpOiBzdHJpbmcge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9jc3NHcm91cEJvcmRlcjtcclxuICAgIH1cclxuXHJcbiAgICBzZXQgY3NzR3JvdXBCb3JkZXIodmFsdWU6IHN0cmluZykge1xyXG4gICAgICAgIHRoaXMuX2Nzc0dyb3VwQm9yZGVyID0gdmFsdWU7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0IGhhbmRsZXIoKTogSUJ1dHRvbkhhbmRsZXIge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9oYW5kbGVyO1xyXG4gICAgfVxyXG5cclxuICAgIHNldCBoYW5kbGVyKHZhbHVlOiBJQnV0dG9uSGFuZGxlcikge1xyXG4gICAgICAgIHRoaXMuX2hhbmRsZXIgPSB2YWx1ZTtcclxuICAgIH1cclxuXHJcbiAgICBnZXQgZGV0YWlscygpOiBCdXR0b25EZXRhaWxbXSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2RldGFpbHM7XHJcbiAgICB9XHJcblxyXG4gICAgc2V0IGRldGFpbHModmFsdWU6IEJ1dHRvbkRldGFpbFtdKSB7XHJcbiAgICAgICAgdGhpcy5fZGV0YWlscyA9IHZhbHVlO1xyXG4gICAgfVxyXG5cclxuICAgIGdldCBwYWdlKCk6IHN0cmluZyB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX3BhZ2U7XHJcbiAgICB9XHJcblxyXG4gICAgc2V0IHBhZ2UodmFsdWU6IHN0cmluZykge1xyXG4gICAgICAgIHRoaXMuX3BhZ2UgPSB2YWx1ZTtcclxuICAgIH1cclxuXHJcbiAgICBnZXQgZm9ybSgpOiBzdHJpbmcge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9mb3JtO1xyXG4gICAgfVxyXG5cclxuICAgIHNldCBmb3JtKHZhbHVlOiBzdHJpbmcpIHtcclxuICAgICAgICB0aGlzLl9mb3JtID0gdmFsdWU7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0IGZvcm1IYW5kbGVyKCk6IHN0cmluZyB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2Zvcm1IYW5kbGVyO1xyXG4gICAgfVxyXG5cclxuICAgIHNldCBmb3JtSGFuZGxlcih2YWx1ZTogc3RyaW5nKSB7XHJcbiAgICAgICAgdGhpcy5fZm9ybUhhbmRsZXIgPSB2YWx1ZTtcclxuICAgIH1cclxuXHJcbiAgICBnZXQgdXJsKCk6IHN0cmluZyB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX3VybDtcclxuICAgIH1cclxuXHJcbiAgICBzZXQgdXJsKHZhbHVlOiBzdHJpbmcpIHtcclxuICAgICAgICB0aGlzLl91cmwgPSB2YWx1ZTtcclxuICAgIH1cclxuXHJcbiAgICBnZXQgdG9vbHRpcCgpOiBzdHJpbmcge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl90b29sdGlwO1xyXG4gICAgfVxyXG5cclxuICAgIHNldCB0b29sdGlwKHZhbHVlOiBzdHJpbmcpIHtcclxuICAgICAgICB0aGlzLl90b29sdGlwID0gdmFsdWU7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGZyb21Kc29uKG1vZGVsRWxlbWVudCkge1xyXG4gICAgICAgIHN1cGVyLmZyb21Kc29uKG1vZGVsRWxlbWVudCk7XHJcblxyXG4gICAgICAgIC8vIGdlbmVyYWwgYXR0cmlidXRlc1xyXG4gICAgICAgIHRoaXMudHlwZSA9IFwiYnV0dG9uXCI7XHJcbiAgICAgICAgdGhpcy5zZXRJY29uKG1vZGVsRWxlbWVudFtcImljb25cIl0pO1xyXG4gICAgICAgIGlmIChtb2RlbEVsZW1lbnRbXCJjb2xvclwiXSAhPSBudWxsKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGNvbG9yID0gbW9kZWxFbGVtZW50W1wiY29sb3JcIl07XHJcbiAgICAgICAgICAgIGlmICh0eXBlb2YgY29sb3IgPT09IFwib2JqZWN0XCIpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuX2Nzc1N0eWxlID0gY29sb3I7XHJcbiAgICAgICAgICAgIH0gZWxzZSBpZiAodHlwZW9mIGNvbG9yID09PSBcInN0cmluZ1wiKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoQ29sb3JVdGlsaXR5LmlzUGF0aERlZmF1bHRDb2xvcihjb2xvcikpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9jc3NDbGFzcyA9IFwidGlsZS1cIiArIGNvbG9yO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9jc3NDbGFzcyA9IGNvbG9yO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChtb2RlbEVsZW1lbnRbXCJmb3JtXCJdICE9IG51bGwpIHtcclxuICAgICAgICAgICAgdGhpcy5zZXRGb3JtKG1vZGVsRWxlbWVudFtcImZvcm1cIl1bXCJmb3JtXCJdKTtcclxuICAgICAgICAgICAgdGhpcy5zZXRGb3JtSGFuZGxlcihtb2RlbEVsZW1lbnRbXCJmb3JtXCJdW1wiaGFuZGxlclwiXSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuc2V0UGFnZShtb2RlbEVsZW1lbnRbXCJwYWdlXCJdKTtcclxuICAgICAgICBpZiAodGhpcy5rZXkgPT0gbnVsbCAmJiB0aGlzLnBhcmVudFBhZ2VFbGVtZW50ICE9IG51bGwgJiYgbW9kZWxFbGVtZW50LnR5cGUgPT09IFwiYnV0dG9uXCIpIHtcclxuICAgICAgICAgICAgdGhpcy5rZXkgPSB0aGlzLnBhcmVudFBhZ2VFbGVtZW50LmtleTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5uYW1lID0gdGhpcy50cmFuc2xhdGlvblNlcnZpY2UuZ2V0VGV4dChtb2RlbEVsZW1lbnRbXCJuYW1lXCJdKTtcclxuICAgICAgICB0aGlzLnVybCA9IEtleVV0aWxpdHkudHJhbnNsYXRlVXJsKG1vZGVsRWxlbWVudFtcInVybFwiXSwgbnVsbCwgZmFsc2UsIHRoaXMpO1xyXG4gICAgICAgIGlmIChtb2RlbEVsZW1lbnRbXCJ0b29sdGlwXCJdICE9IG51bGwpIHtcclxuICAgICAgICAgICAgdGhpcy50b29sdGlwID0gdGhpcy50cmFuc2xhdGlvblNlcnZpY2UuZ2V0VGV4dChtb2RlbEVsZW1lbnRbXCJ0b29sdGlwXCJdKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gYnV0dG9uIGRldGFpbHNcclxuICAgICAgICBpZiAobW9kZWxFbGVtZW50W1wiZGV0YWlsc1wiXSAhPSBudWxsKSB7XHJcbiAgICAgICAgICAgIHRoaXMuZGV0YWlscyA9IFtdO1xyXG4gICAgICAgICAgICBmb3IgKGNvbnN0IGRldGFpbCBvZiBtb2RlbEVsZW1lbnRbXCJkZXRhaWxzXCJdKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBiZDogQnV0dG9uRGV0YWlsID0gbmV3IEJ1dHRvbkRldGFpbCgpO1xyXG4gICAgICAgICAgICAgICAgYmQudGV4dCA9IGRldGFpbDtcclxuICAgICAgICAgICAgICAgIHRoaXMuZGV0YWlscy5wdXNoKGJkKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICAvLyBidXR0b24gdGFyZ2V0XHJcbiAgICAgICAgdGhpcy5fY3NzQnV0dG9uVGFyZ2V0ID0gdHJ1ZTtcclxuICAgICAgICBpZiAodGhpcy50eXBlID09PSBcImJ1dHRvblwiKSB7XHJcbiAgICAgICAgICAgIGlmIChTdHJpbmdVdGlsaXR5LmlzRW1wdHkodGhpcy5mb3JtKSAmJiBTdHJpbmdVdGlsaXR5LmlzRW1wdHkodGhpcy5wYWdlKSAmJiBTdHJpbmdVdGlsaXR5LmlzRW1wdHkodGhpcy51cmwpKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9jc3NCdXR0b25UYXJnZXQgPSBmYWxzZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG4iXX0=