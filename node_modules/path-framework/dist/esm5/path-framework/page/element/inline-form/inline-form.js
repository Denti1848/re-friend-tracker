import * as tslib_1 from "tslib";
import { PageElement, Key } from "../page-element";
import { PathService } from "../../../service/path.service";
import { Inject } from "@angular/core";
import { FormFunction } from "../../../form/form-function";
import { TranslationService } from "../../../service/translation.service";
import { FocusUtility } from "../../../form/focus-utility";
var InlineForm = /** @class */ (function (_super) {
    tslib_1.__extends(InlineForm, _super);
    function InlineForm(app, pathService, translationService) {
        var _this = _super.call(this, app) || this;
        _this.pathService = pathService;
        _this.translationService = translationService;
        return _this;
    }
    Object.defineProperty(InlineForm.prototype, "url", {
        get: function () {
            return this._url;
        },
        set: function (value) {
            this._url = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(InlineForm.prototype, "formId", {
        get: function () {
            return this._formId;
        },
        set: function (value) {
            this._formId = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(InlineForm.prototype, "form", {
        get: function () {
            return this._form;
        },
        set: function (value) {
            this._form = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(InlineForm.prototype, "page", {
        get: function () {
            return this._page;
        },
        set: function (value) {
            this._page = value;
        },
        enumerable: true,
        configurable: true
    });
    InlineForm.prototype.fromJson = function (modelFormField) {
        _super.prototype.fromJson.call(this, modelFormField);
        if (modelFormField["form"] != null) {
            this.formId = modelFormField["form"];
        }
        if (modelFormField["page"] != null) {
            this.page = modelFormField["page"];
        }
        if (modelFormField["key"] == null) {
            // only set key if not set by model
            this.key = this.parentPageElement != null ? this.parentPageElement.key : null;
        }
    };
    InlineForm.prototype.loadNextForm = function (forward) {
        var _this = this;
        if (this._url != null) {
            this.pathService.serverGet(this.app.getBackendUrl(), this.url, function (data) {
                var e_1, _a;
                if (data != null && data["length"] != null && data.length > 0) {
                    var foundNewKey = false;
                    if (_this._currentKey == null) {
                        var firstItem = data[0];
                        _this._currentKey = new Key(firstItem["key"]["key"], firstItem["key"]["name"]);
                        foundNewKey = true;
                    }
                    else {
                        var counter = 0;
                        try {
                            for (var data_1 = tslib_1.__values(data), data_1_1 = data_1.next(); !data_1_1.done; data_1_1 = data_1.next()) {
                                var item = data_1_1.value;
                                counter++;
                                if (item["key"]["key"] === _this._currentKey.getKey() && item["key"]["name"] === _this._currentKey.getName()) {
                                    if (forward && data.length > counter) {
                                        _this._currentKey = new Key(data[counter]["key"]["key"], data[counter]["key"]["name"]);
                                        foundNewKey = true;
                                    }
                                    else if (!forward && counter > 1) {
                                        _this._currentKey = new Key(data[counter - 2]["key"]["key"], data[counter - 2]["key"]["name"]);
                                        foundNewKey = true;
                                    }
                                    break;
                                }
                            }
                        }
                        catch (e_1_1) { e_1 = { error: e_1_1 }; }
                        finally {
                            try {
                                if (data_1_1 && !data_1_1.done && (_a = data_1.return)) _a.call(data_1);
                            }
                            finally { if (e_1) throw e_1.error; }
                        }
                    }
                    if (_this._currentKey != null && foundNewKey) {
                        console.log("load next inline form with key " + _this._currentKey.getKey() + "/" + _this._currentKey.getName());
                        var formFunction = new FormFunction();
                        formFunction.save = function (formdata) {
                            _this.loadNextForm(true);
                        };
                        formFunction.cancel = function () {
                            _this.loadNextForm(true);
                        };
                        formFunction.delete = function (formdata) {
                            _this.loadNextForm(false);
                        };
                        _this._form = _this.app.createForm(_this._formId, _this._currentKey, null, formFunction, _this);
                        _this.name = _this._form.title;
                        FocusUtility.focusFirstField(_this.form);
                    }
                    else {
                        _this._form = null;
                        if (_this.page == null) {
                            _this.app.navigateBack();
                        }
                        else {
                            _this.app.setCurrentPage(_this.page, _this);
                        }
                    }
                }
                else {
                    window.alert(_this.translationService.getText("NoDataError"));
                    _this.app.navigateBack();
                }
            }, null);
        }
    };
    InlineForm = tslib_1.__decorate([
        tslib_1.__param(1, Inject(PathService)),
        tslib_1.__param(2, Inject(TranslationService))
    ], InlineForm);
    return InlineForm;
}(PageElement));
export { InlineForm };
//# sourceMappingURL=data:application/json;base64,