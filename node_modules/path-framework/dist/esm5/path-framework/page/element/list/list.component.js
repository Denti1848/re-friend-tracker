import * as tslib_1 from "tslib";
import { Component, Input, Output } from "@angular/core";
import { PageElement } from "../page-element";
import { KeyUtility } from "../../../utility/key-utility";
import { Button } from "../button/button.component";
import { FocusUtility } from "../../../form/focus-utility";
import { Subject } from "rxjs";
import { debounceTime } from "rxjs/operators";
var ListComponent = /** @class */ (function () {
    function ListComponent() {
    }
    ListComponent.prototype.ngAfterViewInit = function () {
        FocusUtility.focusFirstField(null);
    };
    tslib_1.__decorate([
        Input("list"),
        Output("list")
    ], ListComponent.prototype, "list", void 0);
    ListComponent = tslib_1.__decorate([
        Component({
            selector: "path-list",
            template: "<!-- search on mobile devices -->\r\n<div *ngIf='list.search' class=\"search-mobile hide-on-desktop\">\r\n    <div class=\"row\">\r\n        <label for=\"search-mobile\">Search</label>\r\n        <input id=\"search-mobile\" name=\"search\" [(ngModel)]=\"list.searchText\" placeholder=\"{{list.searchInputLabel}}\" (ngModelChange)='list.filterChanged($event)' class=\"form-control\" type=\"text\">\r\n    </div>\r\n</div>\r\n<span>\r\n    <span>\r\n        <div class=\"tile-group\">\r\n            <!-- default search (tablet, desktop) -->\r\n            <div *ngIf='list.search' class=\"thumbnail {{(list.searchButton.width <= 1 ? 'tile-medium' : (list.searchButton.width == 2 ? 'tile-wide' : (list.searchButton.width == 3 ? 'tile-wide-3' : (list.searchButton.width >= 4 ? 'tile-wide-4' : ''))))}} tile tile-button hide-on-mobile {{list.searchButton.cssClass}}\" [ngStyle]=\"list.searchButton.cssStyle\">\r\n                <div class=\"input-group input-group-sm\">\r\n                    <div class=\"h3\">{{list.searchLabel}}</div>\r\n                    <i class=\"fa fa-2x fa-search\"></i>\r\n                    <div class=\"h5\"></div>\r\n                    <form>\r\n                        <input name=\"search\" [(ngModel)]=\"list.searchText\" placeholder=\"{{list.searchInputLabel}}\" (ngModelChange)='list.filterChanged($event)' class=\"form-control\" type=\"text\">\r\n                    </form>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </span>\r\n    <!-- list -->\r\n    <span *ngFor='let buttonGroup of list.buttonGroups; let i = index'>\r\n        <path-button-group [buttonGroup]=\"buttonGroup\"></path-button-group>\r\n    </span>\r\n</span>"
        })
    ], ListComponent);
    return ListComponent;
}());
export { ListComponent };
var List = /** @class */ (function (_super) {
    tslib_1.__extends(List, _super);
    function List(app, pathService, translationService) {
        var _this = _super.call(this, app) || this;
        _this.pathService = pathService;
        _this.translationService = translationService;
        _this._buttonGroups = [];
        _this._searchTextChanged = new Subject();
        _this._searchLabel = translationService.getText("Search");
        _this._searchInputLabel = translationService.getText("SearchInputLabel");
        _this._searchButton = new Button(app, pathService, translationService);
        return _this;
    }
    List.prototype.getContent = function () {
        var e_1, _a;
        var buttons = [];
        try {
            for (var _b = tslib_1.__values(this.buttonGroups), _c = _b.next(); !_c.done; _c = _b.next()) {
                var buttonGroup = _c.value;
                buttons.push.apply(buttons, tslib_1.__spread(buttonGroup.buttons));
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_1) throw e_1.error; }
        }
        return buttons;
    };
    List.prototype.refresh = function (searchText, afterRefreshHandler) {
        var e_2, _a;
        var _this = this;
        // callback function for data
        console.log("refresh list (searchText: " + searchText + ")");
        var dataHandler = function (data) {
            var e_3, _a, e_4, _b, e_5, _c;
            _this.buttonGroups = [];
            try {
                for (var data_1 = tslib_1.__values(data), data_1_1 = data_1.next(); !data_1_1.done; data_1_1 = data_1.next()) {
                    var item = data_1_1.value;
                    // create button group and buttons
                    // set default types if server does not set type (button or buttonGroup)
                    var itemIsButtonGroup = item.hasOwnProperty("buttons");
                    if (itemIsButtonGroup) {
                        item["type"] = "buttonGroup";
                        try {
                            for (var _d = (e_4 = void 0, tslib_1.__values(item.buttons)), _e = _d.next(); !_e.done; _e = _d.next()) {
                                var button = _e.value;
                                if (button["type"] == null) {
                                    button["type"] = "button";
                                }
                            }
                        }
                        catch (e_4_1) { e_4 = { error: e_4_1 }; }
                        finally {
                            try {
                                if (_e && !_e.done && (_b = _d.return)) _b.call(_d);
                            }
                            finally { if (e_4) throw e_4.error; }
                        }
                    }
                    else {
                        if (item["type"] == null) {
                            item["type"] = "button";
                        }
                    }
                    var pageElements = _this.app.createPageElement(item, _this.parentPageElement, null);
                    if (pageElements.length !== 1) {
                        console.log("error creating button group from: ");
                        console.log(item);
                    }
                    else {
                        var buttonGroup = pageElements[0];
                        var buttonCounter = 0;
                        try {
                            for (var _f = (e_5 = void 0, tslib_1.__values(buttonGroup.buttons)), _g = _f.next(); !_g.done; _g = _f.next()) {
                                var button = _g.value;
                                button.listElement = true;
                                // model is either simple button or button of a group
                                var buttonModel = item;
                                if (itemIsButtonGroup) {
                                    buttonModel = item.buttons[buttonCounter];
                                }
                                // build button from json
                                // use list defaults if button does not specify model
                                if (buttonModel["icon"] == null) {
                                    buttonModel["icon"] = _this.icon;
                                }
                                if (buttonModel["color"] == null) {
                                    buttonModel["color"] = _this.color;
                                }
                                if (buttonModel["page"] == null && (buttonModel["form"] == null || buttonModel["form"]["form"] == null)) {
                                    // service does not return page or form, use static model
                                    if (_this.page != null) {
                                        buttonModel["page"] = _this.page;
                                    }
                                    if (_this.form != null) {
                                        buttonModel["form"] = {};
                                        buttonModel.form["form"] = _this.form;
                                        buttonModel.form["handler"] = _this.formHandler;
                                    }
                                }
                                // special default width (2 instead of 1) for buttons in list
                                if (buttonModel["width"] == null) {
                                    buttonModel["width"] = _this.width;
                                }
                                button.fromJson(buttonModel);
                                // special values for list buttons
                                button.handler = _this._buttonHandler;
                                button.name = buttonModel.name; // no translation
                                button.tooltip = buttonModel.tooltip; // no translation
                                buttonCounter++;
                            }
                        }
                        catch (e_5_1) { e_5 = { error: e_5_1 }; }
                        finally {
                            try {
                                if (_g && !_g.done && (_c = _f.return)) _c.call(_f);
                            }
                            finally { if (e_5) throw e_5.error; }
                        }
                        _this.buttonGroups.push(buttonGroup);
                    }
                }
            }
            catch (e_3_1) { e_3 = { error: e_3_1 }; }
            finally {
                try {
                    if (data_1_1 && !data_1_1.done && (_a = data_1.return)) _a.call(data_1);
                }
                finally { if (e_3) throw e_3.error; }
            }
            if (_this.handler != null) {
                _this.handler.doLoad(_this); // TODO useful?
            }
            // refresh search
            _this.filterVisibleButtonGroups();
            if (_this.limit) {
                _this.setSearchResultsCountMessage();
            }
            if (afterRefreshHandler != null) {
                window.setTimeout(function () {
                    afterRefreshHandler();
                }, 1);
            }
        };
        var listHandlerDoLoad = function (list) { return function (data) { return dataHandler(data); }; };
        // backend data
        if (this._url != null) {
            var urlParameters = "";
            if (this.searchRequest || this.limit) {
                urlParameters = "?search=" + (searchText == null ? "" : encodeURI(searchText)) + "&limit=" + this.limit;
            }
            this.pathService.serverGet(this.app.getBackendUrl(), this.url + urlParameters, listHandlerDoLoad(this), null);
        }
        // mock data
        if (this._mockData != null) {
            var count = 0;
            try {
                // fake a key for mock data
                for (var _b = tslib_1.__values(this.mockData), _c = _b.next(); !_c.done; _c = _b.next()) {
                    var mock = _c.value;
                    count++;
                    if (mock["key"] == null) {
                        mock["key"] = count;
                    }
                }
            }
            catch (e_2_1) { e_2 = { error: e_2_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                }
                finally { if (e_2) throw e_2.error; }
            }
            dataHandler(this.mockData);
        }
    };
    List.prototype.filterChanged = function (text) {
        this._searchTextChanged.next(text);
    };
    List.prototype.filter = function () {
        this._searchLabel = this.translationService.getText("Search");
        if (this._searchText && this._searchText === "*") {
            this.refresh(null, null);
        }
        else if (this.searchRequest) {
            // call server to filter data
            if (!this._searchText && this.searchRequired) {
                this._buttonGroups = [];
            }
            else if (this._searchText === "*" || (!this._searchText && !this.searchRequired)) {
                this.refresh(null, null);
            }
            else if (this._searchText && this._searchText.length >= 2) {
                this.refresh(this._searchText, null);
            }
            else {
                this._searchLabel = this.translationService.getText("SearchTextTooShort");
                this._buttonGroups = [];
            }
        }
        else {
            // filter loaded data only
            this.filterVisibleButtonGroups();
        }
    };
    List.prototype.filterVisibleButtonGroups = function () {
        var e_6, _a, e_7, _b, e_8, _c;
        var searchText = this._searchText ? this._searchText.toLowerCase() : "";
        try {
            for (var _d = tslib_1.__values(this._buttonGroups), _e = _d.next(); !_e.done; _e = _d.next()) {
                var buttonGroup = _e.value;
                if (searchText.length <= 0) {
                    buttonGroup.visible = true;
                }
                else {
                    buttonGroup.visible = false;
                    try {
                        for (var _f = (e_7 = void 0, tslib_1.__values(buttonGroup.buttons)), _g = _f.next(); !_g.done; _g = _f.next()) {
                            var button = _g.value;
                            if (!buttonGroup.visible) {
                                buttonGroup.visible = button.name.toLowerCase().indexOf(searchText) !== -1;
                                if (!buttonGroup.visible) {
                                    try {
                                        for (var _h = (e_8 = void 0, tslib_1.__values(button.details)), _j = _h.next(); !_j.done; _j = _h.next()) {
                                            var detail = _j.value;
                                            if (detail.text.toLowerCase().indexOf(searchText) !== -1) {
                                                buttonGroup.visible = true;
                                                break;
                                            }
                                        }
                                    }
                                    catch (e_8_1) { e_8 = { error: e_8_1 }; }
                                    finally {
                                        try {
                                            if (_j && !_j.done && (_c = _h.return)) _c.call(_h);
                                        }
                                        finally { if (e_8) throw e_8.error; }
                                    }
                                }
                            }
                        }
                    }
                    catch (e_7_1) { e_7 = { error: e_7_1 }; }
                    finally {
                        try {
                            if (_g && !_g.done && (_b = _f.return)) _b.call(_f);
                        }
                        finally { if (e_7) throw e_7.error; }
                    }
                }
            }
        }
        catch (e_6_1) { e_6 = { error: e_6_1 }; }
        finally {
            try {
                if (_e && !_e.done && (_a = _d.return)) _a.call(_d);
            }
            finally { if (e_6) throw e_6.error; }
        }
        if (this.visibleItemSize() !== this.buttonGroups.length) {
            this.setSearchResultsCountMessage();
        }
    };
    List.prototype.setSearchResultsCountMessage = function () {
        this._searchLabel = this.visibleItemSize() + " " +
            (this.visibleItemSize() === 1 ? this.translationService.getText("Result") : this.translationService.getText("Results"));
    };
    List.prototype.visibleItemSize = function () {
        var e_9, _a, e_10, _b;
        var result = 0;
        try {
            for (var _c = tslib_1.__values(this.buttonGroups), _d = _c.next(); !_d.done; _d = _c.next()) {
                var buttonGroup = _d.value;
                if (buttonGroup.visible) {
                    try {
                        for (var _e = (e_10 = void 0, tslib_1.__values(buttonGroup.buttons)), _f = _e.next(); !_f.done; _f = _e.next()) {
                            var button = _f.value;
                            if (button.visible) {
                                result++;
                                break;
                            }
                        }
                    }
                    catch (e_10_1) { e_10 = { error: e_10_1 }; }
                    finally {
                        try {
                            if (_f && !_f.done && (_b = _e.return)) _b.call(_e);
                        }
                        finally { if (e_10) throw e_10.error; }
                    }
                }
            }
        }
        catch (e_9_1) { e_9 = { error: e_9_1 }; }
        finally {
            try {
                if (_d && !_d.done && (_a = _c.return)) _a.call(_c);
            }
            finally { if (e_9) throw e_9.error; }
        }
        return result;
    };
    Object.defineProperty(List.prototype, "buttonGroups", {
        get: function () {
            return this._buttonGroups;
        },
        set: function (value) {
            this._buttonGroups = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(List.prototype, "search", {
        get: function () {
            return this._search;
        },
        set: function (value) {
            this._search = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(List.prototype, "handler", {
        get: function () {
            return this._handler;
        },
        set: function (value) {
            this._handler = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(List.prototype, "buttonHandler", {
        get: function () {
            return this._buttonHandler;
        },
        set: function (value) {
            this._buttonHandler = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(List.prototype, "icon", {
        get: function () {
            return this._icon;
        },
        set: function (value) {
            this._icon = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(List.prototype, "color", {
        get: function () {
            return this._color;
        },
        set: function (value) {
            this._color = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(List.prototype, "form", {
        get: function () {
            return this._form;
        },
        set: function (value) {
            this._form = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(List.prototype, "formHandler", {
        get: function () {
            return this._formHandler;
        },
        set: function (value) {
            this._formHandler = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(List.prototype, "page", {
        get: function () {
            return this._page;
        },
        set: function (value) {
            this._page = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(List.prototype, "mockData", {
        get: function () {
            return this._mockData;
        },
        set: function (value) {
            this._mockData = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(List.prototype, "url", {
        get: function () {
            return this._url;
        },
        set: function (value) {
            this._url = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(List.prototype, "limit", {
        get: function () {
            return this._limit;
        },
        set: function (value) {
            this._limit = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(List.prototype, "searchRequired", {
        get: function () {
            return this._searchRequired;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(List.prototype, "searchRequest", {
        get: function () {
            return this._searchRequest;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(List.prototype, "searchText", {
        get: function () {
            return this._searchText;
        },
        set: function (value) {
            this._searchText = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(List.prototype, "searchLabel", {
        get: function () {
            return this._searchLabel;
        },
        set: function (value) {
            this._searchLabel = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(List.prototype, "searchInputLabel", {
        get: function () {
            return this._searchInputLabel;
        },
        set: function (value) {
            this._searchInputLabel = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(List.prototype, "searchButton", {
        get: function () {
            return this._searchButton;
        },
        enumerable: true,
        configurable: true
    });
    List.prototype.fromJson = function (modelElement) {
        var _this = this;
        _super.prototype.fromJson.call(this, modelElement);
        if (modelElement["search"] != null) {
            this.search = modelElement["search"];
        }
        if (modelElement["searchRequired"] != null) {
            this._searchRequired = modelElement["searchRequired"];
        }
        if (modelElement["searchRequest"] != null) {
            this._searchRequest = modelElement["searchRequest"];
        }
        if (modelElement["limit"] != null) {
            this.limit = modelElement["limit"];
        }
        // verify valid search combinations
        if (!this.search && this.searchRequired) {
            console.log("Configuration Error: search=false requires searchRequired=false");
            this._searchRequired = false;
        }
        if (this.searchRequired && !this.searchRequest) {
            console.log("Configuration Error: searchRequired=true requires searchRequest=true");
            this._searchRequest = true;
        }
        // other model attributes
        if (modelElement["color"] != null) {
            this.color = modelElement["color"];
        }
        if (modelElement["form"] != null) {
            this.form = modelElement["form"]["form"];
            this.formHandler = modelElement["form"]["handler"];
        }
        if (modelElement["page"] != null) {
            this.page = modelElement["page"];
        }
        if (modelElement["icon"] != null) {
            this.icon = modelElement["icon"];
        }
        if (modelElement["data"] != null) {
            this.mockData = modelElement["data"];
        }
        if (modelElement["name"] != null) {
            this.name = this.translationService.getText(modelElement["name"]);
        }
        if (modelElement["url"] != null) {
            var urlString = modelElement["url"];
            this.url = KeyUtility.translateUrl(urlString, null, false, this);
        }
        // override from PageElement
        if (modelElement["width"] != null) {
            this.width = modelElement["width"];
        }
        else {
            this.width = 2; // special default for list
        }
        // search button
        var searchButtonModel = {};
        searchButtonModel["color"] = modelElement["searchColor"] != null ? modelElement["searchColor"] : "tile-search";
        searchButtonModel["width"] = modelElement["searchWidth"] != null ? modelElement["searchWidth"] : this.width;
        this._searchButton.fromJson(searchButtonModel);
        // delay for search field
        var debounceTimeValue = this.searchRequest ? 300 : 30;
        this._searchTextChanged.pipe(debounceTime(debounceTimeValue)) // wait after the last event before emitting last event
            .subscribe(function (_searchText) {
            _this._searchText = _searchText;
            _this.filter();
        });
    };
    return List;
}(PageElement));
export { List };
//# sourceMappingURL=data:application/json;base64,